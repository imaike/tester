!function(I){function g(A){if(C[A])return C[A].exports;var n=C[A]={i:A,l:!1,exports:{}};return I[A].call(n.exports,n,n.exports,g),n.l=!0,n.exports}var C={};g.m=I,g.c=C,g.i=function(I){return I},g.d=function(I,C,A){g.o(I,C)||Object.defineProperty(I,C,{configurable:!1,enumerable:!0,get:A})},g.n=function(I){var C=I&&I.__esModule?function(){return I.default}:function(){return I};return g.d(C,"a",C),C},g.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},g.p="",g(g.s=1)}([,function(module,exports){eval('//Ken-Q Analysis\n//Copyright (C) 2016 Shawn Banasick\n//\n//    This program is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, either version 3 of the License, or\n//    (at your option) any later version.\n\n\n// JSlint declarations\n/* global window, $, resources, EXCEL, FIREBASE, DEMO, d3, INPUT, ROTA, VARIMAX, OUTPUT, LOAD, localStorage, _, d3_save_svg, document, Huebee, PASTE, CORR, sessionStorage, CENTROID, VIEW, PCA, QAV, UTIL, performance*/\n\n(function (CONTROLERS, QAV, undefined) {\n\n    /*\n    //\n    // **** SECTION 1 **** data input\n    //\n    */\n\n    // ***** Persist Pasted Sort Data in PQMethod input section *****************\n    // todo - move this to manual input file?\n\n    // Use Demo Data Set Option - display database selected\n    (function () {\n        $("#existingDatabaseSelect").change(function () {\n            var testValue = $(this).val();\n            if (testValue === "Lipset") {\n                DEMO.returnLipset();\n            } else if (testValue === "Medium") {\n                DEMO.returnMedium();\n            } else if (testValue === "Large") {\n                DEMO.returnQuotes();\n            }\n        });\n    })();\n\n\n    // call check manual input sort symmetry\n    (function () {\n        $("#sortInputSubmit").on(\'click\', function (e) {\n            e.preventDefault();\n            INPUT.isSortSymmetric();\n            $(\'#respondentNameInput1\').focus();\n        });\n    })();\n\n    (function () {\n        var input = document.getElementById(\'sortInputBox\');\n\n        // pull user input from memory if it exists\n        var temp1 = localStorage.getItem("sortInputBox");\n        if (temp1) {\n            input.value = temp1;\n        }\n\n        // capture sorts from user-input and set into memory\n        $(\'#sortInputBox\').on(\'input propertychange change\', function () {\n            localStorage.setItem("sortInputBox", this.value);\n        });\n    })();\n\n    (function () {\n        $(\'#stageDataPqmethod\').on(\'click\', function () {\n            PASTE.stageDataPqmethod();\n        });\n    })();\n\n    // to clear so new data can be added\n    (function () {\n        $("#clearInputBoxDataButton").on("click", function () {\n            $("#sortInputBox").val("");\n            localStorage.setItem("sortInputBox", "");\n            QAV.setState("sortInputBox", "");\n            $("#statementsInputBoxPqmethod").val("");\n            localStorage.setItem("qavStatementsInputBoxPqmethod", "");\n        });\n    })();\n\n    // import EXCEL files\n    (function () {\n        $("#fileSelect").on("change", function (e) {\n            QAV.setState("typeOfExcelFile", "user-input");\n            EXCEL.filePicked(e);\n        });\n    })();\n\n\n    // import Unforced EXCEL files\n    (function () {\n        $("#fileSelectUnforced").on("change", function (e) {\n            QAV.setState("typeOfExcelFile", "unforced");\n            EXCEL.filePicked(e);\n        });\n    })();\n\n    // import Ken-Q output files to EXCEL\n    (function () {\n        $("#fileSelectKenq").on("change", function (e) {\n            EXCEL.filePickedKenq(e);\n        });\n    })();\n\n    // import DAT files to PASTE\n    (function () {\n        $("#fileSelectPQM").on("change", function (e) {\n            PASTE.filePickedTextPQM(e);\n        });\n    })();\n\n    // import STA files to PASTE\n    (function () {\n        $("#fileSelectSTA").on("change", function (e) {\n            PASTE.filePickedTextSTA(e);\n        });\n    })();\n\n    // import STA files to PASTE     displayJsonData\n    (function () {\n        $("#fileSelectJSON").on("change", function (e) {\n            FIREBASE.filePickedJSON(e);\n        });\n    })();\n\n    (function () {\n        $("#stageJsonData").on("click", function (e) {\n            FIREBASE.stageJsonData(e);\n            $(".jsonDownloadPQ").show();\n        });\n    })();\n\n    (function () {\n        $("#downloadJsonData").on("click", function (e) {\n            FIREBASE.downloadJsonData(e);\n        });\n    })();\n\n    (function () {\n        $("#existingDatabaseRespondentList").on("click", "button", function (e) {\n            e.preventDefault();\n            var index = $(this).parent().index();\n            $(this).parent().remove();\n            var respondentNames = QAV.getState("qavRespondentNames");\n            var sorts = QAV.getState("qavRespondentSortsFromDbStored");\n            respondentNames.splice(index, 1);\n            sorts.splice(index, 1);\n\n            if ($.fn.DataTable.isDataTable(\'#correlationTable2\')) {\n                $(\'#correlationTable2\').DataTable().destroy();\n                $(\'#correlationTable2\').html("");\n            }\n\n            QAV.setState("qavRespondentNames", respondentNames);\n            QAV.setState("qavRespondentSortsFromDbStored", sorts);\n        });\n    })();\n\n    (function () {\n        $("#exportJsonSortsPQM").on("click", function (e) {\n            e.preventDefault();\n            EXCEL.exportExcelSortsPQM();\n        });\n    })();\n\n    (function () {\n        $("#exportStatementsPQM").on("click", function (e) {\n            e.preventDefault();\n            EXCEL.exportStatementsToPqmethod();\n        });\n    })();\n\n\n    (function () {\n        $("#clearAnalysisDataButton").on("click", function (e) {\n            e.preventDefault();\n            $("#existingDatabaseStatementList").empty();\n            $("#existingDatabaseRespondentList").empty();\n            if ($.fn.DataTable.isDataTable(\'#correlationTable2\')) {\n                $(\'#correlationTable2\').DataTable().destroy();\n                $(\'#correlationTable2\').html("");\n            }\n            $(".pqmButton").hide();\n        });\n    })();\n\n    (function () {\n        $("#disableSymmetryButton").on("click", function (e) {\n            e.preventDefault();\n            var language = QAV.getState("language");\n            var noSymmButText = resources[language].translation["Symmetry Check Disabled"];\n            var symmButText = resources[language].translation["Disable Symmetry Check"];\n            var button = $(this);\n            if (button.hasClass("buttonActionComplete")) {\n                button.prop(\'value\', symmButText);\n                button.addClass("blackHover");\n                button.removeClass("buttonActionComplete");\n                QAV.setState("doSymmetryCheck", "true");\n            } else {\n                button.prop(\'value\', noSymmButText);\n                button.removeClass("blackHover");\n                button.addClass("buttonActionComplete");\n                QAV.setState("doSymmetryCheck", "false");\n            }\n        });\n    })();\n\n    (function () {\n        $("#disableErrorSoundButton").on("click", function (e) {\n            e.preventDefault();\n            var language = QAV.getState("language");\n            var noErrorButText = resources[language].translation["AUDIO ERROR WARNING DISABLED"];\n            var errorButText = resources[language].translation["Disable Audio Error Warning"];\n            var button = $(this);\n            if (button.hasClass("buttonActionComplete")) {\n                button.prop(\'value\', errorButText);\n                button.addClass("blackHover");\n                button.removeClass("buttonActionComplete");\n                QAV.setState("doErrorSound", "true");\n            } else {\n                button.prop(\'value\', noErrorButText);\n                button.removeClass("blackHover");\n                button.addClass("buttonActionComplete");\n                QAV.setState("doErrorSound", "false");\n            }\n        });\n    })();\n\n    /*\n    //\n    // **** SECTION 2 **** correlations\n    //\n    */\n\n\n    // start correlation anaysis from demo data\n    (function () {\n        $("#beginAnalysisLocalData").on("click", function () {\n            CORR.createCorrelationTable();\n            $("#section4 > div.row.factorExtrafactorExtractionButtonDiv").show();\n        });\n    })();\n\n\n    /*\n    //\n    // **** SECTION 3 **** factor extractions\n    //\n    */\n    // to start pca and draw PCA table\n    (function () {\n        document.getElementById("PcaExtractionButton").addEventListener("click", function () {\n\n            var button, button2, X, t0, t1;\n\n            // var language = QAV.getState("language");\n            // var PcaButText = resources[language].translation["Principal components"];\n\n            t0 = performance.now();\n\n            //   button = $(this);\n            // button.removeClass("blackHover");\n            // button.addClass("buttonActionComplete");\n            // button.prop(\'value\', PcaButText);\n            // button.prop(\'disabled\', true);\n\n            // button2 = $("#factorExtractionButton");\n            // button2.prop(\'disabled\', true);\n\n            // $("#resetAnalysisButton").prop(\'disabled\', false);\n\n            X = QAV.getState("originalCorrelationValues");\n            PCA.doPrincipalComponents(X);\n\n            QAV.setState("numFactorsExtracted", 8);\n\n            t1 = performance.now();\n\n            console.log(\'%c PCA completed in \' + (t1 - t0).toFixed(0) + \' milliseconds\', \'background: black; color: white\');\n\n            $("#section5 > div.row.factorsToKeepForRotationDiv").show();\n\n\n            // required for firefox to register event\n            return false;\n        });\n    })();\n\n\n    // Centroid factor extration button listener\n    (function () {\n        $("#factorExtractionButton").on("click", function () {\n\n            var button2, dataArray;\n            var language = QAV.getState("language");\n            var centFacButText = resources[language].translation["Centroid factors"];\n\n            CENTROID.fireFactorExtraction();\n            $(this).removeClass("blackHover").addClass("buttonActionComplete").prop(\'value\', centFacButText).prop(\'disabled\', true);\n\n            button2 = $("#PcaExtractionButton");\n            button2.prop(\'disabled\', true);\n\n            $("#resetAnalysisButton").prop(\'disabled\', false);\n\n            CENTROID.drawExtractedFactorsTable();\n\n            // draw scree plot\n            dataArray = QAV.getState("centroidEigenvalues");\n            dataArray.shift();\n            UTIL.drawScreePlot(dataArray);\n\n            $("#section4 > input").show();\n            $("#section5 > div.row.factorsToKeepForRotationDiv").show();\n\n            // required for firefox to register event?\n            return false;\n        });\n    })();\n\n    // clear view for reset analysis\n    (function () {\n        $("#resetAnalysisButton").on("click", function () {\n\n            VIEW.destroyExtractionTables();\n            $(this).prop(\'disabled\', true);\n\n            d3.select("#screePlotDiv svg").remove();\n            $("#section4 > input").hide();\n\n            VIEW.clearSections_4_5_6();\n            // num factors to keep div\n            $("#section5 > div.row.factorsToKeepForRotationDiv").hide();\n\n            // reset state\n            QAV.setState("rotFacStateArray", "");\n            QAV.setState("tempRotFacStateArray", "");\n            QAV.setState("numberFactorsExtracted", "");\n            QAV.setState("fSigCriterion", "");\n            QAV.setState("rowH2", "");\n            QAV.setState("fSigCriterionResults", "");\n            QAV.setState("expVar", "");\n            QAV.setState("columnHeadersArray", "");\n            QAV.setState("saveRotationCounter", "");\n            QAV.setState("rotFacStateArrayArchive1", "");\n            QAV.setState("centroidFactors", "");\n            QAV.setState("analysisOutput", "");\n            QAV.setState("factorMatrixTransposed", "");\n\n            QAV.setState("centroidFactors", "");\n            QAV.setState("typeOfFactor", "");\n            QAV.setState("pcaNumberFactorsExtracted", "");\n            QAV.setState("factorLabels", "");\n            QAV.setState("eigenValuesSorted", "");\n            QAV.setState("eigenValuesAsPercents", "");\n            QAV.setState("eigenValuesCumulPercentArray", "");\n            QAV.setState("eigenVecs", "");\n            QAV.setState("numFactorsExtracted", "");\n            QAV.setState("pcaTableHeaders", "");\n            QAV.setState("pcaTableTargets", "");\n            QAV.setState("numFactorsRetained", "");\n            QAV.setState("typeOfRotation", "");\n\n            // required for firefox to register event\n            return false;\n        });\n    })();\n\n    /*\n    //\n    // **** SECTION 4 **** Rotation\n    //\n    */\n\n    (function () {\n        // rotation button 1 event listener\n        $("#clockwiseButton").on("click", function (e) {\n            e.preventDefault();\n            var rotationDegreeDisplayValue = parseInt(sessionStorage.getItem("rotationDegreeDisplayValue"));\n\n            var rotationDegree = parseInt($("#rotationDisplayInput").val());\n            rotationDegreeDisplayValue = rotationDegreeDisplayValue + rotationDegree;\n            var rotationDegreeDisplay = $("#handRotationDisplayContainer div");\n            rotationDegreeDisplay.html(rotationDegreeDisplayValue + "&deg");\n\n            sessionStorage.setItem("rotationDegreeDisplayValue", rotationDegreeDisplayValue);\n\n            ROTA.saveRotationButtonColor(rotationDegreeDisplayValue);\n\n            ROTA.calculateRotatedFactors(rotationDegree);\n        });\n    })();\n\n    // rotation button 2 event listener\n    (function () {\n        $("#counter-clockwiseButton").on("click", function (e) {\n            e.preventDefault();\n            var rotationDegreeDisplayValue = sessionStorage.getItem("rotationDegreeDisplayValue");\n\n            var rotationDegree = parseInt($("#rotationDisplayInput").val());\n            rotationDegreeDisplayValue = rotationDegreeDisplayValue - rotationDegree;\n\n            var rotationDegreeDisplay = $("#handRotationDisplayContainer div");\n            rotationDegreeDisplay.html(rotationDegreeDisplayValue + "&deg");\n            rotationDegree = -rotationDegree;\n\n            sessionStorage.setItem("rotationDegreeDisplayValue", rotationDegreeDisplayValue);\n\n            ROTA.saveRotationButtonColor(rotationDegreeDisplayValue);\n            ROTA.calculateRotatedFactors(rotationDegree);\n        });\n    })();\n\n    // push rotation values to rotation table and array\n    (function () {\n        $("#saveRotationButton").on("click", function (e) {\n            e.preventDefault();\n            var testForSplit = QAV.getState("hasSplitFactor");\n            if (testForSplit > 0) {\n                VIEW.showDisabledFunctionsAfterSplitModal();\n            } else {\n                ROTA.saveRotation();\n            }\n        });\n    })();\n\n\n    // triggered by "Display Selected Factors" button\n    (function () {\n        $("#generateRotationItemsButton").on("click", function (e) {\n            e.preventDefault();\n            var testForSplit = QAV.getState("hasSplitFactor");\n            var language = QAV.getState("language");\n            var appendErrorText1 = resources[language].translation["selectedFactorsError"];\n\n            // pull the selected factors \n            var facNumberSelectedCheck = ROTA.setRotationFactorsFromCheckbox();\n            var length = facNumberSelectedCheck.length;\n            if (length !== 2) {\n                $("#genericErrorModal .errorPanel").empty();\n                $("#genericErrorModal .errorPanel").append("<p>" + appendErrorText1 + "</p><br>");\n                VIEW.showGenericErrorModal();\n                return;\n            }\n\n            if (testForSplit > 0) {\n                VIEW.showDisabledFunctionsAfterSplitModal();\n            } else {\n                var rotFacStateArray = QAV.getState("rotFacStateArray");\n                // todo - see if this can be deleted - already cloned with getState method?\n                var tempRotFacStateArray = _.cloneDeep(rotFacStateArray);\n                QAV.setState("tempRotFacStateArray", tempRotFacStateArray);\n\n                // pull the selected factors\' data\n                ROTA.setTwoFactorRotationalArray(rotFacStateArray);\n\n                // expects bare full array\n                var arrayWithCommunalities = ROTA.calculateCommunalities(rotFacStateArray);\n\n                // prep for D3 chart autoflagging tests\n                // var d3AutoflaggingPrep = d3Autoflagging(arrayWithCommunalities);\n\n                // gets array for fSig testing from LS of calculateCommunalities - sets fSigCriterionResults\n                ROTA.calculatefSigCriterionValues("flag");\n\n                // returns dataValuesArray for D3 chart\n                // creates arrays for table/D3 (LS) from state\n                var d3Prep = ROTA.doD3ChartDataPrep(arrayWithCommunalities);\n\n                $("#chartAndTableDisplayContainer").show();\n\n                ROTA.drawD3Chart(d3Prep);\n                // clone the state array to prevent changes\n                var chartData = _.cloneDeep(rotFacStateArray);\n                var prepTwoFactorTable = ROTA.prepTwoFactorUpdateHandsontable(chartData);\n\n                // set baseline data to calc "change due to factor rotation" (2 factor)\n                var baseLineData = _.cloneDeep(prepTwoFactorTable);\n                QAV.setState("baseLineData", baseLineData);\n\n                // creates 2 factor rotation display table data\n                var isNewSelection = true;\n                ROTA.updateDatatable1(prepTwoFactorTable, isNewSelection);\n\n                // reset degree display, button color and stored value\n                $("#handRotationDisplayContainer div").html("0&deg");\n                sessionStorage.setItem("rotationDegreeDisplayValue", 0);\n                var rotationDegreeDisplayValue = 0;\n                ROTA.saveRotationButtonColor(rotationDegreeDisplayValue);\n\n                //draw all factor rotation table for the first time\n                var isRotatedFactorsTableUpdate = "destroy";\n                LOAD.drawRotatedFactorsTable2(isRotatedFactorsTableUpdate, "noFlag"); // noFlag\n            }\n        });\n    })();\n\n\n    // clear DOM when user changes number factors kept for rotation\n    (function () {\n        $("#selectFactorsRotation").on("change", function () {\n\n            VIEW.clearSections_4_5_6();\n\n            $("#factorLoadingContainerDiv").hide();\n\n            // clear Project History except for first entry\n            $(\'#rotationHistoryList li:not(:first)\').remove();\n        });\n    })();\n\n    // get User input on number of factors to keep for rotation\n    (function () {\n        $("#sendToRotationButton").on("click", function () {\n            var language = QAV.getState("language");\n            var numFactors, data, loopLen, temp1, i, centroidFactors;\n\n            var appendErrorText1 = resources[language].translation["Rotate error 1"];\n            var appendErrorText2 = resources[language].translation["Rotate error 2"];\n\n\n            numFactors = parseInt($("#selectFactorsRotation option:selected").val());\n\n            QAV.setState("numFactorsRetained", numFactors);\n\n            // prvent user selection errors\n            temp1 = QAV.numFactorsExtracted || 0;\n            if (numFactors > temp1) {\n                $("#genericErrorModal .errorPanel").empty();\n                $("#genericErrorModal .errorPanel").append("<p>" + appendErrorText1 + "</p><br>");\n                VIEW.showGenericErrorModal();\n                return;\n                // $("#rotationLargeNumberError").show();\n            } else if (isNaN(numFactors)) {\n                $("#genericErrorModal .errorPanel").empty();\n                $("#genericErrorModal .errorPanel").append("<p>" + appendErrorText2 + "</p><br>");\n                VIEW.showGenericErrorModal();\n                return;\n                // $("#rotationNanError").removeClass("hidden");\n            } else {\n                //  $("#rotationLargeNumberError").hide();\n                // $("#rotationNanError").addClass("hidden");\n                $("#factorLoadingContainerDiv").show();\n                $("#factorVarimaxButton").show();\n                $("#factorJudgementRotButton").show();\n\n                var language = QAV.getState("language");\n                var facText = resources[language].translation["Factors Kept"];\n                var appendText = resources[language].translation["Factors Kept for Rotation"];\n\n                var button = $(this);\n                button.removeClass("blackHover");\n                button.addClass("buttonActionComplete");\n                button.prop(\'value\', (numFactors + \' \' + facText));\n                button.prop(\'disabled\', true);\n\n\n                // get the right data according to factor type\n                if (QAV.typeOfFactor === "PCA") {\n                    data = QAV.getState("eigenVecs");\n                    loopLen = data.length;\n\n                    // get just the factors selected from data\n                    for (i = 0; i < loopLen; i++) {\n                        data[i] = data[i].slice(0, numFactors);\n                    }\n                } else {\n                    data = QAV.getState("centroidFactors");\n                    loopLen = data.length;\n\n                    // get just the factors selected from data\n                    for (i = 0; i < loopLen; i++) {\n                        data[i] = data[i].slice(0, numFactors);\n                    }\n                }\n\n                // send data to state matrix and then to chart\n                QAV.setState("rotFacStateArray", data);\n\n                // prep for chart\n                ROTA.calculateCommunalities(data);\n\n                $("#rotationHistoryList").append(\'<li>\' + numFactors + appendText + \'</li>\');\n\n                // gets array for fSig testing from LS of calculateCommunalities - sets fSigCriterionResults\n                ROTA.calculatefSigCriterionValues("noFlag");\n\n                QAV.setState("tempRotFacStateArray", data);\n\n                //draw rotation table for the first time\n                var isRotatedFactorsTableUpdate = "no";\n                LOAD.drawRotatedFactorsTable2(isRotatedFactorsTableUpdate, "noFlag");\n\n                // archive rotation matrix state and factor rotation table\n                ROTA.saveRotationArchiveCounter("reset");\n                UTIL.archiveFactorScoreStateMatrixAndDatatable();\n\n                // format for use with varimax\n                centroidFactors = _.zip.apply(_, data);\n\n                // todo - convert to send to state matrix\n                QAV.setState("centroidFactors", centroidFactors);\n\n                $("#selectFactorsForOutputButton").show();\n            }\n        });\n    })();\n\n    // display rotation chart options in DOM\n    (function () {\n        $("#factorJudgementRotButton").on("click", function () {\n            var testForSplit = QAV.getState("hasSplitFactor");\n            if (testForSplit > 0) {\n                VIEW.showDisabledFunctionsAfterSplitModal();\n            } else {\n                QAV.setState("typeOfRotation", "judgemental");\n                var language = QAV.getState("language");\n                var judgeText = resources[language].translation["Judgemental rotation"];\n                var button = $(this);\n                button.removeClass("blackHover");\n                button.addClass("buttonActionComplete");\n                button.prop(\'value\', judgeText);\n                button.prop(\'disabled\', true);\n\n                // get number of checkboxes from UI and append to DOM\n                UTIL.addFactorSelectCheckboxesRotation(QAV.numFactorsRetained);\n                $("#judgementalRotationContainer").show();\n            }\n        });\n\n    })();\n\n    // call varimax\n    (function () {\n        $("#factorVarimaxButton").on("click", function () {\n            var testForSplit = QAV.getState("hasSplitFactor");\n            if (testForSplit > 0) {\n                VIEW.showDisabledFunctionsAfterSplitModal();\n            } else {\n                QAV.setState("typeOfRotation", "varimax");\n                var language = QAV.getState("language");\n                var varmaxRotButText = resources[language].translation["Varimax rotation applied"];\n                var button = $(this);\n                button.removeClass("blackHover");\n                button.addClass("buttonActionComplete");\n                button.prop(\'value\', varmaxRotButText);\n                button.prop(\'disabled\', true);\n\n                // avoid problem with reinitialization and display of 2 factor table\n                var tableCheck = $("#judgementalRotationContainer").is(":visible");\n                if (tableCheck) {\n                    ROTA.reInitializePlotAndChart();\n                }\n                VARIMAX.fireVarimaxRotation();\n            }\n        });\n    })();\n\n    (function () {\n        // scree plot image download\n        $(".screePlotDownloadButton").on("click", function () {\n            var date = UTIL.currentDate1();\n            var time = UTIL.currentTime1();\n            var dateTime = date + "_" + time;\n            var projectName = QAV.getState("qavProjectName");\n            var language = QAV.getState("language");\n            var screePlotTranslation = resources[language].translation["Scree Plot"];\n\n            var config = {\n                filename: projectName + "_" + screePlotTranslation + "_" + dateTime,\n            };\n            d3_save_svg.save(d3.select(\'#screePlotSVG\').node(), config);\n        });\n    })();\n\n    (function () {\n        // scree plot image download\n        $(".screePlotDownloadPngButton").on("click", function () {\n            console.log("clicked");\n            var date = UTIL.currentDate1();\n            var time = UTIL.currentTime1();\n            var dateTime = date + "_" + time;\n            var projectName = QAV.getState("qavProjectName");\n            var language = QAV.getState("language");\n            var screePlotTranslation = resources[language].translation["Scree Plot"];\n            var filename = projectName + "_" + screePlotTranslation + "_" + dateTime;\n            var svgString = UTIL.getSVGString(d3.select(\'#screePlotSVG\')\n                .node());\n            var svgCharacteristics = d3.select(\'#screePlotSVG\');\n            UTIL.downloadPngImages(svgString, svgCharacteristics, filename); // passes Blob and filesize \n        });\n    })();\n\n    (function () {\n        // download judgemental rotation chart\n        $(".rotationChartDownloadButton").on("click", function () {\n            var date = UTIL.currentDate1();\n            var time = UTIL.currentTime1();\n            var dateTime = date + "_" + time;\n            var projectName = QAV.getState("qavProjectName");\n            var language = QAV.getState("language");\n            var scatterPlotTranslation = resources[language].translation["Download Rotation Chart"];\n\n            var config = {\n                filename: projectName + "_" + scatterPlotTranslation + "_" + dateTime,\n            };\n            d3_save_svg.save(d3.select(\'#scatterChart\').node(), config);\n        });\n    })();\n\n    (function () {\n        // download judgemental rotation chart\n        $(".rotationChartDownloadPngButton").on("click", function () {\n            console.log("png rot chart clicked");\n            var date = UTIL.currentDate1();\n            var time = UTIL.currentTime1();\n            var dateTime = date + "_" + time;\n            var projectName = QAV.getState("qavProjectName");\n            var language = QAV.getState("language");\n            var scatterPlotTranslation = resources[language].translation["Download Rotation Chart"];\n            var filename = projectName + "_" + scatterPlotTranslation + "_" + dateTime;\n            var svgString = UTIL.getSVGString(d3.select(\'#scatterChart\')\n                .node());\n            var svgCharacteristics = d3.select(\'#scatterChart\');\n            UTIL.downloadPngImages(svgString, svgCharacteristics, filename); // passes Blob and filesize \n        });\n    })();\n\n\n\n    // set judgemental rotation chart options\n    (function () {\n        $(".rotationChartOptionsButton").on("mousedown", function (e) {\n            e.preventDefault();\n            VIEW.showRotationChartOptionsModal();\n        });\n    })();\n\n    (function () {\n        $("#rotationChartOptionsModal").on(\'change\', \'input[type=color]\', function () {\n            var rotChartConfig = QAV.getState("rotChartConfig") || {};\n            var hexCode2 = $(this).val();\n            rotChartConfig[$(this).attr(\'name\')] = hexCode2;\n            QAV.setState("rotChartConfig", rotChartConfig);\n        });\n    })();\n\n    // control rotation chart options\n    (function () {\n        $("#rotationChartOptionsModal").on(\'click\', \'.applyChanges\', function () {\n            var rotChartConfig = QAV.getState("rotChartConfig") || {};\n            rotChartConfig.significanceColorA = rotChartConfig.significanceColorAPrep;\n            rotChartConfig.significanceColorB = rotChartConfig.significanceColorBPrep;\n            QAV.setState("rotChartConfig", rotChartConfig);\n\n            $("#twoFactorDisplayTableDiv").remove();\n\n            $("#chartAndTableContainerDiv").append($(\'<div/>\').attr("id", "twoFactorDisplayTableDiv"));\n            $("#twoFactorDisplayTableDiv").append($(\'<table/>\').attr("id", "twoFactorDisplayTable").addClass("display compact nowrap cell-border").attr("width", "100%"));\n\n            $("#generateRotationItemsButton").click();\n\n            $("#rotationChartOptionsModal").iziModal(\'close\');\n        });\n    })();\n\n    // close modal box\n    (function () {\n        $("#rotationChartOptionsModal").on(\'click\', \'.button-cancel\', function () {\n            $("#rotationChartOptionsModal").iziModal(\'close\');\n        });\n    })();\n\n    // remove circle highlighting? - event handler\n    (function () {\n        $("#rotationChartOptionsModal").on(\'click\', \'#removeCircleHighlightDiv :radio\', function () {\n            var rotChartConfig = QAV.getState("rotChartConfig") || {};\n            $(\'#rotationChartOptionsModal, #removeCircleHighlightDiv .radioHighlight2\').removeClass("selected");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "Yes") {\n                $(this).parent().addClass("selected");\n                $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("selected");\n                rotChartConfig.removeCircleHighlight = true;\n            } else if ($radioOption === "No") {\n                rotChartConfig.removeCircleHighlight = false;\n            }\n            QAV.setState("rotChartConfig", rotChartConfig);\n        });\n    })();\n\n    // remove circles? - event handler\n    (function () {\n        $("#rotationChartOptionsModal").on(\'click\', \'#removeCirclesDiv :radio\', function () {\n            var rotChartConfig = QAV.getState("rotChartConfig") || {};\n            $(\'#rotationChartOptionsModal, #removeCirclesDiv .radioHighlight2\').removeClass("selected");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "Yes") {\n                $(this).parent().addClass("selected");\n                $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("selected");\n                rotChartConfig.removeCircles = true;\n            } else if ($radioOption === "No") {\n                rotChartConfig.removeCircles = false;\n            }\n            QAV.setState("rotChartConfig", rotChartConfig);\n        });\n    })();\n\n    // use id number or respondent name? - event handler\n    (function () {\n        $("#rotationChartOptionsModal").on(\'click\', \'#chartIdentifierDiv :radio\', function () {\n            var rotChartConfig = QAV.getState("rotChartConfig") || {};\n            $(\'#rotationChartOptionsModal, #chartIdentifierDiv .radioHighlight2\').removeClass("selected");\n            var $radioOption = ($(this).val());\n            $(this).parent().addClass("selected");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("selected");\n            if ($radioOption === "Yes") {\n                rotChartConfig.identifierNumber = true;\n            } else if ($radioOption === "No") {\n                rotChartConfig.identifierNumber = false;\n            }\n            QAV.setState("rotChartConfig", rotChartConfig);\n        });\n    })();\n\n    // change font size? - event handler\n    (function () {\n        $("#rotationChartOptionsModal").on(\'click\', \'#changeFontSizeDiv :radio\', function () {\n            var rotChartConfig = QAV.getState("rotChartConfig") || {};\n            $(\'#changeFontSizeDiv :radio, #changeFontSizeDiv .radioHighlight2\').removeClass("selected");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "Yes") {\n                $(this).parent().addClass("selected");\n                $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("selected");\n                rotChartConfig.changeFontSize = true;\n            } else if ($radioOption === "No") {\n                rotChartConfig.changeFontSize = false;\n            }\n            QAV.setState("rotChartConfig", rotChartConfig);\n        });\n    })();\n\n    // chart font size adjustment input box\n    (function () {\n        $("#rotationChartOptionsModal").on(\'input\', \'#chartFontSizeInputBox\', function () {\n            var rotChartConfig = QAV.getState("rotChartConfig") || {};\n            var customFontSize = $(\'#chartFontSizeInputBox\').val();\n            rotChartConfig.customFontSize = customFontSize;\n            QAV.setState("rotChartConfig", rotChartConfig);\n        });\n    })();\n\n    /*\n    //\n    // **** SECTION 5 ****  (factor loadings)\n    //\n    */\n    (function () {\n        $("#autoflagButton").on("click", function (e) {\n            e.preventDefault();\n            var testForSplit = QAV.getState("hasSplitFactor");\n            if (testForSplit > 0) {\n                VIEW.showDisabledFunctionsAfterSplitModal();\n            } else {\n                // get copy of current rotations state matrix\n                var rotFacStateArray = QAV.getState("rotFacStateArray");\n                // prep for chart\n                ROTA.calculateCommunalities(rotFacStateArray);\n                /* gets array for fSig testing from LS of calculateCommunalities - sets fSigCriterionResults  --- also "flag" parameter causes display of sig factor loadings in current facor loadings table  */\n                ROTA.calculatefSigCriterionValues("flag");\n                // re-draw rotation table without destroy\n                var isRotatedFactorsTableUpdate = "destroy";\n                LOAD.drawRotatedFactorsTable2(isRotatedFactorsTableUpdate, "flag");\n            }\n        });\n    })();\n\n\n    // SPLIT BIPOLAR FACTOR BUTTON\n    (function () {\n        $("#splitFactorButton").on("click", function (e) {\n            e.preventDefault();\n            VIEW.showSplitBipolarFactorModal();\n        });\n    })();\n\n    // click handler for select factor loadings checkboxes\n    // todo - check to see if this is needed\n    (function () {\n        $(\'#factorRotationTable2 tbody\').on(\'click\', \'tr\', function () {\n            var table = $(\'#factorRotationTable2\').DataTable(); //\n            table\n                .rows()\n                .data();\n        });\n    })();\n\n    // control factor loadings table background highlight\n    (function () {\n        $("#loadingsRadioSelect2 :radio").on(\'click\', function () {\n\n            // disable if table has split factor\n            var testForSplit = QAV.getState("hasSplitFactor");\n            if (testForSplit > 0) {\n                VIEW.showDisabledFunctionsAfterSplitModal();\n            } else {\n                $("#loadingsRadioSelect2 .radioHighlight2").removeClass("selected");\n                // $(this).parent().addClass("selected");\n                $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("selected");\n                // todo - find out how to prevent need for table destroy\n\n                // keep flags - get current table data including flags and redrawn\n                var table = $(\'#factorRotationTable2\').DataTable();\n                var chartData = table.rows().data();\n                QAV.colorButtonChartData = chartData;\n\n                var isRotatedFactorsTableUpdate = "highlighter";\n                var shouldFlag = "flag";\n                LOAD.drawRotatedFactorsTable2(isRotatedFactorsTableUpdate, shouldFlag);\n            }\n        });\n    })();\n\n    // reorder table by respondent id or highest loading factor\n    (function () {\n        $("#loadingsRadioSelect1 :radio").on(\'click\', function () {\n            // $(\'#loadingsRadioSelect1 input:not(:checked)\').parent().removeClass("selected");\n            $(\'#loadingsRadioSelect1 .radioHighlight1\').removeClass("selected");\n            // $(this).parent().addClass("selected");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("selected");\n            var $radioOption = +($(this).val());\n            var table = $(\'#factorRotationTable2\').DataTable();\n\n            if ($radioOption === 0) {\n                table.order([0, \'asc\']).draw();\n            } else if ($radioOption === 2) {\n                table.order([2, \'asc\']).draw();\n            }\n        });\n    })();\n\n    // remove items from Project history list and undo rotation\n    (function () {\n        $("#rotationHistoryList").on("click", "button", function (e) {\n            e.preventDefault();\n            var $this = $(this);\n            if ($this.hasClass("deleteButton") && $this.hasClass("varimaxCalled")) {\n                $("#factorVarimaxButton").removeClass("buttonActionComplete").addClass("blackHover").prop(\'value\', \'Apply Varimax Rotation\').prop(\'disabled\', false);\n                LOAD.undoFactorRotation();\n                $this.parent().remove();\n            } else if ($this.hasClass("deleteSplitFactorButton")) {\n                LOAD.undoSplitFactorRotation();\n                $this.parent().remove();\n            } else if ($this.hasClass("deleteButton")) {\n                LOAD.undoFactorRotation();\n                $this.parent().remove();\n            }\n        });\n    })();\n\n    // INVERT FACTOR BUTTON\n    (function () {\n        $("#invertFactorButton").on("click", function (e) {\n            e.preventDefault();\n            var rotationHistory = $("#rotationHistoryList li").text();\n            if (rotationHistory.indexOf(\'was split into\') >= 0) {\n                VIEW.showDisabledFunctionsAfterSplitModal();\n            } else {\n                VIEW.showInvertModal();\n            }\n        });\n    })();\n\n    /*\n    //\n    // **** SECTION 6 **** output\n    //\n    */\n\n    // page setup actions for page reload\n    (function () {\n        // hide download button until after preliminary results are displayed\n        $("#downloadResultsButton").hide();\n        $("#downloadCsvResultsButton").hide();\n        $("#displayQuickResultsButton").hide();\n        $("#factorVizOptionsDiv").hide();\n\n        // tracker for results download / display buttons\n        QAV.setState("outputComplete", "false");\n    })();\n\n    //  change the value of checkboxes on factor rotation table when clicked\n    (function () {\n        $(\'#factorRotationTable2\').on(\'click\', \'td\', function () {\n            var myTable = $(\'#factorRotationTable2\').DataTable();\n            if (myTable.cell($(this)).data() === \'false\') {\n                myTable.cell($(this)).data(\'true\');\n            } else if (myTable.cell($(this)).data() === \'true\') {\n                myTable.cell($(this)).data(\'false\');\n            }\n        });\n    })();\n\n    // display quick results button event listener\n    (function () {\n        $(\'#displayQuickResultsButton\').on(\'click\', function () {\n            // pull the state data (selected factor loadings - checkboxes) from table\n            var results = [];\n            var loopLen1 = QAV.getState("qavRespondentNames").length;\n            var data = $(\'#factorRotationTable2\').DataTable();\n            for (var i = 0; i < loopLen1; i++) {\n                var data2 = data.row(i).data();\n                results.push(data2);\n            }\n            QAV.setState("results", results);\n\n            // get selected factors information\n            PRELIMOUT.getFactorsForAnalysis();\n\n            // begins preliminary results display function cascade\n            var canOutput = PRELIMOUT.pullFlaggedFactorLoadings();\n\n            if (canOutput !== "false") {\n                OUTPUT.generateOutput();\n                VIEW.clearPreviousTables();\n                // CORR.drawRawSortsRadviz();\n                PRELIMOUT.showPreliminaryOutput1();\n                $("#downloadResultsButton").show();\n                $("#downloadCsvResultsButton").show();\n                $("#clearStorageButton").show();\n            }\n        });\n    })();\n\n    // start the output calculations and file write functions cascade\n    (function () {\n        $("#downloadResultsButton").on("click", function () {\n            // OUTPUT.downloadOutput();\n            OUTPUT.downloadExcelOutputFile();\n        });\n    })();\n\n    (function () {\n        $("#downloadCsvResultsButton").on("click", function () {\n            // OUTPUT.downloadOutput();\n            OUTPUT.downloadCsvOutputFile();\n        });\n    })();\n\n    (function () {\n        $("#selectFactorsForOutputButton").on("click", function () {\n            PRELIMOUT.appendFactorSelectionCheckboxes();\n            $("#displayQuickResultsButton").show();\n            $("#factorVizOptionsDiv").show();\n        });\n    })();\n\n    (function () {\n        $("#clearStorageButton").on("click", function () {\n            VIEW.showDeleteKenqData();\n        });\n    })();\n\n    (function () {\n        $(\'#deleteLocalDataModal\').on("click", \'#deleteLocalDataConfirmButton\', function () {\n            localStorage.clear();\n            sessionStorage.clear();\n            VIEW.showlocalDataDeleteSuccessModal();\n        });\n    })();\n\n\n    (function () {\n        $(\'#deleteLocalDataModal\').on("click", \'.button-cancel\', function () {\n            $(\'#deleteLocalDataModal\').iziModal(\'close\');\n        });\n    })();\n    /*\n     **\n     **    Visualizations Panel event listeners\n     **\n     */\n    // should include legend? - event handler\n    (function () {\n        $("#includeLegendDiv :radio").on(\'click\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            $(\'#includeLegendDiv .radioHighlight2\').removeClass("active");\n            $(this).parent().addClass("active");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("active");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "Yes") {\n                vizConfig.shouldHaveLegend = true;\n            } else if ($radioOption === "No") {\n                vizConfig.shouldHaveLegend = false;\n            }\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    // should prepend statement numbers? - event handler\n    (function () {\n        $("#prependStateNoDiv :radio").on(\'click\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            $(\'#prependStateNoDiv .radioHighlight2\').removeClass("active");\n            $(this).parent().addClass("active");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("active");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "Yes") {\n                vizConfig.shouldPrependStateNo = true;\n            } else if ($radioOption === "No") {\n                vizConfig.shouldPrependStateNo = false;\n            }\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    // should show only statement numbers? - event handler\n    (function () {\n        $("#showOnlyStateNoDiv :radio").on(\'click\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            $(\'#showOnlyStateNoDiv .radioHighlight2\').removeClass("active");\n            $(this).parent().addClass("active");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("active");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "Yes") {\n                vizConfig.shouldShowOnlyStateNo = true;\n            } else if ($radioOption === "No") {\n                vizConfig.shouldShowOnlyStateNo = false;\n            }\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    // should show custom factor names? - event handler\n    (function () {\n        $("#addCustomFactorNameDiv :radio").on(\'click\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            $(\'#addCustomFactorNameDiv .radioHighlight2\').removeClass("active");\n            $(this).parent().addClass("active");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("active");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "Yes") {\n                vizConfig.addCustomFactorName = true;\n            } else if ($radioOption === "No") {\n                vizConfig.addCustomFactorName = false;\n            }\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    // grab custom factor names from input\n    (function () {\n        $(\'#customFactorNameInputBox\').on(\'input\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            var customFactorNames = $(\'#customFactorNameInputBox\').val();\n            vizConfig.customFactorNames = customFactorNames.split(",");\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    // should set Card Height? - event handler\n    (function () {\n        $("#setCardHeightDiv :radio").on(\'click\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            $(\'#setCardHeightDiv .radioHighlight2\').removeClass("active");\n            $(this).parent().addClass("active");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("active");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "Yes") {\n                vizConfig.shouldSetCardHeight = true;\n            } else if ($radioOption === "No") {\n                vizConfig.shouldSetCardHeight = false;\n            }\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    // should set card width? - event handler\n    (function () {\n        $("#setCardWidthDiv :radio").on(\'click\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            $(\'#setCardWidthDiv .radioHighlight2\').removeClass("active");\n            $(this).parent().addClass("active");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("active");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "Yes") {\n                vizConfig.shouldSetCardWidth = true;\n            } else if ($radioOption === "No") {\n                vizConfig.shouldSetCardWidth = false;\n            }\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    // should set font size? - event handler\n    (function () {\n        $("#setFontSizeDiv :radio").on(\'click\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            $(\'#setFontSizeDiv .radioHighlight2\').removeClass("active");\n            $(this).parent().addClass("active");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("active");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "Yes") {\n                vizConfig.shouldSetFontSize = true;\n            } else if ($radioOption === "No") {\n                vizConfig.shouldSetFontSize = false;\n            }\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    // should set font size? - event handler\n    (function () {\n        $("#setStatementWidthDiv :radio").on(\'click\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            $(\'#setStatementWidthDiv .radioHighlight2\').removeClass("active");\n            $(this).parent().addClass("active");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("active");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "Yes") {\n                vizConfig.shouldSetStatementWidth = true;\n            } else if ($radioOption === "No") {\n                vizConfig.shouldSetStatementWidth = false;\n            }\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    // should set line spacing? - event handler\n    (function () {\n        $("#adjustLineSpacingDiv :radio").on(\'click\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            $(\'#adjustLineSpacingDiv .radioHighlight2\').removeClass("active");\n            $(this).parent().addClass("active");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("active");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "Yes") {\n                vizConfig.shouldSetLineSpacing = true;\n            } else if ($radioOption === "No") {\n                vizConfig.shouldSetLineSpacing = false;\n            }\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    // should trim statements? - event handler  trimStatementsDiv\n    (function () {\n        $("#trimStatementsDiv :radio").on(\'click\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            $(\'#trimStatementsDiv .radioHighlight2\').removeClass("active");\n            $(this).parent().addClass("active");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("active");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "Yes") {\n                vizConfig.shouldTrimStatements = true;\n            } else if ($radioOption === "No") {\n                vizConfig.shouldTrimStatements = false;\n            }\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    // Asian Language set width? - event handler  trimStatementsDiv\n    (function () {\n        $("#setAsianStatementsLengthDiv :radio").on(\'click\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            $(\'#setAsianStatementsLengthDiv .radioHighlight2\').removeClass("active");\n            $(this).parent().addClass("active");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("active");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "Yes") {\n                vizConfig.shouldSetWidthForAsian = true;\n                vizConfig.asianStatmentLength = 12;\n            } else if ($radioOption === "No") {\n                vizConfig.shouldSetWidthForAsian = false;\n            }\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    // indicate significance? - event handler\n    (function () {\n        $("#showSignificanceSymbolsDiv :radio").on(\'click\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            $(\'#showSignificanceSymbolsDiv .radioHighlight2\').removeClass("active");\n            $(this).parent().addClass("active");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("active");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "Yes") {\n                vizConfig.shouldIndicateDistinguishing = true;\n                $(\'#useUnicodeYes\').trigger("click");\n                vizConfig.shouldUseUnicode = true;\n            } else if ($radioOption === "No") {\n                vizConfig.shouldIndicateDistinguishing = false;\n                $(\'#useUnicodeSymbolsDiv .radioHighlight2\').removeClass("selected");\n                $(\'#zscoreArrowDirectionDiv .radioHighlight2\').removeClass("active");\n                $(\'#setSymbolFontSizeDiv .radioHighlight2\').removeClass("active");\n            }\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    // should use Unicode symbols? - event handler  #useUnicodeSymbolsDiv\n    (function () {\n        $("#useUnicodeSymbolsDiv :radio").on(\'click\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            $(\'#useUnicodeSymbolsDiv .radioHighlight2\').removeClass("selected");\n            $(this).parent().addClass("selected");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("selected");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "unicode") {\n                vizConfig.shouldUseUnicode = true;\n            } else if ($radioOption === "ascii") {\n                vizConfig.shouldUseUnicode = false;\n            }\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    // should use Unicode symbols? - event handler  #useUnicodeSymbolsDiv\n    (function () {\n        $("#setSymbolFontSizeDiv :radio").on(\'click\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            $(\'#setSymbolFontSizeDiv .radioHighlight2\').removeClass("active");\n            $(this).parent().addClass("active");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("active");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "Yes") {\n                vizConfig.shouldSetSymbolFontSize = true;\n            } else if ($radioOption === "No") {\n                vizConfig.shouldSetSymbolFontSize = false;\n            }\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    // should show zscore factor comparison arrows? - event handler\n    (function () {\n        $("#zscoreArrowDirectionDiv :radio").on(\'click\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            $(\'#zscoreArrowDirectionDiv .radioHighlight2\').removeClass("active");\n            $(this).parent().addClass("active");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("active");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "Yes") {\n                vizConfig.shouldShowZscoreArrows = true;\n            } else if ($radioOption === "No") {\n                vizConfig.shouldShowZscoreArrows = false;\n            }\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    // should show zscore factor comparison arrows? - event handler\n    (function () {\n        $("#displayConsensusStatementsDiv :radio").on(\'click\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            $(\'#displayConsensusStatementsDiv .radioHighlight2\').removeClass("active");\n            $(this).parent().addClass("active");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("active");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "Yes") {\n                vizConfig.shouldIndicateConsensus = true;\n                $(\'#setConsensusSymbolNo\').trigger("click");\n                vizConfig.shouldUseToIndicateConsensus = "stripe";\n            } else if ($radioOption === "No") {\n                vizConfig.shouldIndicateConsensus = false;\n                $(\'#setConsensusSymbolDiv .radioHighlight2\').removeClass("selected");\n            }\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    // should color vs stripe for consensus? - event handler\n    (function () {\n        $("#setConsensusSymbolDiv :radio").on(\'click\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            $(\'#setConsensusSymbolDiv .radioHighlight2\').removeClass("selected");\n            $(this).parent().addClass("selected");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("selected");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "COLOR") {\n                vizConfig.shouldUseToIndicateConsensus = "color";\n            } else if ($radioOption === "STRIPE") {\n                vizConfig.shouldUseToIndicateConsensus = "stripe";\n            }\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    // should show matching counts? - event handler\n    (function () {\n        $("#useMatchCountDiv :radio").on(\'click\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            $(\'#useMatchCountDiv .radioHighlight2\').removeClass("active");\n            $(this).parent().addClass("active");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("active");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "Yes") {\n                vizConfig.shouldShowMatchCounts = true;\n            } else if ($radioOption === "No") {\n                vizConfig.shouldShowMatchCounts = false;\n            }\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    // should show background color? - event handler\n    (function () {\n        $("#indicateMatchCountAsBackgroundDiv :radio").on(\'click\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            $(\'#indicateMatchCountAsBackgroundDiv .radioHighlight2\').removeClass("active");\n            $(this).parent().addClass("active");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("active");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "Yes") {\n                vizConfig.shouldShowBackgroundColor = true;\n                $(\'#setMatchCountCautionIndicatorNo\').trigger("click");\n                vizConfig.shouldUseToIndicateMatchCaution = "stripe";\n                $(\'#setMatchConsensusOverlapIndicatorNo\').trigger("click");\n                vizConfig.shouldUseToIndicateOverlap = "crosshatch";\n            } else if ($radioOption === "No") {\n                vizConfig.shouldShowBackgroundColor = false;\n                $(\'#setMatchCountCautionIndicatorDiv .radioHighlight2\').removeClass("selected");\n                $(\'#setMatchConsensusOverlapIndicatorDiv .radioHighlight2\').removeClass("selected");\n            }\n            vizConfig.backgroundColorCutoff = 0;\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    // should color vs stripe for consensus? - event handler\n    (function () {\n        $("#setMatchCountCautionIndicatorDiv :radio").on(\'click\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            $(\'#setMatchCountCautionIndicatorDiv .radioHighlight2\').removeClass("selected");\n            $(this).parent().addClass("selected");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("selected");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "COLOR") {\n                vizConfig.shouldUseToIndicateMatchCaution = "color";\n            } else if ($radioOption === "STRIPE") {\n                vizConfig.shouldUseToIndicateMatchCaution = "stripe";\n            }\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    // should color vs stripe for consensus? - event handler\n    (function () {\n        $("#setMatchConsensusOverlapIndicatorDiv :radio").on(\'click\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            $(\'#setMatchConsensusOverlapIndicatorDiv .radioHighlight2\').removeClass("selected");\n            $(this).parent().addClass("selected");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("selected");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "COLOR") {\n                vizConfig.shouldUseToIndicateOverlap = "color";\n            } else if ($radioOption === "CROSSHATCH") {\n                vizConfig.shouldUseToIndicateOverlap = "crosshatch";\n            }\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    // should add custom name? - event handler\n    (function () {\n        $("#addCustomNameDiv :radio").on(\'click\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            $(\'#addCustomNameDiv .radioHighlight2\').removeClass("active");\n            $(this).parent().addClass("active");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("active");\n            var $radioOption = ($(this).val());\n            if ($radioOption === "Yes") {\n                vizConfig.shouldAddCustomName = true;\n            } else if ($radioOption === "No") {\n                vizConfig.shouldAddCustomName = false;\n            }\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    (function () {\n        $("#customNameLocationDiv :radio").on(\'click\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            $(\'#customNameLocationDiv .radioHighlight2\').removeClass("selected");\n            $(this).parent().addClass("selected");\n            $("label[for=\'" + $(this).attr(\'id\') + "\']").addClass("selected");\n            var $radioOption = ($(this).val());\n            vizConfig.customNameLocation = $radioOption;\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    (function () {\n        $("#showDisplayPanelButton").on(\'click\', function () {\n            var language = QAV.getState("language");\n            var hide = resources[language].translation.HIDE;\n            var view = resources[language].translation.VIEW;\n            $(this).val(function (i, value) {\n                return value === hide ? view : hide;\n            });\n            $("#vizPanelHideContainer").toggle();\n        });\n    })();\n\n\n    (function () {\n        $("#updateDisplayButton").on(\'click\', function () {\n            VIEW.clearPreviousTables();\n            PRELIMOUT.showPreliminaryOutput1();\n        });\n    })();\n    //\n    // Visualization Control Panel On-change event listeners\n    //\n\n    // capture card height input in Viz panel   #cardHeightInputBox\n    (function () {\n        $(\'#cardHeightInputBox\').on(\'input\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            var cardHeight = $(\'#cardHeightInputBox\').val();\n            UTIL.checkIfValueIsNumber(cardHeight, "cardHeightInputBox");\n            if (cardHeight > 500) {\n                cardHeight = 500;\n            } else if (cardHeight < 5) {\n                cardHeight = 5;\n            }\n            vizConfig.cardHeight = cardHeight;\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    (function () {\n        $(\'#cardWidthInputBox\').on(\'input\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            var cardWidth = $(\'#cardWidthInputBox\').val();\n            UTIL.checkIfValueIsNumber(cardWidth, "cardWidthInputBox");\n            if (cardWidth > 500) {\n                cardWidth = 500;\n            } else if (cardWidth < 5) {\n                cardWidth = 5;\n            }\n            vizConfig.cardWidth = cardWidth;\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    (function () {\n        $(\'#fontSizeInputBox\').on(\'input\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            var fontSize = $(\'#fontSizeInputBox\').val();\n            UTIL.checkIfValueIsNumber(fontSize, "fontSizeInputBox");\n            if (fontSize > 180) {\n                fontSize = 180;\n            } else if (fontSize < 4) {\n                fontSize = 4;\n            }\n            vizConfig.fontSize = fontSize;\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    (function () {\n        $(\'#statementWidthInputBox\').on(\'input\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            var statementWidth = $(\'#statementWidthInputBox\').val();\n            UTIL.checkIfValueIsNumber(statementWidth, "statementWidthInputBox");\n            if (statementWidth > 180) {\n                statementWidth = 180;\n            } else if (statementWidth < -180) {\n                statementWidth = -180;\n            }\n            vizConfig.statementWidth = statementWidth;\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    (function () {\n        $(\'#lineSpacingInputBox\').on(\'input\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            var lineSpacing = $(\'#lineSpacingInputBox\').val();\n            UTIL.checkIfValueIsNumber(lineSpacing, "lineSpacingInputBox");\n            if (lineSpacing > 500) {\n                lineSpacing = 500;\n            } else if (lineSpacing < 4) {\n                lineSpacing = 4;\n            }\n            vizConfig.lineSpacing = lineSpacing;\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    (function () {\n        $(\'#trimStatementsInputBox\').on(\'input\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            var trimStatementSize = $(\'#trimStatementsInputBox\').val();\n            UTIL.checkIfValueIsNumber(trimStatementSize, "trimStatementsInputBox");\n            if (trimStatementSize > 3000) {\n                trimStatementSize = 3000;\n            } else if (trimStatementSize < 1) {\n                trimStatementSize = 1;\n            }\n            vizConfig.trimStatementSize = trimStatementSize;\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    (function () {\n        $(\'#setAsianLengthInputBox\').on(\'input\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            var asianStatmentLength = $(\'#setAsianLengthInputBox\').val();\n            UTIL.checkIfValueIsNumber(asianStatmentLength, "setAsianLengthInputBox");\n            if (asianStatmentLength > 300) {\n                asianStatmentLength = 300;\n            } else if (asianStatmentLength < 2) {\n                asianStatmentLength = 2;\n            }\n            vizConfig.asianStatmentLength = asianStatmentLength;\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    (function () {\n        $(\'#symbolFontSizeInputBox\').on(\'input\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            var sigSymbolFontSize = $(\'#symbolFontSizeInputBox\').val();\n            UTIL.checkIfValueIsNumber(sigSymbolFontSize, "symbolFontSizeInputBox");\n            if (sigSymbolFontSize > 80) {\n                sigSymbolFontSize = 80;\n            } else if (sigSymbolFontSize < 2) {\n                sigSymbolFontSize = 2;\n            }\n            vizConfig.sigSymbolFontSize = sigSymbolFontSize;\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    (function () {\n        $("#vizPanelHideContainer").on(\'change\', \'input[type=color]\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            var hexCode2 = $(this).val();\n            vizConfig[$(this).attr(\'name\')] = hexCode2;\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    (function () {\n        $(\'#backgroundColorCutoffInputBox\').on(\'input\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            var backgroundColorCutoff = $(\'#backgroundColorCutoffInputBox\').val();\n            UTIL.checkIfValueIsNumber(backgroundColorCutoff, "backgroundColorCutoffInputBox");\n            if (backgroundColorCutoff >= 100) {\n                backgroundColorCutoff = 99;\n            }\n            vizConfig.backgroundColorCutoff = backgroundColorCutoff;\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n    (function () {\n        $(\'#customNameInputBox\').on(\'input\', function () {\n            var vizConfig = QAV.getState("vizConfig") || {};\n            var customName = $(\'#customNameInputBox\').val();\n            console.log(customName);\n            vizConfig.customName = customName;\n            QAV.setState("vizConfig", vizConfig);\n        });\n    })();\n\n\n}(window.CONTROLERS = window.CONTROLERS || {}, QAV));//# sourceMappingURL=data:application/json;charset=utf-8;base64,')}]);