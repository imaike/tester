!function(I){function g(A){if(C[A])return C[A].exports;var n=C[A]={i:A,l:!1,exports:{}};return I[A].call(n.exports,n,n.exports,g),n.l=!0,n.exports}var C={};g.m=I,g.c=C,g.i=function(I){return I},g.d=function(I,C,A){g.o(I,C)||Object.defineProperty(I,C,{configurable:!1,enumerable:!0,get:A})},g.n=function(I){var C=I&&I.__esModule?function(){return I.default}:function(){return I};return g.d(C,"a",C),C},g.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},g.p="",g(g.s=2)}({2:function(module,exports){eval('//Ken-Q Analysis\n//Copyright (C) 2016 Shawn Banasick\n//\n//    This program is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, either version 3 of the License, or\n//    (at your option) any later version.\n\n\n// JSlint declarations\n/* global window, $, _, setTimeout, evenRound, CENTROID, QAV, UTIL, performance*/\n\n// QAV is the global state data store\n(function (CORR, QAV, undefined) {\n    \'use strict\';\n\n    CORR.createCorrelationTable = function () {\n        var t1, t0 = performance.now();\n        var createCorrelationTable;\n\n        var namesFromExistingData2 = QAV.getState("qavRespondentNames");\n\n        // to prevent errors in zScores and datatable error when "." in name\n        var namesFromExistingData = UTIL.checkUniqueName(namesFromExistingData2);\n\n        QAV.setState("qavRespondentNames", namesFromExistingData);\n        QAV.setState("respondentNames", namesFromExistingData);\n        QAV.setState("qavTotalNumberSorts", namesFromExistingData.length);\n        QAV.setState("totalNumberSorts", namesFromExistingData.length);\n\n        // database data analysis\n        var originalSortSize2 = QAV.getState("qavOriginalSortSize");\n        var sortsFromExistingData = QAV.getState("qavRespondentSortsFromDbStored");\n\n        var isOnline = UTIL.checkIfOnline();\n\n        if (window.Worker && isOnline) {\n            $("#correlationSpinnerText").css(\'visibility\', \'visible\');\n            $("#correlationSpinnerDiv").addClass(\'calcSpinner\');\n            var myWorker = new Worker(\'wrkrs/workerCorr.js\');\n            var workerMessageArray = [originalSortSize2, sortsFromExistingData, namesFromExistingData];\n            myWorker.postMessage(workerMessageArray);\n            myWorker.onmessage = function (e) {\n                QAV.setState(\'sortsAsNumbers\', e.data[0]);\n                QAV.setState(\'positiveShiftedRawSorts\', e.data[1]);\n                QAV.setState(\'correlationTableArrayFormatted\', e.data[2]);\n                QAV.setState(\'respondentNames\', e.data[3]);\n                QAV.setState(\'originalCorrelationValues\', e.data[4]);\n\n                // remove spinner and message\n                $("#correlationSpinnerText").css(\'visibility\', \'hidden\');\n                $("#correlationSpinnerDiv").removeClass(\'calcSpinner\');\n\n                // draw the display table\n                createDisplayTableJQUERY(e.data[2], \'correlationTable\');\n\n                t1 = performance.now();\n                console.log(\'%c Correlation Table completed in \' + (t1 - t0).toFixed(0) + \' milliseconds\', \'background: black; color: white\');\n            };\n        } else {\n\n            if (namesFromExistingData.length > 0) {\n\n                $("#correlationsSpinner").append(\'<p id="spinnerText">&nbsp&nbsp Calculating, <i>please wait</i>&nbsp&nbsp</p>\').fadeIn(300);\n            }\n\n            $("#calculatingCorrelationsModal").toggleClass(\'active\');\n\n            // setTimeout to force display of spinner\n            setTimeout(function () {\n\n                // convert sorts to arrays\n                var sortsAsNumbers2 = CORR.convertSortsTextToNumbers(sortsFromExistingData, originalSortSize2);\n\n                // do the calcuations\n                createCorrelationTable = CORR.calculateCorrelations(sortsAsNumbers2, namesFromExistingData);\n\n                $("#correlationsSpinner").children("p").remove();\n\n                // draw the display table\n                createDisplayTableJQUERY(createCorrelationTable, \'correlationTable\');\n\n                t1 = performance.now();\n                console.log(\'%c Correlation Table completed in \' + (t1 - t0).toFixed(0) + \' milliseconds\', \'background: black; color: white\');\n\n            }, 10);\n        }\n    };\n\n\n    /* *******************************************************************  model\n    // ************ convert sorts and shift to positive values **********************\n    // ******************************************************************************\n    */\n    CORR.convertSortsTextToNumbers = function (sortsTextFromDb, originalSortSize) {\n        console.time("convertNumbers");\n        var sortsAsNumbers = [];\n        var maxArrayValue;\n\n        // skip conversion if data coming from somewhere other than pasted data\n        if (_.isArray(sortsTextFromDb[0]) === false) {\n            _(sortsTextFromDb).forEach(function (element, j) {\n                var startPoint = 0;\n                var endPoint = 2;\n                var tempArray = [];\n                var loopLen = originalSortSize;\n                var i, numberFragment, convertedNumber;\n\n                for (i = 0; i < loopLen; i++) {\n                    numberFragment = element.slice(startPoint, endPoint);\n                    convertedNumber = +numberFragment;\n                    tempArray.push(convertedNumber);\n                    startPoint = startPoint + 2;\n                    endPoint = endPoint + 2;\n                }\n                sortsAsNumbers.push(tempArray);\n            }).value();\n\n            // continue if not pasted text -\n        } else {\n            sortsAsNumbers = _.cloneDeep(sortsTextFromDb);\n            console.log("the else path was taken");\n        }\n        QAV.setState("sortsAsNumbers", sortsAsNumbers);\n        var sortsToShiftPositive = _.cloneDeep(sortsAsNumbers);\n        // shift sorts to positive range\n        maxArrayValue = _.max(sortsToShiftPositive[0]);\n        _(sortsToShiftPositive).forEach(function (element) {\n            var j;\n            var loopLen = originalSortSize;\n\n            for (j = 0; j < loopLen; j++) {\n                element[j] = element[j] + maxArrayValue + 1;\n            }\n        }).value();\n        QAV.setState("positiveShiftedRawSorts", sortsToShiftPositive);\n        console.timeEnd("convertNumbers");\n        return sortsAsNumbers;\n    };\n\n\n    //*****************************************************************  model\n    //****  calculate PQMethod type correlations    **************************\n    //************************************************************************\n\n    CORR.getPqmethodCorrelation = function (x, y) {\n\n        /**\n         *  @fileoverview Pearson correlation score algorithm.\n         *  @author matt.west@kojilabs.com (Matt West)\n         *  @license Copyright 2013 Matt West.\n         *  Licensed under MIT (http://opensource.org/licenses/MIT).\n         */\n\n        var n = x.length;\n\n        if (n === 0) {\n            return 0;\n        }\n\n        var sum1 = 0;\n        for (var i = 0; i < n; i++) {\n            sum1 += x[i];\n        }\n\n        var sum2 = 0;\n        for (var j = 0; j < n; j++) {\n            sum2 += y[j];\n        }\n\n        var sum1Sq = 0;\n        for (var k = 0; k < n; k++) {\n            sum1Sq += Math.pow(x[k], 2);\n        }\n\n        var sum2Sq = 0;\n        for (var m = 0; m < n; m++) {\n            sum2Sq += Math.pow(y[m], 2);\n        }\n\n        var pSum = 0;\n        for (var p = 0; p < n; p++) {\n            pSum += x[p] * y[p];\n        }\n\n        var num = pSum - (sum1 * sum2 / n);\n        var den = Math.sqrt((sum1Sq - Math.pow(sum1, 2) / n) *\n            (sum2Sq - Math.pow(sum2, 2) / n));\n\n        if (den === 0) {\n            return 0;\n        }\n\n        var answer = num / den;\n\n        var answer1 = [evenRound((answer), 5), evenRound((answer * 100), 0)];\n\n        return answer1;\n\n    };\n\n    //*********************************************************************   model\n    //******* correlations calcs       ********************************************\n    //*****************************************************************************\n    CORR.calculateCorrelations = function (sortsAsNumbers, names) {\n\n        console.time("correlation calculations and table display ");\n\n        // todo - get a proper read of the length and add missing name error testing\n        var totalSorts = names.length;\n        var sortsAsNumbersCloned = _.cloneDeep(sortsAsNumbers);\n        var correlationTableArray = [];\n        var correlationTableArrayFormatted = [];\n\n        for (var m = 0; m < totalSorts; m++) {\n            correlationTableArray[m] = [];\n        }\n\n        for (var n = 0; n < totalSorts; n++) {\n            correlationTableArrayFormatted[n] = [];\n        }\n\n        for (var i = 0; i < totalSorts; i++) {\n            var pullX = sortsAsNumbersCloned[i];\n\n            var correlationValue = CORR.getPqmethodCorrelation(sortsAsNumbersCloned[i], sortsAsNumbersCloned[i]);\n\n\n            correlationTableArray[0][0] = correlationValue[0];\n            correlationTableArrayFormatted[0][0] = correlationValue[1];\n\n            for (var k = i; k < totalSorts; k++) {\n                var correlationValue2 = CORR.getPqmethodCorrelation(pullX, sortsAsNumbersCloned[k]);\n\n                correlationTableArray[i][k] = correlationValue2[0];\n                correlationTableArrayFormatted[i][k] = correlationValue2[1];\n\n                if (k === i) {} else {\n                    // var nextArray = k + 1;\n                    correlationTableArray[k][i] = correlationValue2[0];\n                    correlationTableArrayFormatted[k][i] = correlationValue2[1];\n                }\n            } // end of k loop\n        } //  end of i loop\n\n        for (var j = 0; j < totalSorts; j++) {\n            var pullName = names[j];\n            correlationTableArrayFormatted[j].unshift(pullName);\n        }\n        names.unshift("");\n        correlationTableArrayFormatted.unshift(names);\n\n        QAV.setState("correlationTableArrayFormatted", correlationTableArrayFormatted);\n        QAV.setState("respondentNames", names);\n        QAV.setState("originalCorrelationValues", correlationTableArray);\n\n        console.timeEnd("correlation calculations and table display ");\n\n        return correlationTableArrayFormatted;\n    };\n\n\n    //*********************************************************************   model\n    //******* create Correlation Table ********************************************\n    //*****************************************************************************\n\n    // example had node listed in parameters\n    function createDisplayTableJQUERY(dataSet) {\n\n        var headerText = dataSet[0];\n        dataSet.shift();\n\n        for (var j = 0, jLen = dataSet.length; j < jLen; j++) {\n            dataSet[j].unshift(j + 1);\n        }\n\n        var tempObj;\n        var headerArray = [];\n\n        for (var i = 0, iLen = headerText.length; i < iLen; i++) {\n            tempObj = {};\n            tempObj.title = headerText[i];\n            headerArray.push(tempObj);\n        }\n\n        var blank = headerArray.shift();\n        var respondent = {\n            "title": "Respon."\n        };\n\n        headerArray.unshift(respondent);\n        headerArray.unshift(blank);\n\n        var columnTargets = [];\n        for (var k = 2, kLen = headerText.length + 1; k < kLen; k++) {\n            columnTargets.push(k);\n        }\n\n        // todo - create clear-outs of analysis and results for change in factors extracted drop-down selection\n\n        $("#correlationTable2").DataTable({\n            "fixedColumns": {\n                leftColumns: 2\n            },\n            "retrieve": true,\n            "searching": false,\n            "ordering": true,\n            "info": false,\n            "destroy": true,\n            "scrollY": 800,\n            "scrollCollapse": true,\n            "scrollX": true,\n            "paging": false,\n            "data": dataSet,\n            "columns": headerArray,\n            "columnDefs": [{\n                targets: columnTargets,\n                className: \'dt-head-center dt-body-right\',\n            }, {\n                targets: [0, 1],\n                className: \'dt-body-center dt-body-name\'\n            }, {\n                targets: \'_all\',\n                "createdCell": function (td, cellData) { // , rowData, row, col\n                    if (cellData < 0) {\n                        $(td).css(\'color\', \'red\');\n                    }\n                }\n            }],\n        });\n\n        var table = $("#correlationTable2").DataTable();\n        $(\'#correlationTable2 tbody\')\n            .on(\'mouseenter\', \'td\', function () {\n                var colIdx = table.cell(this).index().column;\n                $(table.cells().nodes()).removeClass(\'highlight\');\n                $(table.column(colIdx).nodes()).addClass(\'highlight\');\n            })\n            .on(\'mouseleave\', function () {\n                $(table.cells().nodes()).removeClass(\'highlight\');\n                $(table.columns().nodes()).removeClass(\'highlight\');\n            });\n    }\n\n\n}(window.CORR = window.CORR || {}, QAV));//# sourceMappingURL=data:application/json;charset=utf-8;base64,')}});