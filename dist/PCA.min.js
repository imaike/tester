!function(g){function I(A){if(C[A])return C[A].exports;var n=C[A]={i:A,l:!1,exports:{}};return g[A].call(n.exports,n,n.exports,I),n.l=!0,n.exports}var C={};I.m=g,I.c=C,I.i=function(g){return g},I.d=function(g,C,A){I.o(g,C)||Object.defineProperty(g,C,{configurable:!1,enumerable:!0,get:A})},I.n=function(g){var C=g&&g.__esModule?function(){return g.default}:function(){return g};return I.d(C,"a",C),C},I.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},I.p="",I(I.s=10)}({10:function(module,exports){eval('//Ken-Q Analysis\n//Copyright (C) 2016 Shawn Banasick\n//\n//    This program is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, either version 3 of the License, or\n//    (at your option) any later version.\n\n\n// JSlint declarations\n/* global numeric, window, QAV, $, document, JQuery, evenRound, UTIL, localStorage, _ */\n\n(function (PCA, QAV, undefined) {\n    \'use strict\';\n\n    PCA.doPrincipalComponents = function (X) {\n        var numberOfSorts, temp4, temp5, pcaFactorsToExtractArray, numberFactorsExtracted;\n        var numberofPrincipalComps, m;\n        var factorLabels = [];\n        var eigenVecs, eigenValuesSorted, eigenValuesAsPercents, eigenValuesCumulPercentArray;\n        var dataArray, dataArray2;\n\n        // to differentiate output functions\n        QAV.setState("typeOfFactor", "PCA");\n\n        numberOfSorts = QAV.getState("totalNumberSorts");\n\n        // determine the max number of factors to extract\n        temp4 = QAV.getState("originalSortSize");\n        temp5 = QAV.getState("totalNumberSorts");\n        pcaFactorsToExtractArray = [8, temp4, temp5];\n        numberFactorsExtracted = _.min(pcaFactorsToExtractArray);\n\n\n        numberofPrincipalComps = numberFactorsExtracted;\n        QAV.setState("numberFactorsExtracted", numberFactorsExtracted);\n        //  QAV.pcaNumberFactorsExtracted = numberFactorsExtracted;\n        QAV.setState("pcaNumberFactorsExtracted", numberFactorsExtracted);\n        UTIL.addFactorSelectCheckboxesRotation(numberFactorsExtracted);\n\n        // labels according to factors extacted (above)\n        for (m = 0; m < numberFactorsExtracted; m++) {\n            factorLabels.push("Factor " + (m + 1));\n        }\n        QAV.setState("factorLabels", factorLabels);\n\n        var isOnline = UTIL.checkIfOnline();\n\n        // use web worker if available and not running from local file\n        if (window.Worker && isOnline) {\n            $("#factorExtractionSpinnerText").css(\'visibility\', \'visible\');\n            $("#factorExtractionSpinnerDiv").addClass(\'calcSpinner\');\n            var workerMessageArray = [numberOfSorts, numberofPrincipalComps, X];\n            var myWorker = new Worker(\'wrkrs/workerPCA.js\');\n            myWorker.postMessage(workerMessageArray);\n            myWorker.onmessage = function (e) {\n                eigenVecs = e.data[0];\n                eigenValuesSorted = e.data[1];\n                eigenValuesAsPercents = e.data[2];\n                eigenValuesCumulPercentArray = e.data[3];\n\n                QAV.setState("centroidFactors", eigenVecs);\n                QAV.setState("eigenValuesSorted", eigenValuesSorted);\n                QAV.setState("eigenValuesAsPercents", eigenValuesAsPercents);\n                QAV.setState("eigenValuesCumulPercentArray", eigenValuesCumulPercentArray);\n                QAV.setState("eigenVecs", eigenVecs);\n\n                var language = QAV.getState("language");\n                var appendText = resources[language].translation["8 Principal Components Extracted"];\n                $("#rotationHistoryList").append(\'<li>\' + appendText + \'</button></li>\');\n\n                // hide spinner and change button display state\n                $("#factorExtractionSpinnerText").css(\'visibility\', \'hidden\');\n                $("#factorExtractionSpinnerDiv").removeClass(\'calcSpinner\');\n                VIEW.changePcaExtractionButtonDisplay();\n\n                // display components\n                PCA.drawExtractedFactorsTable();\n\n                // get data for scree plot\n                dataArray2 = eigenValuesSorted;\n                dataArray = dataArray2.slice(0, 8);\n\n                UTIL.drawScreePlot(dataArray);\n\n                $("#section4 > input").show();\n\n                return [eigenValuesSorted, eigenValuesAsPercents, eigenValuesCumulPercentArray, eigenVecs];\n            };\n        } else {\n            // if web workers not available\n            var svd, eigens;\n            var getEigenCumulPercentArray, doEigenVecsCalcs;\n            var inflectionArray;\n\n            // // svd = matrix of all principle components as column vectors          \n            svd = PCA.calcSvd(X);\n\n            // eigens = eigenvalues for data X \n            eigens = PCA.calcEigens(X);\n\n            // sort eigenValues from numeric\n            eigenValuesSorted = PCA.sortEigenValues(eigens.lambda.x);\n\n            // convert to percents and push to array\n            getEigenCumulPercentArray = PCA.calcEigenCumulPercentArray(eigenValuesSorted, numberOfSorts);\n\n            eigenValuesAsPercents = getEigenCumulPercentArray[0];\n            eigenValuesCumulPercentArray = getEigenCumulPercentArray[1];\n\n            doEigenVecsCalcs = PCA.calcEigenVectors(numberOfSorts, numberofPrincipalComps, eigenValuesSorted, svd);\n\n            eigenVecs = doEigenVecsCalcs[0];\n            inflectionArray = doEigenVecsCalcs[1];\n\n            eigenVecs = PCA.inflectPrincipalComponents(eigenVecs, inflectionArray);\n\n            QAV.setState("centroidFactors", eigenVecs);\n            QAV.setState("eigenValuesSorted", eigenValuesSorted);\n            QAV.setState("eigenValuesAsPercents", eigenValuesAsPercents);\n            QAV.setState("eigenValuesCumulPercentArray", eigenValuesCumulPercentArray);\n            QAV.setState("eigenVecs", eigenVecs);\n\n            var language = QAV.getState("language");\n            var appendText = resources[language].translation["8 Principal Components Extracted"];\n            $("#rotationHistoryList").append(\'<li>\' + appendText + \'</button></li>\');\n\n            // hide spinner and change button display state\n            VIEW.changePcaExtractionButtonDisplay();\n            PCA.drawExtractedFactorsTable();\n\n            // get data for scree plot\n            dataArray2 = eigenValuesSorted;\n            dataArray = dataArray2.slice(0, 8);\n\n            UTIL.drawScreePlot(dataArray);\n\n            $("#section4 > input").show();\n\n            return [eigenValuesSorted, eigenValuesAsPercents, eigenValuesCumulPercentArray, eigenVecs];\n        }\n    }; // END OF DO PCA FUNCTION\n\n\n\n    PCA.inflectPrincipalComponents = function (eigenVecs, inflectionArray) {\n        // check and inflect components if necessary\n        for (var s = 0; s < eigenVecs[0].length; s++) {\n            if (inflectionArray[s] < 0.0) {\n                for (var t = 0; t < eigenVecs.length; t++) {\n                    eigenVecs[t][s] = -eigenVecs[t][s];\n                }\n            }\n        }\n        return eigenVecs;\n    };\n\n    PCA.calcEigenVectors = function (numberOfSorts, numberofPrincipalComps, eigenValuesSorted, svd) {\n        var inflectionArray = [];\n        var temp1, critInflectionValue, temp3, temp4;\n        // setup empty array\n        var eigenVecs = [];\n        for (var p = 0; p < numberOfSorts; p++) {\n            eigenVecs.push([]);\n        }\n        // loop through each component    \n        for (var i = 0, iLen = numberofPrincipalComps; i < iLen; i++) {\n            temp1 = Math.sqrt(eigenValuesSorted[i]);\n            critInflectionValue = 0;\n\n            // loop through each QSort to get loading and also calc CRIT\n            for (var j = 0, jLen = svd.length; j < jLen; j++) {\n                temp3 = evenRound((svd[j][i] * temp1), 8);\n                eigenVecs[j][i] = temp3;\n                // set up data for influection test\n                temp4 = evenRound((temp3 * Math.abs(temp3)), 8);\n                critInflectionValue = critInflectionValue + temp4;\n            }\n            inflectionArray.push(evenRound(critInflectionValue, 8));\n        }\n        return [eigenVecs, inflectionArray];\n    };\n\n\n    PCA.calcEigenCumulPercentArray = function (eigenValuesSorted, numberOfSorts) {\n        var percentNumber = 100 / numberOfSorts;\n        var eigenValuesAsPercents = [];\n        var eigenValuesPercent;\n        var eigenValuesCumulPercentArray = [];\n        var eigenValueCumulPercentAccum = 0;\n\n        for (var k = 0, kLen = eigenValuesSorted.length; k < kLen; k++) {\n            eigenValuesSorted[k] = evenRound((eigenValuesSorted[k]), 8);\n            eigenValuesPercent = evenRound((eigenValuesSorted[k] * percentNumber), 0);\n            eigenValuesAsPercents.push(eigenValuesPercent);\n            eigenValueCumulPercentAccum = eigenValueCumulPercentAccum + eigenValuesPercent;\n            eigenValuesCumulPercentArray.push(eigenValueCumulPercentAccum);\n        }\n        return [eigenValuesAsPercents, eigenValuesCumulPercentArray];\n    };\n\n\n    PCA.sortEigenValues = function (values) {\n        // sort eigenValues from numeric\n        // eigenValuesSorted = eigens.lambda.x;\n        values.sort(function (a, b) {\n            return (b - a);\n        });\n        return values;\n    };\n\n\n    PCA.calcSvd = function (X) {\n        // svd = matrix of all principle components as column vectors          \n        var m, sigma, svd;\n        m = X.length;\n        sigma = numeric.div(numeric.dot(numeric.transpose(X), X), m);\n        svd = numeric.svd(sigma).U;\n        return svd;\n    };\n\n    PCA.calcEigens = function (X) {\n        // eigens = eigenvalues for data X \n        var eigens = numeric.eig(X);\n        return eigens;\n    };\n\n    PCA.drawExtractedFactorsTable = function () {\n        var eigenVecs = QAV.getState("eigenVecs");\n        var i, j, names, pcaHeaders, headersLength, pcaTableHeaders, pcaTargets, pcaTableTargets;\n\n        names = QAV.getState("respondentNames");\n        for (i = 0; i < eigenVecs.length; i++) {\n            j = i + 1;\n            eigenVecs[i].unshift(j, names[j]);\n        }\n\n        var language = QAV.getState("language");\n        var facText = resources[language].translation.Factor;\n        var respondText = resources[language].translation.Respondent;\n\n        pcaHeaders = [{\n                title: "Number"\n            }, {\n                title: respondText\n            },\n            {\n                title: facText + " 1"\n            },\n            {\n                title: facText + " 2"\n            },\n            {\n                title: facText + " 3"\n            },\n            {\n                title: facText + " 4"\n            },\n            {\n                title: facText + " 5"\n            },\n            {\n                title: facText + " 6"\n            },\n            {\n                title: facText + " 7"\n            },\n            {\n                title: facText + " 8"\n            }\n        ];\n\n        pcaTargets = [2, 3, 4, 5, 6, 7, 8, 9];\n\n\n        headersLength = QAV.pcaNumberFactorsExtracted + 2;\n        pcaTableHeaders = pcaHeaders.slice(0, headersLength);\n        pcaTableTargets = pcaTargets.slice(0, QAV.pcaNumberFactorsExtracted);\n\n        QAV.pcaTableHeaders = pcaTableHeaders;\n        QAV.pcaTableTargets = pcaTableTargets;\n\n        var configObj = {};\n        configObj.domElement = "#factorRotationTable1";\n        configObj.fixed = false;\n        configObj.data = eigenVecs;\n        configObj.headers = pcaTableHeaders;\n        configObj.colDefs = [{\n                targets: [0, 1],\n                className: \'dt-head-center dt-body-center dt-body-name\'\n            },\n            {\n                targets: pcaTableTargets,\n                className: \'dt-head-center dt-body-right\'\n            },\n            {\n                targets: \'_all\',\n                "createdCell": function (td, cellData, rowData, row, col) {\n                    if (cellData < 0) {\n                        $(td).css(\'color\', \'red\');\n                    }\n                }\n            }\n        ];\n\n        UTIL.drawDatatable(configObj);\n        PCA.createFooter();\n\n    };\n\n    PCA.createFooter = function () {\n        // create footer\n        var footer, temp, temp2, temp3, tableArray, array, array2, array3, tr, th;\n        var pcaFooterTableHeaders;\n\n        var language = QAV.getState("language");\n        var cumVarText = resources[language].translation["Cum % Expln Var"];\n        var varText = resources[language].translation["% explained variance"];\n        var eigenText = resources[language].translation.Eigenvalues;\n\n\n        temp = QAV.getState("eigenValuesSorted");\n        temp.unshift("", eigenText);\n        array = temp.slice(0, 10);\n\n        temp2 = QAV.getState("eigenValuesAsPercents");\n        temp2.unshift("", varText);\n        array2 = temp2.slice(0, 10);\n\n        temp3 = QAV.getState("eigenValuesCumulPercentArray");\n        temp3.unshift("", cumVarText);\n        array3 = temp3.slice(0, 10);\n\n\n        tableArray = [];\n        tableArray.push(array, array2, array3);\n\n        pcaFooterTableHeaders = QAV.getState("pcaTableHeaders");\n        pcaFooterTableHeaders[0].title = "";\n        pcaFooterTableHeaders[0].sTitle = "";\n        pcaFooterTableHeaders[1].title = "";\n        pcaFooterTableHeaders[1].sTitle = "";\n\n\n        var configObj = {};\n        configObj.domElement = "#factorRotationTable1Footer";\n        configObj.fixed = false;\n        configObj.data = tableArray;\n        configObj.ordering = false;\n        configObj.headers = pcaFooterTableHeaders;\n        configObj.colDefs = [{\n                targets: [0, 1],\n                className: \'dt-head-center dt-body-center dt-body-name\'\n            },\n            {\n                targets: _.clone(QAV.pcaTableTargets),\n                className: \'dt-head-center dt-body-right\'\n            },\n            {\n                targets: \'_all\',\n                "createdCell": function (td, cellData, rowData, row, col) {\n                    if (cellData < 0) {\n                        $(td).css(\'color\', \'red\');\n                    }\n                }\n            }\n        ];\n\n        UTIL.drawDatatable(configObj);\n\n    };\n\n}(window.PCA = window.PCA || {}, QAV));//# sourceMappingURL=data:application/json;charset=utf-8;base64,')}});