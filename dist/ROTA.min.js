!function(I){function g(A){if(C[A])return C[A].exports;var t=C[A]={i:A,l:!1,exports:{}};return I[A].call(t.exports,t,t.exports,g),t.l=!0,t.exports}var C={};g.m=I,g.c=C,g.i=function(I){return I},g.d=function(I,C,A){g.o(I,C)||Object.defineProperty(I,C,{configurable:!1,enumerable:!0,get:A})},g.n=function(I){var C=I&&I.__esModule?function(){return I.default}:function(){return I};return g.d(C,"a",C),C},g.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},g.p="",g(g.s=12)}({12:function(module,exports){eval('//Ken-Q Analysis\n//Copyright (C) 2016 Shawn Banasick\n//\n//    This program is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, either version 3 of the License, or\n//    (at your option) any later version.\n\n\n// JSlint declarations\n/* global window, d3, performance, sessionStorage, QAV, $, resources, LOAD, document, evenRound, UTIL, _ */\n\n(function (ROTA, QAV, undefined) {\n\n\n    // reset \'has split factor\' marker on page load\n    (function () {\n        var hasSplitFactor = 0;\n        QAV.setState("hasSplitFactor", hasSplitFactor);\n    })();\n\n    // ************************************************************  VIEW CONTROLER\n    // **********  re-initialize chart after save rotation or varimax *************\n    // ****************************************************************************\n\n    ROTA.reInitializePlotAndChart = function () {\n        // data to initialize D3 chart\n\n        var testVar = $.fn.dataTable.isDataTable(\'#twoFactorDisplayTable\');\n\n        if (testVar) {\n            var emptyArray = [{\n                "respondent": "",\n                "factor1": 0,\n                "factor2": 0\n            }];\n            var emptyArray2 = [];\n            ROTA.drawD3Chart(emptyArray);\n            var isNewSelection = false;\n            ROTA.updateDatatable1(emptyArray2, isNewSelection);\n        }\n    };\n\n\n    // **************************************************************** model state\n    // *********  save rotation counter *******************************************\n    // ****************************************************************************\n\n    // always reset to zero on centroid extraction (in centroid.js file)\n    ROTA.saveRotationArchiveCounter = function (option) {\n        var saveRotationCounter = QAV.getState("saveRotationCounter");\n        if (option === "increase") {\n            saveRotationCounter = saveRotationCounter + 1;\n            QAV.setState("saveRotationCounter", saveRotationCounter);\n        } else if (option === "decrease") {\n            saveRotationCounter = saveRotationCounter - 1;\n            QAV.setState("saveRotationCounter", saveRotationCounter);\n        } else if (option === "get") {\n            return saveRotationCounter;\n        } else if (option === "reset") {\n            QAV.setState("saveRotationCounter", 1);\n        }\n    };\n\n    // ****************************************************************  view\n    // ****  Rotation button state    ***************************************\n    // **********************************************************************\n\n    ROTA.saveRotationButtonColor = function (rotationDegreeDisplayValue) {\n        var saveRotButton = $("#saveRotationButton");\n        if (rotationDegreeDisplayValue !== 0) {\n            saveRotButton.removeClass("saveRotationButtonGray");\n            saveRotButton.addClass("saveRotationButtonYellow");\n        } else {\n            saveRotButton.removeClass("saveRotationButtonYellow");\n            saveRotButton.addClass("saveRotationButtonGray");\n        }\n    };\n\n    // *****************************************************************************\n    // *************    D3 Code Save as Image   ************************************\n    // *****************************************************************************\n    //\n    // example - http://plnkr.co/edit/MkZcXJPS7hrcWh3M0MZ1?p=preview\n    // http://www.inkfood.com/svg-to-canvas/\n    // https: //github.com/sampumon/SVG.toDataURL\n    // change data format to JSON\n\n\n    // ************************************************************  view controller\n    // *************    SAVE SELECTED factors for rotation   ***********************\n    // *****************************************************************************\n    ROTA.setRotationFactorsFromCheckbox = function () {\n\n        // get the factors to send to 2 factor chart\n        var pullFactors = [];\n        var checkboxes = document.getElementsByName(\'radioCheck\');\n        for (var i = 0; i < checkboxes.length; i++) {\n            if (checkboxes[i].checked) {\n                pullFactors.push(checkboxes[i].value);\n            }\n        }\n\n        // account for sending null set on page load to display empty chart\n        if (pullFactors !== null) {\n            var rotationFactorA = pullFactors[0];\n            var rotationFactorB = pullFactors[1];\n            QAV.setState("rotationFactorA", rotationFactorA);\n            QAV.setState("rotationFactorB", rotationFactorB);\n\n        }\n        return pullFactors;\n    };\n\n    // *******************************************************************  data model\n    // *************   Data format array to object   *********************************\n    // *******************************************************************************\n\n    // CALLED BY "DISPLAY FACTORS FOR ROTATION BUTTON"\n    ROTA.doD3ChartDataPrep = function (rotFacStateArray) {\n        var rotationFactorA = QAV.getState("rotationFactorA");\n        var rotationFactorB = QAV.getState("rotationFactorB");\n        var step4 = QAV.getState("qavRespondentNames");\n        var fSigCriterionResults = QAV.getState("fSigCriterionResults");\n\n        var chartData = _.cloneDeep(rotFacStateArray);\n        var dataValuesArray = [];\n        var initialTwoFactorTableArray = [];\n        var step1, step3, ilen, factorNameArrayFrag, respondent2, factor1c, factor2c;\n        var tempObj;\n\n        ilen = chartData.length;\n        for (var i = 0; i < ilen; i++) {\n            step1 = chartData[i];\n            step3 = fSigCriterionResults[i];\n\n            // CONVERT ARRAY TO OBJECT for D3js chart\n            tempObj = {\n                num: i + 1,\n                respondent: step4[i],\n                factor1: step1[rotationFactorA - 1],\n                factor1Sig: step3[rotationFactorA - 1],\n                factor2: step1[rotationFactorB - 1],\n                factor2Sig: step3[rotationFactorB - 1],\n            };\n            dataValuesArray.push(tempObj);\n        }\n\n        factorNameArrayFrag = [];\n        respondent2 = "";\n        factor1c = "Factor " + rotationFactorA;\n        factor2c = "Factor " + rotationFactorB;\n\n        factorNameArrayFrag.push(respondent2, factor1c, factor2c);\n        initialTwoFactorTableArray.unshift(factorNameArrayFrag);\n\n        return dataValuesArray;\n    };\n\n\n    // ***************************************************************** view model\n    // *******  draw D3 Chart  ***************************************************\n    // ***************************************************************************\n\n    ROTA.drawD3Chart = function (dataValuesArray) {\n        var rotationFactorA = QAV.getState("rotationFactorA");\n        var rotationFactorB = QAV.getState("rotationFactorB");\n        var rotChartConfig = QAV.getState("rotChartConfig");\n        var significanceColorA, significanceColorB, dotStrokeColor, identifier;\n        var data, defaultDotColor, customFontSize;\n\n        d3.select("#d3_scatterchart svg").remove();\n\n        // remove highlighting from circles\n        if (rotChartConfig.removeCircleHighlight === true) {\n            significanceColorA = "rgba(33, 33, 33, 0.0)";\n            significanceColorB = "rgba(33, 33, 33, 0.0)";\n            defaultDotColor = "rgba(33, 33, 33, 0.0)";\n        } else {\n            significanceColorA = rotChartConfig.significanceColorAPrep;\n            significanceColorB = rotChartConfig.significanceColorBPrep;\n            defaultDotColor = "#d8d8d8";\n        }\n\n        if (rotChartConfig.removeCircles === true) {\n            dotStrokeColor = "rgba(33, 33, 33, 0.0)";\n        } else {\n            dotStrokeColor = "#000000";\n        }\n\n        if (rotChartConfig.identifierNumber === true) {\n            identifier = "number";\n        } else {\n            identifier = "name";\n        }\n\n        if (rotChartConfig.changeFontSize === true) {\n            customFontSize = rotChartConfig.customFontSize + "px";\n        } else {\n            customFontSize = "9px";\n        }\n\n        //console.log(customFontSize);\n\n        // var significanceLevel = ROTA.calculateFactorLoadingSignificanceLevel();\n\n        data = dataValuesArray;\n\n        var chartSize = $(window).width() / 2.25;\n\n        var margin = {\n                top: 20,\n                right: 10,\n                bottom: 40,\n                left: 40\n            },\n\n            width = chartSize - margin.left - margin.right,\n            height = chartSize - margin.top - margin.bottom;\n        // todo - coordinate with canvas size on html so download works\n\n        /*\n         * value accessor - returns the value to encode for a given data object.\n         * scale - maps value to a visual display encoding, such as a pixel position.\n         * map function - maps from data value to display value\n         * axis - sets up axis\n         */\n\n        // setup x\n        var xValue = function (d) {\n                return d.factor2;\n            }, // data -> value\n            xScale = d3.scale.linear().range([0, width]), // value -> display\n            xMap = function (d) {\n                return xScale(xValue(d));\n            }, // data -> display\n            xAxis = d3.svg.axis().scale(xScale).orient("bottom").ticks(2).tickSize(-height, 0, 0).tickPadding(10);\n\n        // setup y\n        var yValue = function (d) {\n                return d.factor1;\n            }, // data -> value\n            yScale = d3.scale.linear().range([height, 0]), // value -> display\n            yMap = function (d) {\n                return yScale(yValue(d));\n            }, // data -> display\n            yAxis = d3.svg.axis().scale(yScale).orient("left").ticks(2).tickSize(-width, 0, 0).tickPadding(10);\n\n        // add the graph canvas to the webpage\n        var svg = d3.select("#d3_scatterchart").append("svg")\n            .attr("width", width + margin.left + margin.right)\n            .attr("height", height + margin.top + margin.bottom)\n            .attr("font-family", "Arial")\n            .attr("id", "scatterChart")\n            .append("g")\n            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");\n\n        // confirm number format\n        data.forEach(function (d) {\n            d.factor1 = +d.factor1;\n            d.factor2 = +d.factor2;\n            d.factor1Sig = d.factor1Sig + \'\';\n            d.factor2Sig = d.factor2Sig + \'\';\n        });\n\n        // check for case with factor loading greater than 1 and adjust axis\n        var axisMax;\n        var maxXAxis = d3.max(data, xValue);\n        var minXAxis = d3.min(data, xValue);\n        var maxYAxis = d3.max(data, yValue);\n        var minYAxis = d3.min(data, yValue);\n\n        var axisTestArray = [maxXAxis, minXAxis, maxYAxis, minYAxis];\n        var maxArrayValue = _.max(axisTestArray);\n        var minArrayValue = _.min(axisTestArray);\n\n        if (maxArrayValue > 1 || minArrayValue < -1) {\n            if (maxArrayValue > -minArrayValue) {\n                axisMax = maxArrayValue;\n            } else {\n                axisMax = -minArrayValue;\n            }\n        } else {\n            axisMax = 1;\n        }\n\n        xScale.domain([-axisMax, +axisMax]);\n        yScale.domain([-axisMax, +axisMax]);\n\n        // define the div for the tooltip   #d3_scatterchart\n        var div = d3.select("#d3_scatterchart").append("div")\n            .attr("class", "d3Tooltip")\n            .style("opacity", 0);\n\n        // x-axis\n        svg.append("g")\n            .attr("class", "x axis")\n            .attr("transform", "translate(0," + height + ")")\n            .call(xAxis)\n            .append("text")\n            .attr("class", "label")\n            .attr("x", width)\n            .attr("y", -6)\n            .style("font-family", "Arial")\n            .style("text-anchor", "end");\n\n        // create x axis title\n        svg.append("text")\n            .attr("x", width / 2)\n            .attr("y", height + 35)\n            .style("text-anchor", "middle")\n            .style("font-family", "Arial")\n            .style("font-weight", "bold")\n            .text("Factor " + rotationFactorB);\n\n        // y-axis\n        svg.append("g")\n            .attr("class", "y axis")\n            .call(yAxis)\n            .append("text")\n            .attr("class", "label")\n            .attr("transform", "rotate(-90)")\n            .attr("y", 6)\n            .attr("dy", ".71em")\n            .style("font-family", "Arial")\n            .style("text-anchor", "end");\n        // .selectAll(\'path\')\n        // .style(\'stroke\', \'red\')\n        // .style(\'fill\', \'none\')\n        // .style(\'stroke-width\', \'5px\');\n        // .text("Factor " + rotationFactorA);\n\n        svg.selectAll(\'.axis lne, .axis path, .minor\')\n            .style({\n                \'stroke\': \'black\',\n                \'fill\': \'none\',\n                \'stroke-width\': \'1px\',\n                \'shape-rendering\': \'crispEdges\'\n            });\n\n        d3.selectAll(\'g.tick\')\n            .style({\n                \'stroke\': \'black\',\n                \'fill\': \'black\',\n                \'stroke-width\': \'1px\',\n                \'shape-rendering\': \'crispEdges\'\n            });\n\n\n        // create Y axis label\n        svg.append("text")\n            .attr("transform", "rotate(-90)")\n            .attr("y", 0 - margin.left)\n            .attr("x", 0 - (height / 2))\n            .attr("dy", "1em")\n            .style("text-anchor", "middle")\n            .style("font-family", "Arial")\n            .style("font-weight", "bold")\n            .text("Factor " + rotationFactorA);\n\n\n        /*  drawing dots and circles based on http://jsfiddle.net/eamonnmag/Q567s/   */\n\n        /*    telling D3 that all nodes (g elements with class node) will have data attached to them. The \'key\' used (to let D3 know the uniqueness of items) will be the "num" */\n        var index = svg.selectAll("g.node").data(data, function (d) {\n            return d.num;\n        });\n\n        /* \'enter\' the data, making the SVG group (to contain a circle and text) with a class node. This corresponds with what we told the data it should be above. */\n        var indexGroup = index.enter().append("g").attr("class", "node")\n            .attr(\'transform\', function (d) {\n                return "translate(" + xMap(d) + "," + yMap(d) + ")";\n            });\n\n        // add the circles\n        indexGroup.append("circle")\n            .attr("r", 9)\n            .attr("class", "dot")\n            .style("stroke", dotStrokeColor)\n            .style("fill", function (d) {\n                if (d.factor1Sig === "true") {\n                    return (significanceColorA); //"#ffe4b2";\n                } else if (d.factor2Sig === "true") {\n                    return (significanceColorB);\n                } else {\n                    return (defaultDotColor);\n                }\n            })\n            .on("mouseover", function (d) {\n                div.transition()\n                    .duration(100)\n                    .style("opacity", 1);\n                div.html("<strong>" + d.respondent + "</strong><br>" + yValue(d) + ", 　" + xValue(d))\n                    .style("left", (d3.event.pageX + 10) + "px")\n                    .style("top", (d3.event.pageY - 28) + "px");\n            })\n            .on("mouseout", function () {\n                div.transition()\n                    .duration(500)\n                    .style("opacity", 0);\n            });\n\n        // add the text labels\n        indexGroup.append("text")\n            .style("text-anchor", "middle")\n            .attr("class", "dotText")\n            .attr("font-family", "Arial")\n            .attr("font-size", customFontSize)\n            .attr("dy", 3)\n            .text(function (d) {\n                if (identifier === "number") {\n                    return d.num;\n                } else {\n                    return d.respondent;\n                }\n            })\n            .on("mouseover", function (d) {\n                div.transition()\n                    .duration(100)\n                    .style("opacity", 1);\n                div.html("<strong>" + d.respondent + "</strong><br>" + yValue(d) + ", 　" + xValue(d))\n                    .style("left", (d3.event.pageX + 10) + "px")\n                    .style("top", (d3.event.pageY - 28) + "px");\n            })\n            .on("mouseout", function () {\n                div.transition()\n                    .duration(500)\n                    .style("opacity", 0);\n            });\n        //  todo - check to see if I need to exit the dots\n    };\n\n    // todo - store this info on auto flagging somewhere else\n    //These are the two standard criteria for automatic flagging used in Q method analysis:\n    //1. Q-sorts which factor loading is higher than the threshold for p-value < 0.05, and\n    //2. Q-sorts which square loading is higher than the sum of square loadings of the same Q-sort in\n    //    all other factors.\n\n    // C Flag Item I on Factor J if A^2/H^2 > .5 (Fuerntratt-Criterion) preliminary flagging method\n    // C *and* a > 1.96/sqrt(nitems)\n\n    // ******************************************************** data analysis\n    // ********  calc significance Levels  **********************************\n    //***********************************************************************\n\n    ROTA.calculateFactorLoadingSignificanceLevel = function (totalStatements) {\n        // var totalStatements = QAV.getState("qavOriginalSortSize");\n        var significanceLevel = evenRound((1.96 * (1 / Math.sqrt(totalStatements))), 5);\n        return significanceLevel;\n    };\n\n    // ***************************************************************  model\n    // **********  calc h2 communalities  ***********************************\n    //***********************************************************************\n\n    ROTA.calculateCommunalities = function (currentFactorData) {\n        var calculateCommunalityArray = _.cloneDeep(currentFactorData);\n        var temp, temp2, temp3, temp4, i, roundedValue, chartDataLength;\n        var communalitiesArray = [];\n        var fSigCriterion = [];\n\n        // calculateCommunalityArray.shift();\n        function square(m) {\n            return m * m;\n        }\n\n        _.forEach(calculateCommunalityArray, function (n) {\n            temp = (_.map(n, square));\n            temp2 = temp.reduce(function (a, b) {\n                return a + b;\n            }, 0);\n            temp3 = evenRound((temp2), 5);\n            communalitiesArray.push(temp3);\n\n            temp4 = [];\n            for (var k = 0, kLen = temp.length; k < kLen; k++) {\n                roundedValue = evenRound((temp[k]), 5);\n                temp4.push(roundedValue);\n            }\n            fSigCriterion.push(temp4);\n        });\n\n        QAV.setState("fSigCriterion", fSigCriterion);\n        QAV.setState("rowH2", communalitiesArray);\n\n        chartDataLength = calculateCommunalityArray.length;\n        for (i = 0; i < chartDataLength; i++) {\n            calculateCommunalityArray[i].push(communalitiesArray[i]);\n        }\n        return calculateCommunalityArray;\n    };\n\n    // todo - remove conditional formatting for h2 column on rotation history chart\n\n    // *******************************************************************  model\n    // ****  Calculate Fuerntratt Criterion on Communalities ********************\n    // **************************************************************************\n\n\n    // todo - relocate function?\n    ROTA.calculatefSigCriterionValues = function (addFlag) {\n        var fSigCriterionArray = QAV.getState("fSigCriterion");\n        var totalStatements = QAV.getState("qavOriginalSortSize");\n        var sigLevel2 = ROTA.calculateFactorLoadingSignificanceLevel(totalStatements);\n        var sigLevel = sigLevel2 * sigLevel2;\n        var arrayLength = fSigCriterionArray.length;\n        var arrayLength2 = fSigCriterionArray[0].length;\n        var temp1, testValue, others, others2, array, significant;\n        var i, j, tempArray;\n        var fSigCriterionResults = [];\n\n        for (i = 0; i < arrayLength; i++) {\n            temp1 = fSigCriterionArray[i];\n            tempArray = [];\n            for (j = 0; j < arrayLength2; j++) {\n                array = _.clone(temp1);\n                testValue = _.pullAt(array, j);\n                others2 = array.reduce(function (a, b) {\n                    return a + b;\n                }, 0);\n                others = evenRound((others2), 5);\n\n                if (addFlag === "flag") {\n                    if (testValue > others && testValue > sigLevel) {\n                        significant = \'true\';\n                    } else {\n                        significant = "false";\n                    }\n                } else {\n                    significant = \'false\';\n                }\n                tempArray.push(significant);\n            }\n            fSigCriterionResults.push(tempArray);\n        }\n        QAV.setState("fSigCriterionResults", fSigCriterionResults);\n    };\n\n    // *****************************************************************  model\n    // ******  Rotation procedure  ********************************************\n    // ************************************************************************\n\n    ROTA.calcSinDegrees = function (num) {\n        return Math.sin(num * (Math.PI / 180));\n    };\n\n    ROTA.calcCosDegrees = function (num) {\n        return Math.cos(num * (Math.PI / 180));\n    };\n\n    ROTA.newRotateClockwise = function (calculateRotationsArray, rotationDegree) {\n        var transposedArray = _.zip.apply(_, calculateRotationsArray);\n        var sinDegreesValue = (ROTA.calcSinDegrees(rotationDegree));\n        var cosDegreesValue = (ROTA.calcCosDegrees(rotationDegree));\n        var valueA, valueB, tempArray;\n        var len = transposedArray[0].length;\n        var a1Calculations, b1Calculations;\n        var a2Calculations, b2Calculations;\n        var rotatedFactorsArray = [];\n\n        for (var k = 0; k < len; k++) {\n            a1Calculations = transposedArray[1][k] * sinDegreesValue;\n            b1Calculations = transposedArray[0][k] * cosDegreesValue;\n            valueA = (evenRound((a1Calculations + b1Calculations), 5));\n            a2Calculations = transposedArray[0][k] * sinDegreesValue;\n            b2Calculations = transposedArray[1][k] * cosDegreesValue;\n            valueB = (evenRound((-(a2Calculations - b2Calculations)), 5));\n            tempArray = [];\n            tempArray[0] = valueA;\n            tempArray[1] = valueB;\n            rotatedFactorsArray.push(tempArray);\n        }\n        return rotatedFactorsArray;\n    };\n\n    ROTA.newRotateCounterClockwise = function (calculateRotationsArray, rotationDegree) {\n        var transposedArray = _.zip.apply(_, calculateRotationsArray);\n        var sinDegreesValue = (ROTA.calcSinDegrees(rotationDegree));\n        var cosDegreesValue = (ROTA.calcCosDegrees(rotationDegree));\n        var valueA, valueB;\n        var len = transposedArray[0].length;\n        var a1Calculations, b1Calculations;\n        var a2Calculations, b2Calculations;\n        var rotatedFactorsArray = [];\n\n        for (var k = 0; k < len; k++) {\n            a1Calculations = transposedArray[1][k] * sinDegreesValue;\n            b1Calculations = transposedArray[0][k] * cosDegreesValue;\n            valueA = (evenRound((-(a1Calculations - b1Calculations)), 5));\n            a2Calculations = transposedArray[0][k] * sinDegreesValue;\n            b2Calculations = transposedArray[1][k] * cosDegreesValue;\n            valueB = (evenRound(((a2Calculations + b2Calculations)), 5));\n            var tempArray = [];\n            tempArray[0] = valueA;\n            tempArray[1] = valueB;\n            rotatedFactorsArray.push(tempArray);\n        }\n        return rotatedFactorsArray;\n    };\n\n\n    ROTA.calculateRotatedFactors = function (rotationDegree) {\n        var rotationFactorA = QAV.getState("rotationFactorA");\n        var rotationFactorB = QAV.getState("rotationFactorB");\n        var counterClockwiseRotation = false;\n        var calculateRotationsArray = QAV.getState("calculateRotationsArray");\n        var tempRotFacStateArray = QAV.getState("tempRotFacStateArray");\n        var rotatedFactors;\n        var looplen = calculateRotationsArray.length;\n\n        if (rotationDegree < 0) {\n            counterClockwiseRotation = true;\n        }\n\n        rotationDegree = Math.abs(rotationDegree);\n\n        if (counterClockwiseRotation !== true) {\n            rotatedFactors = ROTA.newRotateClockwise(calculateRotationsArray, rotationDegree);\n        } else {\n            rotatedFactors = ROTA.newRotateCounterClockwise(calculateRotationsArray, rotationDegree);\n        }\n\n        //insert rotated factors into temp rotational state array\n        for (var i = 0; i < looplen; i++) {\n            tempRotFacStateArray[i][rotationFactorA - 1] = rotatedFactors[i][0];\n            tempRotFacStateArray[i][rotationFactorB - 1] = rotatedFactors[i][1];\n        }\n\n        // create obj for two factor table display\n        ROTA.setTwoFactorRotationalArray(tempRotFacStateArray);\n\n        // expects bare full array\n        var arrayWithCommunalities = ROTA.calculateCommunalities(tempRotFacStateArray);\n\n        // gets array for fSig testing from LS of calculateCommunalities - sets fSigCriterionResults\n        ROTA.calculatefSigCriterionValues("flag");\n\n        // returns dataValuesArray for D3 chart\n        var d3Prep = ROTA.doD3ChartDataPrep(arrayWithCommunalities);\n\n        ROTA.drawD3Chart(d3Prep);\n        var prepTwoFactorTable = ROTA.prepTwoFactorUpdateHandsontable(tempRotFacStateArray);\n\n        // re-draw two factor rotation table\n        var isNewSelection = false;\n        ROTA.updateDatatable1(prepTwoFactorTable, isNewSelection);\n\n        // console.log(\'%c Factor rotation calcs completed in  \' + (time1 - time0).toFixed(3) + \' milliseconds\', \'background: aquamarine; color: black\');\n\n        QAV.setState("calculateRotationsArray", rotatedFactors);\n        QAV.setState("tempRotFacStateArray", tempRotFacStateArray);\n    };\n\n\n    // ************************************************************* model\n    // ****  prep two factor and create initial rot array ****************\n    // *******************************************************************\n    ROTA.prepTwoFactorUpdateHandsontable = function (chartData) {\n        var twoFactorTableArray = [];\n        var step1, i, step3, tempObj;\n        var rotationFactorA = QAV.getState("rotationFactorA");\n        var rotationFactorB = QAV.getState("rotationFactorB");\n        var fSigCriterionResults = QAV.getState("fSigCriterionResults");\n        var respondentNames = QAV.getState("qavRespondentNames");\n        var ilen = chartData.length;\n\n        for (i = 0; i < ilen; i++) {\n            step1 = chartData[i];\n            step3 = fSigCriterionResults[i];\n            tempObj = {\n                respondent: respondentNames[i],\n                factor1: step1[rotationFactorA - 1],\n                factor1Sig: step3[rotationFactorA - 1],\n                factor2: step1[rotationFactorB - 1],\n                factor2Sig: step3[rotationFactorB - 1],\n            };\n            twoFactorTableArray.push(tempObj);\n        }\n        return twoFactorTableArray;\n    };\n\n\n    // **************************************************************  model\n    // **** initial array for two factor table ****************************\n    // ********************************************************************\n    ROTA.setTwoFactorRotationalArray = function (chartData) {\n        var rotationFactorA = QAV.getState("rotationFactorA");\n        var rotationFactorB = QAV.getState("rotationFactorB");\n        var ilen = chartData.length;\n        var calculateRotationsArray = [];\n        var tempArray;\n        var temp1;\n        var temp2;\n\n        for (var i = 0; i < ilen; i++) {\n            tempArray = [];\n            temp1 = chartData[i][rotationFactorA - 1];\n            temp2 = chartData[i][rotationFactorB - 1];\n            tempArray.push(temp1, temp2);\n            calculateRotationsArray.push(tempArray);\n        }\n        QAV.setState("calculateRotationsArray", calculateRotationsArray);\n        return calculateRotationsArray;\n    };\n\n\n    // *************************************************************** view\n    // ******  draw two factors table  ************************************\n    // ********************************************************************\n    ROTA.updateDatatable1 = function (newData, isNewSelection) {\n\n        // todo - fix error on baselinedata setting after displaying factors once\n        var i, baseLineData, tempArray1, temp1, temp1a, temp2, temp2b, temp2a;\n        var new2FactorDataArray = [];\n        var temp4, temp6a, temp6b, table;\n        var temp7, temp8, testVar;\n\n        // check to see if datatabel already exists - returns boolean\n        testVar = $.fn.dataTable.isDataTable(\'#twoFactorDisplayTable\');\n        var facA = QAV.getState("rotationFactorA");\n        var facB = QAV.getState("rotationFactorB");\n        var facAName = "Fac. " + facA;\n        var facAChange = "Chg. " + facA;\n        var facBName = "Fac. " + facB;\n        var facBChange = "Chg. " + facB;\n        var newHeaderArray = ["Res.", "Name", facAName, facAChange, facBName, facBChange];\n        var rotChartConfig = QAV.getState("rotChartConfig");\n        var significanceColorA = rotChartConfig.significanceColorA;\n        var significanceColorB = rotChartConfig.significanceColorB;\n\n        if (rotChartConfig.removeCircleHighlight === true) {\n            significanceColorA = "rgba(33, 33, 33, 0.0)";\n            significanceColorB = "rgba(33, 33, 33, 0.0)";\n        }\n\n        if (testVar === true) { //\n\n            baseLineData = QAV.getState("baseLineData");\n\n            new2FactorDataArray = [];\n            for (i = 0; i < newData.length; i++) {\n                tempArray1 = [];\n                temp1a = i + 1;\n                // adds resp. number\n                tempArray1.push(temp1a);\n                temp1 = newData[i].respondent;\n                // adds respondent name\n                tempArray1.push(temp1);\n\n                temp2 = newData[i].factor1;\n                // adds factor 1 calced value\n                tempArray1.push(temp2);\n                temp2b = baseLineData[i].factor1;\n                temp2a = evenRound((temp2 - temp2b), 5);\n                // adds diff\n                tempArray1.push(temp2a);\n\n                temp4 = newData[i].factor2;\n                // adds factor 2 calced value\n                tempArray1.push(temp4);\n                temp6b = baseLineData[i].factor2;\n                temp6a = evenRound((temp4 - temp6b), 5);\n                // adds diff\n                tempArray1.push(temp6a);\n\n                temp7 = newData[i].factor1Sig;\n                temp8 = newData[i].factor2Sig;\n                tempArray1.push(temp7, temp8);\n                new2FactorDataArray.push(tempArray1);\n            }\n\n            table = $(\'#twoFactorDisplayTable\').DataTable();\n            table.clear();\n            for (var j = 0; j < newHeaderArray.length; j++) {\n                table.columns(j).header().to$().text(newHeaderArray[j]);\n            }\n            table.rows.add(new2FactorDataArray).draw();\n\n        } else {\n\n            baseLineData = QAV.getState("baseLineData");\n\n            if (baseLineData === null) {\n                baseLineData = [1, "", 0, 0, 0, 0];\n            }\n\n            for (i = 0; i < newData.length; i++) {\n\n                tempArray1 = [];\n                temp1a = i + 1;\n                tempArray1.push(temp1a);\n                temp1 = newData[i].respondent;\n                tempArray1.push(temp1);\n\n                temp2 = newData[i].factor1;\n                tempArray1.push(temp2);\n                temp2b = baseLineData[i].factor1;\n                temp2a = evenRound((temp2 - temp2b), 5);\n                tempArray1.push(temp2a);\n\n                temp4 = newData[i].factor2;\n                tempArray1.push(temp4);\n                temp6b = baseLineData[i].factor2;\n                temp6a = evenRound((temp4 - temp6b), 5);\n                tempArray1.push(temp6a);\n\n                temp7 = newData[i].factor1Sig;\n                temp8 = newData[i].factor2Sig;\n                tempArray1.push(temp7, temp8);\n\n                new2FactorDataArray.push(tempArray1);\n            }\n\n            // var significanceLevel = ROTA.calculateFactorLoadingSignificanceLevel();\n\n            table = $(\'#twoFactorDisplayTable\').DataTable({\n                // "dom": \'<"top"i>rt<"bottom"flp><"clear">\',\n                "retrieve": true,\n                "searching": false,\n                "ordering": true,\n                "info": false,\n                "scrollY": 600,\n                "scrollCollapse": true,\n                "scrollX": true,\n                "paging": false,\n                //"autoWidth": true,\n                "columnDefs": [{\n                    targets: [2, 3, 4, 5],\n                    className: \'dt-body-right\',\n                }, {\n                    targets: [0, 1],\n                    className: \'dt-body-center\'\n                }, {\n                    targets: [0],\n                    orderData: [0, 1]\n                }, {\n                    targets: [2],\n                    orderData: [2]\n                }, {\n                    targets: [3],\n                    orderData: [3]\n                }, {\n                    targets: [4],\n                    orderData: [4]\n                }, {\n                    targets: [5],\n                    orderData: [5]\n                }, {\n                    targets: [6],\n                    "visible": false\n                }, {\n                    targets: [7],\n                    "visible": false\n                }, {\n                    \'targets\': [2],\n                    "createdCell": function (td, cellData, rowData) { // row col\n\n                        if (rowData[6] === "true") {\n                            $(td).css(\'background\', significanceColorA); //\'#ffe4b2\');\n                        }\n                    }\n                }, {\n                    \'targets\': [4],\n                    "createdCell": function (td, cellData, rowData) { // row col\n                        if (rowData[7] === "true") {\n                            $(td).css(\'background\', significanceColorB);\n                        }\n                    }\n                }],\n\n                data: new2FactorDataArray,\n                "columns": [{\n                    title: "Res.",\n                    className: \'dt-head-center dt-body-center\'\n                }, {\n                    title: "Name",\n                    className: \'dt-head-center dt-body-center\'\n                }, {\n                    title: facAName, //"Fac. A",\n                    className: \'dt-head-center dt-body-right\'\n                }, {\n                    title: facAChange, // "Chg A",\n                    className: \'dt-head-center dt-body-right\'\n                }, {\n                    title: facBName, // "Fac. B",\n                    className: \'dt-head-center dt-body-right\'\n                }, {\n                    title: facBChange, // "Chg B",\n                    className: \'dt-head-center dt-body-right\'\n                }, ],\n            });\n\n            table.fixedHeader.adjust();\n            // TODO -  FOR COLUMN HIGHLIGHTING - FIND ERROR AND RESTORE\n            //        var lastIdx = null;\n            //        $(\'#twoFactorDisplayTable tbody\')\n            //            .on(\'mouseover\', \'td\', function () {\n            //                var colIdx = table.cell(this).index().column;\n            //                if (colIdx !== lastIdx) {\n            //                    $(table.cells().nodes()).removeClass(\'highlight\');\n            //                    $(table.column(colIdx).nodes()).addClass(\'highlight\');\n            //                }\n            //            })\n            //            .on(\'mouseleave\', function () {\n            //                $(table.cells().nodes()).removeClass(\'highlight\');\n            //            });\n        }\n    };\n    // **************************************************************************** model\n    // **********  save D3 rotated factors to state matrix array  ***********************\n    // **********************************************************************************\n    ROTA.saveRotation = function () {\n        var rotationDegree = sessionStorage.getItem("rotationDegreeDisplayValue");\n        var rotationFactorA = QAV.getState("rotationFactorA");\n        var rotationFactorB = QAV.getState("rotationFactorB");\n        var listText;\n        var rotFacStateArray;\n        var tempRotFacStateArray;\n\n\n        // archive factor rotation table\n        UTIL.archiveFactorScoreStateMatrixAndDatatable();\n\n        // update project history\n        var language = QAV.getState("language");\n        var appendText = resources[language].translation.Factors;\n        var appendText2 = resources[language].translation.and;\n        var appendText3 = resources[language].translation.rotated;\n        var appendText4 = resources[language].translation["rotated degrees"];\n        var appendText5 = resources[language].translation.Undo;\n\n        listText = appendText + rotationFactorA + appendText2 + rotationFactorB + appendText3 + rotationDegree + appendText4;\n        $("#rotationHistoryList").append(\'<li>\' + listText + \'<button class="deleteButton">\' + appendText5 + \'</button></li>\');\n\n        rotFacStateArray = QAV.getState("rotFacStateArray");\n        tempRotFacStateArray = QAV.getState("tempRotFacStateArray");\n\n        // save temp array as new current state array\n        QAV.setState("rotFacStateArray", tempRotFacStateArray);\n\n        // re-draw factor table\n        var isRotatedFactorsTableUpdate = "destroy";\n        LOAD.drawRotatedFactorsTable2(isRotatedFactorsTableUpdate, "noFlag");\n\n        // clear out the 2 factor rotation chart and plot\n        ROTA.reInitializePlotAndChart();\n\n        // reset degree display, button color and stored value\n        $("#handRotationDisplayContainer div").html("0&deg");\n        sessionStorage.setItem("rotationDegreeDisplayValue", 0);\n        ROTA.saveRotationButtonColor(0);\n\n        // force re-calc of results if more rotations made and then download / display buttons called\n        QAV.setState("outputComplete", "false");\n    };\n\n    //******************************************************************   model\n    //******* for rotated factors table data  handsontable version *************\n    //**************************************************************************\n    // ROTA.calculateEigenvaluesAndVariance = function () {\n    //     var numberSorts = QAV.getState("qavTotalNumberSorts");\n    //     var factorMatrix2 = QAV.getState("rotFacStateArray");\n    //     //var factorMatrix2 = _.cloneDeep(factorMatrix);\n    //     var factorMatrix1 = _.zip.apply(_, factorMatrix2);\n    //     var j, num, eigen, totalVariance;\n    //     var eigenvalues = {};\n    //     var explainedVariance = {};\n    //     var loopLen1 = factorMatrix1.length;\n    //     var results = [];\n    //     var factorNumber, factorSig;\n\n    //     eigenvalues = {\n    //         respondent: "Eigenvalues"\n    //     };\n    //     explainedVariance = {\n    //         respondent: "% Expln Var"\n    //     };\n\n    //     for (j = 0; j < loopLen1; j++) {\n    //         num = factorMatrix1[j];\n    //         for (var k = 0; k < num.length; k++) {\n    //             num[k] = evenRound((num[k] * num[k]), 8);\n    //         }\n    //         eigen = evenRound((_.reduce(num, function (sum, num2) {\n    //             return sum + num2;\n    //         })), 5);\n\n    //         factorNumber = "factor" + (j + 1);\n\n    //         factorSig = "factorSig" + (j + 1);\n    //         totalVariance = evenRound((100 * (eigen / numberSorts)), 0);\n\n    //         eigenvalues[factorNumber] = eigen;\n    //         explainedVariance[factorNumber] = totalVariance;\n\n    //         eigenvalues[factorSig] = "";\n    //         explainedVariance[factorSig] = "";\n\n    //     }\n    //     eigenvalues.communality = "";\n    //     explainedVariance.communality = "";\n    //     results.push(eigenvalues);\n    //     QAV.setState("expVar", explainedVariance);\n    //     jlog("results", results);\n    //     return results;\n    // };\n\n    //***************************************************************   model\n    //**** for rotated factors table data - datatables version **************\n    //***********************************************************************\n    ROTA.calculateEigenvaluesAndVariance2 = function () {\n        var numberSorts = QAV.getState("qavTotalNumberSorts");\n        var factorMatrix2 = QAV.getState("rotFacStateArray");\n        // var factorMatrix2 = _.cloneDeep(factorMatrix);\n        var factorMatrix1 = _.zip.apply(_, factorMatrix2);\n        var j, num, eigen, totalVariance;\n        var eigenvalues = {};\n        var explainedVariance = {};\n        var loopLen1 = factorMatrix1.length;\n        var results = [];\n        var factorNumber, factorSig;\n\n        eigenvalues = ["Eigenvalues"];\n        explainedVariance = ["% Expln Var"];\n\n        for (j = 0; j < loopLen1; j++) {\n            num = factorMatrix1[j];\n            for (var k = 0; k < num.length; k++) {\n                num[k] = evenRound((num[k] * num[k]), 8);\n            }\n            eigen = evenRound((_.reduce(num, function (sum, num2) {\n                return sum + num2;\n            })), 5);\n\n            factorNumber = "factor" + (j + 1);\n\n            factorSig = "factorSig" + (j + 1);\n            totalVariance = evenRound((100 * (eigen / numberSorts)), 0);\n\n            eigenvalues.push(eigen);\n            explainedVariance.push(totalVariance);\n\n            eigenvalues.push("");\n            explainedVariance.push("");\n        }\n        eigenvalues.push("");\n        explainedVariance.push("");\n\n        results.push(eigenvalues);\n        explainedVariance.splice(1, 0, "", "");\n        QAV.setState("expVar", explainedVariance);\n        return results;\n    };\n\n}(window.ROTA = window.ROTA || {}, QAV));//# sourceMappingURL=data:application/json;charset=utf-8;base64,')}});