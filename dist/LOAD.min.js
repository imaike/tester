!function(I){function g(A){if(C[A])return C[A].exports;var t=C[A]={i:A,l:!1,exports:{}};return I[A].call(t.exports,t,t.exports,g),t.l=!0,t.exports}var C={};g.m=I,g.c=C,g.i=function(I){return I},g.d=function(I,C,A){g.o(I,C)||Object.defineProperty(I,C,{configurable:!1,enumerable:!0,get:A})},g.n=function(I){var C=I&&I.__esModule?function(){return I.default}:function(){return I};return g.d(C,"a",C),C},g.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},g.p="",g(g.s=7)}({7:function(module,exports){eval('//Ken-Q Analysis\n//Copyright (C) 2016 Shawn Banasick\n//\n//    This program is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, either version 3 of the License, or\n//    (at your option) any later version.\n\n\n// JSlint declarations\n/* global numeric, ROTA, jQuery, resources, alasql, CENTROID, VIEW, window, QAV, $, document, JQuery, evenRound, UTIL, localStorage, _ */\n\n(function(LOAD, QAV, undefined) {\n\n    // custom sorting function for rotation table to get factor grouping in right order\n    (function() {\n        $.extend($.fn.dataTableExt.oSort, {\n            "highestFactor-pre": function(a) {\n\n                var front = a.slice(0, 2);\n                var back = a.slice(3, a.length);\n\n                switch (front) {\n                    case "F1":\n                        return (parseInt(back));\n                    case "F2":\n                        return (parseInt(back) + 300);\n                    case "F3":\n                        return (parseInt(back) + 600);\n                    case "F4":\n                        return (parseInt(back) + 900);\n                    case "F5":\n                        return (parseInt(back) + 1200);\n                    case "F6":\n                        return (parseInt(back) + 1500);\n                    case "F7":\n                        return (parseInt(back) + 1800);\n                    default:\n                        return (parseInt(back) + 2100);\n                }\n            },\n\n            "highestFactor-asc": function(a, b) {\n                return ((a < b) ? -1 : ((a > b) ? 1 : 0));\n            },\n\n            "highestFactor-desc": function(a, b) {\n                return ((a < b) ? 1 : ((a > b) ? -1 : 0));\n            }\n        });\n    })();\n\n    // ****************************************************************** model\n    // *****  split bipolar factors and call dataTable update *****************\n    // ************************************************************************\n\n    // todo - is bipolar split keeping user-inserted flags for table re-draw????\n\n    LOAD.factorSplitFunction = function(factorNumber) {\n\n        // archive current state to undo split if called\n        UTIL.archiveFactorScoreStateMatrixAndDatatable();\n\n        // set split factor flag\n        var hasSplitFactor = (+(QAV.getState("hasSplitFactor")) + 1);\n        QAV.setState("hasSplitFactor", hasSplitFactor);\n\n        // archive headers for undo function chart redraw\n        var archiveHeaders = QAV.getState("factorLabels");\n        localStorage.setItem("splitFactorHeadersArchive" + hasSplitFactor, JSON.stringify(archiveHeaders));\n\n        // get respondent names\n        var results = [];\n        var loopLen1 = QAV.getState("qavRespondentNames").length;\n        var data = $(\'#factorRotationTable2\').DataTable();\n\n        // retrieve column headers\n        var headers = QAV.getState("columnHeadersArray");\n\n        // reconstruct headers\n        var headersIndexLookupArray = [];\n        for (var k = 0; k < headers.length; k++) {\n            var temp = headers[k].title;\n            headersIndexLookupArray.push(temp);\n        }\n\n        // construct look-up value\n        var formattedFactorNumber = "Ftr " + factorNumber;\n        var insertionNumber = headersIndexLookupArray.indexOf(formattedFactorNumber);\n\n        // push just results into new array\n        for (var i = 0; i < loopLen1; i++) {\n            var data2 = data.row(i).data();\n            results.push(data2);\n        }\n\n        // pull in the explnVariance\n        var explnVariance = QAV.getState("expVar");\n\n        // j loop through sorts\n        var listText, j;\n        var loopLength = results.length;\n        for (j = 0; j < loopLength; j++) {\n\n            // grab current values of factor to be split\n            var temp1 = results[j][insertionNumber];\n            var temp1Flag = results[j][insertionNumber + 1];\n\n            // invert signs of new split factor\n            var temp2 = -temp1;\n\n            // remove flag if insertion value is negative\n            if (temp2 < 0) {\n                temp1Flag = "false";\n            }\n\n            // remove flags for original factor if negative\n            if (results[j][insertionNumber] < 0) {\n                results[j][insertionNumber + 1] = "false";\n            }\n\n            // insert the now inverted new factor values\n            results[j].splice(insertionNumber + 2, 0, temp2);\n            results[j].splice(insertionNumber + 3, 0, temp1Flag);\n        }\n\n        // insert gaps for new split factor in explnVariance and eigenvalue rows\n        explnVariance.splice(insertionNumber + 2, 0, "");\n        explnVariance.splice(insertionNumber + 3, 0, "");\n        QAV.setState("expVar", explnVariance);\n\n        // append explnVariance and eigenvalue rows back into table data\n        var negativeFactorName1 = ("Ftr " + factorNumber + "2");\n        var negativeFactorName = negativeFactorName1.toString();\n\n        var positiveFactorName1 = ("Ftr " + factorNumber + "1");\n        var positiveFactorName = positiveFactorName1.toString();\n\n        // copy original header for spliced factor\n        var duplicateName = [{\n            "title": negativeFactorName,\n            class: "dt-head-center dt-body-right"\n        }, {\n            "title": "flag",\n            class: "dt-head-center dt-body-center"\n        }];\n\n        // splice in the name of the split factor\n        headers.splice(insertionNumber + 2, 0, duplicateName[0]);\n        headers.splice(insertionNumber + 3, 0, duplicateName[1]);\n\n        // change original factor name\n        var originalName = [{\n            "title": positiveFactorName,\n            class: "dt-head-center dt-body-right"\n        }, {\n            "title": "flag",\n            class: "dt-head-center dt-body-center"\n        }];\n        headers[insertionNumber] = originalName[0];\n        headers[insertionNumber + 1] = originalName[1];\n\n        // todo - fix double storage issue of headers hack to deal with selection of factors for bipolar split after a previous bipolar split\n\n        // set headers to storage for use by output function cascade (?)\n        QAV.setState("factorLabels", headers);\n        QAV.factorLabels = headers;\n        QAV.setState("columnHeadersArray", headers);\n\n        // redraw rotated factors dataTable\n        bipolarSplitTableRedraw(headers, results, explnVariance);\n\n        // clear output checkboxes\n        VIEW.removeOutputFactorCheckboxes();\n\n        // append bipolar split to the rotation history list\n        var language = QAV.getState("language");\n        var appendText = resources[language].translation.Factor;\n        var appendText2 = resources[language].translation["was split into Factor"];\n        var appendText3 = resources[language].translation["_1p and Factor"];\n        var appendText4 = resources[language].translation._2n;\n        var appendText5 = resources[language].translation.Undo;\n\n        listText = appendText + factorNumber + appendText2 + factorNumber + appendText3 + factorNumber + appendText4;\n        $("#rotationHistoryList").append(\'<li>\' + listText + \'<button class="deleteSplitFactorButton">\' + appendText5 + \'</button></li>\');\n    };\n\n\n\n    // ************************************************************ model-view\n    // *****  invert factor loadings ****************************************\n    // **********************************************************************\n\n    LOAD.factorInvertFunction = function(factorNumber, currentRotationTable) {\n        var listText, newData;\n        // archive factor rotation table\n        UTIL.archiveFactorScoreStateMatrixAndDatatable();\n\n        currentRotationTable = LOAD.invertFactor(factorNumber, currentRotationTable);\n\n        // update Rotation Table Matrix State\n        QAV.setState("rotFacStateArray", currentRotationTable);\n        // prep data for rotation table re-draw\n        newData = LOAD.prepChartDataArray2(currentRotationTable);\n        // re-draw rotation table from matrix state\n        var isRotatedFactorsTableUpdate = "destroy";\n        LOAD.drawRotatedFactorsTable2(isRotatedFactorsTableUpdate, "noFlag");\n\n        var language = QAV.getState("language");\n        var appendText = resources[language].translation.Factor;\n        var appendText2 = resources[language].translation["was inverted"];\n        var appendText3 = resources[language].translation.Undo;\n\n        // append text to rotation history\n        listText = appendText + " " + factorNumber + " " + appendText2;\n        $("#rotationHistoryList").append(\'<li>\' + listText + \'<button class="deleteButton">\' + appendText3 + \'</button></li>\');\n\n        // clear D3 plot and 2 factor chart\n        ROTA.reInitializePlotAndChart();\n        return currentRotationTable;\n    };\n\n    LOAD.invertFactor = function(factorNumber, currentRotationTable) {\n        // change the sign of the factor to invert\n        var loopLength = currentRotationTable.length;\n        var adjustedFactorNumber = factorNumber - 1;\n\n        for (var i = 0; i < loopLength; i++) {\n            currentRotationTable[i][adjustedFactorNumber] = -currentRotationTable[i][adjustedFactorNumber];\n        }\n        return currentRotationTable;\n    };\n\n    // **************************************************************  DATA MODEL\n    // **********  undo split factor rotation insertion *************************\n    // **************************************************************************\n\n    LOAD.undoSplitFactorRotation = function() {\n        var hasSplitFactor = (+(QAV.getState("hasSplitFactor")));\n\n        // reset headers array\n        var headers = JSON.parse(localStorage.getItem("splitFactorHeadersArchive" + hasSplitFactor));\n\n        QAV.setState("factorLabels", headers);\n        QAV.factorLabels = headers;\n        // get counter and data values\n        var getSaveRotationArchiveCounter = ROTA.saveRotationArchiveCounter("get");\n\n        // decrement hasSplitFactor for select factors for output checkboxes\n        hasSplitFactor = hasSplitFactor - 1;\n        QAV.setState("hasSplitFactor", hasSplitFactor);\n\n        // decrement counter\n        if (getSaveRotationArchiveCounter > 1) {\n            ROTA.saveRotationArchiveCounter("decrease");\n        }\n\n        // adjust counter value\n        var retrieveName = getSaveRotationArchiveCounter - 1;\n\n        // get row colors\n        var rowColorsGray = getGrayColors();\n        var rowColorsRainbow = getRainbowColors();\n\n        // get rowbackground and order from DOM user input radio\n        var rowBackground = $("#section6 input[name=state2]:checked").val();\n        var orderingColumn = +($("#section6 input[name=state1]:checked").val());\n\n\n        // retrieve archived data using the now adjusted counter\n        var newData2 = QAV.getState("rotFacStateArrayArchive" + retrieveName);\n\n        // re-set archived data to state matrix ==> "rotFactorStateArray"ip\n        var rotFacStateArrayPrep1 = _.cloneDeep(newData2[0]);\n        QAV.setState("rotFacStateArray", rotFacStateArrayPrep1);\n\n        // pull chart data from retrieved archive array\n        var chartData = newData2[1];\n\n        var explVar = newData2[3];\n        QAV.setState("expVar", explVar);\n\n        // pull headers from retrieved archive array\n        var columnHeadersArray = newData2[2];\n        QAV.setState("columnHeadersArray", columnHeadersArray);\n\n        // set targets from columnHeadersArray\n        var columnTargets = [];\n        var targetLoopLen = columnHeadersArray.length;\n        for (var k = 4; k < targetLoopLen; k += 2) {\n            columnTargets.push(k);\n        }\n\n        var columnTargets2 = [];\n        for (var m = 1; m < targetLoopLen; m += 2) {\n            columnTargets2.push(m);\n        }\n\n        // todo - DRY this out\n        // redraw the rotated factors table\n        var table = $(\'#factorRotationTable2\').DataTable();\n        table.destroy();\n        $(\'#factorRotationTable2\').empty();\n\n        var isUndo = "no";\n\n        LOAD.createFooter("factorRotationTable2", explVar, isUndo);\n\n        table = $("#factorRotationTable2").DataTable({\n            "retrieve": true,\n            "searching": false,\n            "ordering": true,\n            "info": false,\n            //"scrollY": 600,\n            "scrollCollapse": true,\n            "scrollX": true,\n            "paging": false,\n            "order": [\n                [orderingColumn, "asc"]\n            ],\n            "data": chartData,\n            "columns": columnHeadersArray,\n            "columnDefs": [{\n                \'type\': \'highestFactor\',\n                \'targets\': 2\n            }, {\n                \'targets\': columnTargets, // [2, 4, 6, 8, 10, 12, 14],\n                \'searchable\': false,\n                \'orderable\': true,\n                \'render\': function(data, dataIndex) { // (data, type, full, meta) {\n                    if (\n                        data === "") {\n                        return \'<input type="checkbox" class="sigCheckbox" /><label></label>\';\n                    } else {\n                        return \'<input type="checkbox" class="sigCheckbox" id="d\' + dataIndex + \'" value="\' + data + \'" defaultChecked="\' + (data === \'true\' ? \'checked\' : \'\') + \'"\' + (data === \'true\' ? \'checked="checked"\' : \'\') + \' /><label></label>\';\n                    }\n                }\n            }],\n            "createdRow": function(row, data, dataIndex) {\n                var rowGroup;\n                if (rowBackground === "gray") {\n                    rowGroup = data[2].slice(0, 2);\n                    //var rowGroupColor = (rowColorsGray[rowGroup]).toString();\n                    $(\'td\', row).css(\'background-color\', rowColorsGray[rowGroup]);\n                } else if (rowBackground === "colors") {\n                    rowGroup = data[2].slice(0, 2);\n                    //var rowGroupColor = (rowColorsGray[rowGroup]).toString();\n                    $(\'td\', row).css(\'background-color\', rowColorsRainbow[rowGroup]);\n                }\n            }\n        });\n\n        // clear out the 2 factor rotation chart and D3 plot\n        // reInitializePlotAndChart();\n        $("#chartAndTableDisplayContainer").hide();\n\n        // clear output checkboxes\n        VIEW.removeOutputFactorCheckboxes();\n\n        // todo - check to see if firefox still needs this\n        return false;\n    };\n\n    // ******************************************************************* view\n    // **********  draw rotated factors table using jquery dataTables   *******\n    // ************************************************************************\n\n    LOAD.drawRotatedFactorsTable2 = function(isRotatedFactorsTableUpdate, shouldFlag) {\n\n        // pull current table state from global variable\n        var chartData = QAV.getState("rotFacStateArray");\n\n        // format data for table\n        var newData = LOAD.prepChartDataArray2(chartData);\n\n        // pull out explVar\n        var expVar2 = QAV.getState("expVar");\n\n        // pull out eigenvalues data\n        newData.pop();\n\n        // get row colors\n        var rowColorsGray = getGrayColors();\n        var rowColorsRainbow = getRainbowColors();\n\n        // get rowbackground and order from DOM user input radio\n        var rowBackground = $("#section6 input[name=state2]:checked").val();\n        var orderingColumn = +($("#section6 input[name=state1]:checked").val());\n\n        // var declarations\n        var loopLength = chartData[0].length + 1;\n        var temp;\n        var columnHeadersArray = [];\n\n        ROTA.calculateFactorLoadingSignificanceLevel();\n\n        columnHeadersArray.push({\n            title: \'No.\',\n            class: "dt-head-center dt-body-center"\n        }, {\n            title: \'Respond.\',\n            class: \'dt-head-center dt-body-center\'\n        }, {\n            title: \'FG\',\n            class: "dt-head-center dt-body-center"\n        });\n\n        for (var i = 1; i < loopLength; i++) {\n\n            temp = {\n                title: \'Ftr \' + i,\n                class: "dt-head-center dt-body-right"\n            };\n            columnHeadersArray.push(temp);\n            columnHeadersArray.push({\n                title: \'flag\',\n                class: "dt-head-center dt-body-center"\n            });\n        }\n        columnHeadersArray.push({\n            title: \'h<sup>2</sup>\',\n            class: "dt-head-center dt-body-right"\n        });\n\n        QAV.setState("columnHeadersArray", columnHeadersArray);\n\n        var columnTargets = [];\n        var targetLoopLen = columnHeadersArray.length;\n        for (var k = 4; k < targetLoopLen; k += 2) {\n            columnTargets.push(k);\n        }\n\n        var columnTargets2 = [];\n        for (var m = 1; m < targetLoopLen; m += 2) {\n            columnTargets2.push(m);\n        }\n\n        // if table, remove from DOM and draw table\n        var table, factorSortedData;\n\n        if (isRotatedFactorsTableUpdate === "highlighter") {\n            factorSortedData = QAV.colorButtonChartData;\n            // unload that heavy property\n            QAV.colorButtonChartData = "";\n        } else {\n            factorSortedData = LOAD.rotationTableSortByFactor(newData);\n        }\n\n        var isUndo = "no";\n        LOAD.createFooter("factorRotationTable2", expVar2, isUndo);\n\n\n        // todo - temporarily disabled update because autoflagging issues\n        if (isRotatedFactorsTableUpdate === "yes") {\n\n\n            table = $(\'#factorRotationTable2\').DataTable();\n            table.clear();\n\n            LOAD.createFooter("factorRotationTable2", expVar2, isUndo);\n\n            table.rows.add(factorSortedData).draw();\n\n        } else if (isRotatedFactorsTableUpdate === "destroy") {\n\n            table = $(\'#factorRotationTable2\').DataTable();\n            table.destroy();\n            $(\'#factorRotationTable2\').empty();\n\n            LOAD.createFooter("factorRotationTable2", expVar2, "no");\n\n            table = $("#factorRotationTable2").DataTable({\n                "retrieve": true,\n                "searching": false,\n                "ordering": true,\n                "info": false,\n                // "scrollY": 600,\n                "scrollCollapse": true,\n                "scrollX": true,\n                "paging": false,\n                "order": [\n                    [orderingColumn, "asc"]\n                ],\n                "data": factorSortedData,\n                "columns": columnHeadersArray,\n                "columnDefs": [{\n                    \'type\': \'highestFactor\',\n                    \'targets\': 2\n                }, {\n                    \'targets\': columnTargets, // [ 4, 6, 8, 10, 12, 14, 16],\n                    \'searchable\': false,\n                    \'orderable\': true,\n                    \'render\': function(data, dataIndex) { // (data, type, full, meta) {\n                        if (\n                            data === "") {\n                            return "";\n                        } else if (shouldFlag === "flag") {\n\n                            return \'<input type="checkbox" class="sigCheckbox" id="d\' + dataIndex + \'" value="\' + data + \'" defaultChecked="\' + (data === \'true\' ? \'checked\' : \'\') + \'"\' + (data === \'true\' ? \'checked="checked"\' : \'\') + \' /><label></label>\';\n                        } else {\n                            return \'<input type="checkbox" class="sigCheckbox" /><label></label>\';\n                        }\n                    }\n                }],\n                "createdRow": function(row, data, dataIndex) {\n                    var rowGroup;\n                    if (rowBackground === "gray") {\n                        rowGroup = data[2].slice(0, 2);\n                        //var rowGroupColor = (rowColorsGray[rowGroup]).toString();\n                        $(\'td\', row).css(\'background-color\', rowColorsGray[rowGroup]);\n                    } else if (rowBackground === "colors") {\n                        rowGroup = data[2].slice(0, 2);\n                        //var rowGroupColor = (rowColorsGray[rowGroup]).toString();\n                        $(\'td\', row).css(\'background-color\', rowColorsRainbow[rowGroup]);\n                    }\n                }\n            });\n        } else {\n\n            // added for color button\n            if (isRotatedFactorsTableUpdate === "highlighter") {\n                table = $(\'#factorRotationTable2\').DataTable();\n                table.destroy();\n                $(\'#factorRotationTable2\').empty();\n                LOAD.createFooter("factorRotationTable2", expVar2, "no");\n            }\n            table = $("#factorRotationTable2").DataTable({\n                "retrieve": true,\n                "searching": false,\n                "ordering": true,\n                "info": false,\n                // "scrollY": 600,\n                "scrollCollapse": true,\n                "scrollX": true,\n                "paging": false,\n                "order": [\n                    [orderingColumn, "asc"]\n                ],\n                "data": factorSortedData,\n                "columns": columnHeadersArray,\n                "columnDefs": [{\n                    \'type\': \'highestFactor\',\n                    \'targets\': 2\n                }, {\n                    \'targets\': columnTargets, // [2, 4, 6, 8, 10, 12, 14],\n                    \'searchable\': false,\n                    \'orderable\': true,\n                    \'render\': function(data, dataIndex) { // (data, type, full, meta) {\n                        if (data === "") {\n                            return \'<input type="checkbox" class="sigCheckbox" /><label></label>\';\n                        } else {\n                            return \'<input type="checkbox" class="sigCheckbox" id="d\' + dataIndex + \'" value="\' + data + \'" defaultChecked="\' + (data === \'true\' ? \'checked\' : \'\') + \'"\' + (data === \'true\' ? \'checked="checked"\' : \'\') + \' /><label></label>\';\n                        }\n                    }\n                }],\n                "createdRow": function(row, data, dataIndex) {\n                    var rowGroup;\n                    if (rowBackground === "gray") {\n                        rowGroup = data[2].slice(0, 2);\n                        //var rowGroupColor = (rowColorsGray[rowGroup]).toString();\n                        $(\'td\', row).css(\'background-color\', rowColorsGray[rowGroup]);\n                    } else if (rowBackground === "colors") {\n                        rowGroup = data[2].slice(0, 2);\n                        //var rowGroupColor = (rowColorsGray[rowGroup]).toString();\n                        $(\'td\', row).css(\'background-color\', rowColorsRainbow[rowGroup]);\n                    }\n                }\n            });\n        }\n    };\n\n\n\n    LOAD.createFooter = function(element, expVar2, isUndo) {\n        var hasFooter = $("#factorRotationTable2 tfoot");\n        var checkFooter = ((hasFooter.text()));\n\n        if (checkFooter.length !== 0 || isUndo === "yes") {\n\n            var table = $(\'#factorRotationTable2\').DataTable();\n\n            for (var g = 0; g < expVar2.length; g++) {\n                var column = table.column(g);\n                $(column.footer()).html(expVar2[g]);\n            }\n        } else {\n            var footer = document.createElement(\'tfoot\');\n            var tr = document.createElement(\'tr\');\n\n            jQuery.each(expVar2, function(i, value) {\n                var th = document.createElement(\'th\');\n                th.innerHTML = value;\n                tr.appendChild(th);\n            });\n            footer.appendChild(tr);\n            document.getElementById(element).appendChild(footer);\n        }\n    };\n\n\n    // ************************************************************  DATA MODEL\n    // **********  undo factor rotation insertion ****************************\n    // ***********************************************************************\n    LOAD.undoFactorRotation = function() {\n\n        // get counter and data values\n        var getSaveRotationArchiveCounter = ROTA.saveRotationArchiveCounter("get");\n\n        // decrement counter\n        if (getSaveRotationArchiveCounter > 1) {\n            ROTA.saveRotationArchiveCounter("decrease");\n        }\n\n        // adjust counter value\n        var retrieveName = getSaveRotationArchiveCounter - 1;\n\n        // retrieve archived data using the now adjusted counter\n        var newData2 = QAV.getState("rotFacStateArrayArchive" + retrieveName);\n\n        // re-set archived data to state matrix ==> "rotFactorStateArray"ip\n        var rotFacStateArrayPrep1 = _.cloneDeep(newData2[0]);\n        QAV.setState("rotFacStateArray", rotFacStateArrayPrep1);\n\n        // pull chart data from retrieved archive array\n        var chartData = newData2[1];\n\n        var explVar = newData2[3];\n        QAV.setState("expVar", explVar);\n\n        var isUndo = "yes";\n\n        LOAD.createFooter("factorRotationTable2", explVar, isUndo);\n\n        // redraw the rotated factors table\n        var table = $(\'#factorRotationTable2\').DataTable();\n        table.clear();\n        table.rows.add(chartData).draw();\n\n        // clear out the 2 factor rotation chart and D3 plot\n        ROTA.reInitializePlotAndChart();\n    };\n\n    // ******************************************************  DATA MODEL\n    // **** chartData ARRAY TO resultsArray OBJECT FOR datatables *******\n    // ******************************************************************\n    LOAD.prepChartDataArray2 = function(chartData) {\n        var arrayLength = chartData.length;\n        var arrayLength2 = chartData[0].length;\n        var resultsArray = [];\n        var respondentNames = QAV.getState("qavRespondentNames");\n        var fSig = QAV.getState("fSigCriterionResults");\n        var rowH2 = QAV.getState("rowH2");\n\n        for (var j = 0; j < arrayLength; j++) {\n            var tempObj2 = [];\n            tempObj2.push(respondentNames[j]);\n\n            for (var m = 0; m < arrayLength2; m++) {\n                tempObj2.push(chartData[j][m]);\n                tempObj2.push(fSig[j][m]);\n            }\n            tempObj2.push(rowH2[j]);\n            resultsArray.push(tempObj2);\n        }\n        // calculate eigenvalues and variance and add to results array\n        var eigenvaluesAndVariance = ROTA.calculateEigenvaluesAndVariance2();\n        resultsArray.push(eigenvaluesAndVariance[0]);\n        return resultsArray;\n    };\n\n    LOAD.rotationTableSortByFactor = function(newData) {\n        var sortingArray = [];\n        var factorSortedData = [];\n        var tempObj;\n        var newData2 = _.cloneDeep(newData);\n\n        for (var i = 0, iLen = newData.length; i < iLen; i++) {\n            tempObj = {};\n            newData2[i].pop();\n            var pullNumbers = _.pick(newData2[i], _.isNumber);\n\n            tempObj.maxValue = _.max(pullNumbers);\n            tempObj.minValue = _.min(pullNumbers);\n            tempObj.sortNum = (i + 1);\n            tempObj.compareValue = (Math.abs(tempObj.maxValue) - Math.abs(tempObj.minValue));\n            if (tempObj.compareValue >= 0) {\n                tempObj.indexValue = _.indexOf(newData[i], tempObj.maxValue);\n                tempObj.subSortValue = tempObj.maxValue;\n            } else {\n                tempObj.indexValue = _.indexOf(newData[i], tempObj.minValue);\n                tempObj.subSortValue = Math.abs(tempObj.minValue);\n            }\n            tempObj.sort = newData[i];\n            sortingArray.push(tempObj);\n        }\n\n        var factorSortedArray = _.cloneDeep(sortingArray);\n        // sort object by two properties\n        factorSortedArray.sort(function(a, b) {\n            var value = a.indexValue - b.indexValue;\n            return value ? value : b.subSortValue - a.subSortValue;\n        });\n\n        var modifiedIndexValue = {\n            1: 1,\n            3: 2,\n            5: 3,\n            7: 4,\n            9: 5,\n            11: 6,\n            13: 7,\n            15: 8\n        };\n\n        var factorGroupNumber, lookUpIndexValue;\n        var subGroupCounter = 0;\n        for (var j = 0, jLen = factorSortedArray.length; j < jLen; j++) {\n            lookUpIndexValue = (factorSortedArray[j].indexValue);\n            if (j === 0 || lookUpIndexValue === factorSortedArray[j - 1].indexValue) {\n                subGroupCounter = subGroupCounter + 1;\n            } else {\n                subGroupCounter = 1;\n            }\n            factorGroupNumber = "F" + modifiedIndexValue[lookUpIndexValue] + "-" + subGroupCounter;\n            factorSortedArray[j].sort.splice(1, 0, factorGroupNumber);\n            factorSortedArray[j].sort.unshift(factorSortedArray[j].sortNum);\n            factorSortedData.push(factorSortedArray[j].sort);\n        }\n        return factorSortedData;\n    };\n\n    // **************************************************************  Data Model\n    // **********  set background colors of factor loading table ****************\n    // **************************************************************************\n    function getRainbowColors() {\n        var rowColorsRainbow = {\n            "F1": "#f7fcf0",\n            "F2": "#e0f3db",\n            "F3": "#ccebc5",\n            "F4": "#a8ddb5",\n            "F5": "#7bccc4",\n            "F6": "#4eb3d3",\n            "F7": "#2b8cbe",\n            "F8": "#9cbbd7"\n        };\n        return rowColorsRainbow;\n    }\n\n    function getGrayColors() {\n        var rowColorsGray = {\n            "F1": "#ffffff",\n            "F2": "#f0f0f0",\n            "F3": "#d9d9d9",\n            "F4": "#bdbdbd",\n            "F5": "#969696",\n            "F6": "#737373",\n            "F7": "#d9d9d9",\n            "F8": "whitesmoke"\n        };\n        return rowColorsGray;\n    }\n\n    // *********************************************************************** view\n    // *****  draw bipolar split rotated factors table using jquery dataTables ****\n    // ****************************************************************************\n\n    function bipolarSplitTableRedraw(headers, results, explVar) {\n\n        // get column ids for table formatting\n        var columnTargets = [];\n        var targetLoopLen = headers.length;\n        for (var k = 4; k < targetLoopLen; k += 2) {\n            columnTargets.push(k);\n        }\n        var columnTargets2 = [];\n        for (var m = 1; m < targetLoopLen; m += 2) {\n            columnTargets2.push(m);\n        }\n\n        // remove previous table and headers from DOM\n        var table = $(\'#factorRotationTable2\').DataTable();\n        table.destroy();\n        $(\'#factorRotationTable2\').empty();\n\n        var isUndo = "no";\n        LOAD.createFooter("factorRotationTable2", explVar, isUndo);\n\n        // get row colors\n        var rowColorsGray = getGrayColors();\n        var rowColorsRainbow = getRainbowColors();\n\n        // get rowbackground and order from DOM user input radio\n        var rowBackground = $("#section6 input[name=state2]:checked").val();\n        var orderingColumn = +($("#section6 input[name=state1]:checked").val());\n\n        // draw new table\n        table = $(\'#factorRotationTable2\').DataTable({\n            "retrieve": true,\n            "searching": false,\n            "ordering": true,\n            "info": false,\n            //"scrollY": 600,\n            // "scrollY": "auto",\n            "scrollCollapse": true,\n            "scrollX": true,\n            "paging": false,\n            "order": [\n                [orderingColumn, "asc"]\n            ],\n            "data": results,\n            "columns": headers,\n            "columnDefs": [{\n                \'type\': \'highestFactor\',\n                \'targets\': 2\n            }, {\n                \'targets\': columnTargets2, // todo - find out if this is working properly\n                \'className\': \'dt-body-right\',\n                \'orderable\': true,\n            }, {\n                \'targets\': [0],\n                \'className\': \'dt-body-center dt-body-name\',\n                \'orderable\': true\n            }, {\n                \'targets\': columnTargets, // [2, 4, 6, 8, 10, 12, 14],\n                \'searchable\': false,\n                \'orderable\': true,\n                \'className\': \'dt-body-right\',\n                \'render\': function(data, dataIndex) { // (data, type, full, meta) {\n                    if (\n                        data === "") {\n                        return \'<input type="checkbox" class="sigCheckbox" /><label></label>\';\n                    } else {\n                        return \'<input type="checkbox" class="sigCheckbox" id="d\' + dataIndex + \'" value="\' + data + \'" defaultChecked="\' + (data === \'true\' ? \'checked\' : \'\') + \'"\' + (data === \'true\' ? \'checked="checked"\' : \'\') + \' /><label></label>\';\n                    }\n                }\n            }],\n            "createdRow": function(row, data, dataIndex) {\n                var rowGroup;\n                if (rowBackground === "gray") {\n                    rowGroup = data[2].slice(0, 2);\n                    //var rowGroupColor = (rowColorsGray[rowGroup]).toString();\n                    $(\'td\', row).css(\'background-color\', rowColorsGray[rowGroup]);\n                } else if (rowBackground === "colors") {\n                    rowGroup = data[2].slice(0, 2);\n                    //var rowGroupColor = (rowColorsGray[rowGroup]).toString();\n                    $(\'td\', row).css(\'background-color\', rowColorsRainbow[rowGroup]);\n                }\n            }\n        });\n    }\n\n}(window.LOAD = window.LOAD || {}, QAV));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,')}});