!function(I){function g(C){if(A[C])return A[C].exports;var n=A[C]={i:C,l:!1,exports:{}};return I[C].call(n.exports,n,n.exports,g),n.l=!0,n.exports}var A={};g.m=I,g.c=A,g.i=function(I){return I},g.d=function(I,A,C){g.o(I,A)||Object.defineProperty(I,A,{configurable:!1,enumerable:!0,get:C})},g.n=function(I){var A=I&&I.__esModule?function(){return I.default}:function(){return I};return g.d(A,"a",A),A},g.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},g.p="",g(g.s=15)}({15:function(module,exports){eval('//Ken-Q Analysis\n//Copyright (C) 2016 Shawn Banasick\n//\n//    This program is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, either version 3 of the License, or\n//    (at your option) any later version.\n\n// JSlint declarations\n/* global numeric, VARIMAX, window, performance, ROTA, QAV, $, resources, document, JQuery, evenRound, UTIL, localStorage, _ */\n\n(function (VARIMAX, QAV, undefined) {\n    \'use strict\';\n\n    VARIMAX.fireVarimaxRotation = function () {\n\n        var getFactorsForRotation = QAV.getState("centroidFactors");\n\n        // archive factor rotation table\n        UTIL.archiveFactorScoreStateMatrixAndDatatable();\n\n        // run rotation\n        var varimaxResults = VARIMAX.doVarimax(getFactorsForRotation);\n\n        // copy the new rotations\n        // var rotFacStateArrayPrep1 = _.cloneDeep(varimaxResults);\n\n        // send to rotFactorStateArray\n        QAV.setState("rotFacStateArray", varimaxResults);\n\n        // prep for chart\n        ROTA.calculateCommunalities(varimaxResults);\n\n        // gets array for fSig testing from LS of calculateCommunalities - sets fSigCriterionResults\n        ROTA.calculatefSigCriterionValues("noFlag");\n\n        // re-draw rotation table\n        var isRotatedFactorsTableUpdate = "destroy";\n        LOAD.drawRotatedFactorsTable2(isRotatedFactorsTableUpdate, "noFlag");\n    };\n\n\n    VARIMAX.doVarimax = function (factorMatrix) {\n        var t0 = performance.now();\n\n        var sumSquares = VARIMAX.calcSumSquares(factorMatrix);\n        var standarizedFactorMatrix = VARIMAX.calcStandardizedFactorMatrix(sumSquares, factorMatrix);\n        var rotatedResults = calculateVarianceForFactorMatrix(standarizedFactorMatrix, sumSquares);\n\n        var language = QAV.getState("language");\n        var appendText = resources[language].translation["Varimax rotation applied"];\n        var appendText2 = resources[language].translation.Undo;\n        // the "varimax called" class is for toggling color of varimax button\n        $("#rotationHistoryList").append(\'<li>\' + appendText + \'<button class="deleteButton  varimaxCalled">\' + appendText2 + \'</button></li>\');\n\n        var t1 = performance.now();\n\n        console.log(\'%c Varimax rotations completed in \' + (t1 - t0).toFixed(0) + \' milliseconds\', \'background: #0c7fd7; color: white\');\n        return rotatedResults;\n    };\n\n    VARIMAX.calcStandardizedFactorMatrix = function (sumSquares, factorMatrix) {\n        // (3722-3727)\n        var standarizedFactorMatrix = [];\n        var arrayFrag1;\n        var temp5;\n        var len2;\n        var temp4;\n        var sqrtSumSquares;\n        var m, k;\n        var loopLen1 = factorMatrix.length;\n\n        for (m = 0; m < loopLen1; m++) {\n            arrayFrag1 = factorMatrix[m];\n            temp5 = [];\n            len2 = factorMatrix[m].length;\n\n            for (k = 0; k < len2; k++) {\n                sqrtSumSquares = evenRound(Math.sqrt(sumSquares[k]), 8);\n                if (sqrtSumSquares !== 0) {\n                    temp4 = evenRound((arrayFrag1[k] / sqrtSumSquares), 8);\n                } else {\n                    temp4 = 0.0;\n                }\n                temp5.push(temp4);\n            }\n            standarizedFactorMatrix.push(temp5);\n        }\n        return standarizedFactorMatrix;\n    };\n\n    VARIMAX.calcSumSquares = function (factorMatrix) {\n        // (3709 - 3714)\n        var temp1, temp3, temp;\n        var sumSquares = [];\n        var loopLen = factorMatrix.length;\n        for (var i = 0, iLen = factorMatrix[0].length; i < iLen; i++) {\n            temp1 = 0;\n            temp3 = 0;\n            for (var j = 0; j < loopLen; j++) {\n                temp = evenRound((factorMatrix[j][i] * factorMatrix[j][i]), 8);\n                temp1 = temp1 + temp;\n            }\n            temp3 = evenRound((temp1), 8);\n            sumSquares.push(temp3);\n        }\n        return sumSquares;\n    };\n\n    // ********************************************************  controller\n    // ***** varimax iteration loop controller ****************************\n    // ***** calclate variance for factor matrix **************************\n    // ********************************************************************\n\n    function calculateVarianceForFactorMatrix(factorMatrix, sumSquares) {\n        // also calls and loops factor adjustment function varimaxIteration\n        var NV; // = 1;  outer big loop counter\n        // var TVNV      // total variance of current loop\n        var TVLT; //  total variance of previous loop used for kickout test\n        var NC;\n        var TV = 0; // total variance\n        var aaArray, bbArray, tvArray;\n        var FN = factorMatrix[0].length;\n        var FFN = FN * FN;\n        var testCondition;\n        var AA, BB, FNBB, AASQ;\n\n        do {\n            if (NV) {\n                factorMatrix = intermediateRotation;\n            }\n\n            tvArray = [];\n            var temp1, temp3, arrayFrag, temp;\n            var i, j;\n            var iLoopLen = factorMatrix.length;\n\n            TVLT = TV;\n\n            // gets sumSquares of new varimaxIteration matrix to check convergence\n            for (i = 0; i < iLoopLen; i++) { // for each factor\n                AA = 0;\n                BB = 0;\n                temp1 = 0;\n                temp3 = 0;\n                arrayFrag = factorMatrix[i];\n                var jLoopLen = arrayFrag.length;\n\n                aaArray = [];\n                bbArray = [];\n                for (j = 0; j < jLoopLen; j++) { // for each sort\n                    temp = evenRound((arrayFrag[j] * arrayFrag[j]), 8); // CC\n                    aaArray.push(evenRound((temp), 8)); // AA\n                    var tempBB = evenRound((temp * temp), 8);\n                    bbArray.push(evenRound((tempBB), 8));\n                }\n                AA = evenRound((VARIMAX.sumArray(aaArray)), 8);\n                BB = evenRound((VARIMAX.sumArray(bbArray)), 8);\n                // FN is number factors, AA is total of sumSquares, BB is square of total of sumSquares, FFN is number factors squared\n                // (3745) \n                FNBB = evenRound((FN * BB), 8);\n                AASQ = evenRound((AA * AA), 8);\n                //TV = evenRound(((FN * BB - AA * AA) / FFN), 8);\n                TV = evenRound(((FNBB - AASQ) / FFN), 8);\n                tvArray.push(TV);\n            }\n\n            TV = evenRound((VARIMAX.sumArray(tvArray)), 8);\n\n            if (!NV) {\n                NV = 1;\n                NC = 0;\n                TVLT = 0;\n            } else {\n                NV = NV + 1;\n            }\n\n            // testing for convergence\n            if ((Math.abs(TV - TVLT)) < 0.00000001) {\n                NC = NC + 1;\n            } else {\n                NC = 0;\n            }\n\n            var intermediateRotation = varimaxIteration(factorMatrix);\n\n            // run no more than 225 iterations\n            testCondition = false;\n            if (NC > 3) {\n                testCondition = true;\n            }\n            if (NV >= 225) {\n                testCondition = true;\n            }\n\n        } while (testCondition === false);\n\n        var results = VARIMAX.unStandardize(factorMatrix, sumSquares);\n\n        return results;\n    }\n\n\n    // ********************************************************  controller\n    // ***** iteration dispatcher  ****************************************\n    // ********************************************************************\n\n    function varimaxIteration(standardizedFactorMatrix) {\n        // each item in 2D matrix\n        var rotatedFactors;\n        var i, j;\n        var loopLen = standardizedFactorMatrix.length;\n\n        for (i = 0; i < loopLen; i++) {\n            for (j = i + 1; j < loopLen; j++) {\n                // sends out for rotation\n                rotatedFactors = varimaxCalculations(standardizedFactorMatrix[i], standardizedFactorMatrix[j]);\n                // subs results into matrix\n                standardizedFactorMatrix[i] = rotatedFactors[0];\n                standardizedFactorMatrix[j] = rotatedFactors[1];\n            }\n        }\n        return standardizedFactorMatrix;\n    }\n\n    // **********************************************************  model\n    // ***** varimax calculator  ***************************************\n    // *****************************************************************\n\n    function varimaxCalculations(factorA, factorB) {\n        var AA = 0.0;\n        var BB = 0.0;\n        var CC = 0.0;\n        var DD = 0.0;\n        var uArray = [];\n        var tArray = [];\n        var ccArray = [];\n        var ddArray = [];\n        var COSP, SINP, testValue, TAN4T;\n        var rotatedFactors, COS4T, SIN4T, line350;\n        var factorALength = factorA.length;\n        var U, tPrep, tPrep2, ccPrep, ddPrep;\n\n\n        for (var i = 0, iLen = factorALength; i < iLen; i++) {\n            // (3776)\n            U = (factorA[i] + factorB[i]) * (factorA[i] - factorB[i]);\n            uArray.push(U);\n            // (3777)\n            tPrep = factorA[i] * factorB[i];\n            // (3778)\n            tPrep2 = tPrep + tPrep;\n            tArray.push(tPrep2);\n            // (3779)\n            ccPrep = (U + tPrep2) * (U - tPrep2);\n            ccArray.push(ccPrep);\n            // (3780)\n            ddPrep = (2 * U * tPrep2);\n            ddArray.push(ddPrep);\n        }\n\n        // (3779)\n        CC = evenRound(VARIMAX.sumArray(ccArray), 17);\n        // (3780)\n        DD = evenRound(VARIMAX.sumArray(ddArray), 17);\n        // (3781)\n        AA = evenRound(VARIMAX.sumArray(uArray), 17);\n        // (3782)\n        BB = evenRound(VARIMAX.sumArray(tArray), 17);\n\n        // (3784-3785)\n        var T = evenRound((DD - evenRound((2 * AA * evenRound((BB / factorALength), 17)), 17)), 17);\n        var B = evenRound((CC - evenRound(((AA * AA - BB * BB) / factorALength), 8)), 8);\n\n        var CospAndSinp = getComparisonOfNumAndDen(T, B);\n        rotatedFactors = doFactorRotations(CospAndSinp, factorA, factorB);\n        return rotatedFactors;\n    }\n\n    function getComparisonOfNumAndDen(T, B) {\n        var TAN4T, SINP, COSP, COS4T, SIN4T, CTN4T;\n        var COS2T, SIN2T, COST, SINT;\n        var shouldSkipRotation = false;\n\n        if (T < B) {\n            TAN4T = evenRound((Math.abs(T) / Math.abs(B)), 5);\n            if (TAN4T < 0.00116) {\n                if (B >= 0) {\n                    shouldSkipRotation = true;\n                    return [SINP, COSP, shouldSkipRotation];\n                } else {\n                    SINP = 0.7071066;\n                    COSP = 0.7071066;\n                    return [SINP, COSP, shouldSkipRotation];\n                }\n            } else {\n                // variables cascade to below\n                COS4T = evenRound((1.0 / evenRound(Math.sqrt(1.0 + TAN4T * TAN4T), 8)), 8);\n                SIN4T = evenRound((TAN4T * COS4T), 8);\n            }\n        } else if (T === B) {\n            if ((T + B) < 0.00116) {\n                shouldSkipRotation = true;\n                return [SINP, COSP, shouldSkipRotation];\n            } else {\n                // variables cascade to below\n                COS4T = 0.7071066;\n                SIN4T = 0.7071066;\n            }\n        } else { // case (T > B)\n            CTN4T = evenRound((Math.abs(T / B)), 5);\n            if (CTN4T < 0.00116) {\n                // variables cascade to below\n                COS4T = 0.0;\n                SIN4T = 1.0;\n            } else {\n                // variables cascade to below\n                SIN4T = evenRound((1.0 / evenRound(Math.sqrt(1.0 + CTN4T * CTN4T), 8)), 8);\n                COS4T = evenRound((CTN4T * SIN4T), 8);\n            }\n        }\n\n        // continue with casecade values to determine COS theta and SIN theta\n        COS2T = evenRound(Math.sqrt(((1.0 + COS4T) / 2.0)), 8);\n        SIN2T = evenRound(SIN4T / (2.0 * COS2T), 8);\n        COST = evenRound(Math.sqrt(((1.0 + COS2T) / 2.0)), 8);\n        SINT = evenRound(SIN2T / (2.0 * COST), 8);\n\n        // determine COS phi and SIN phi\n        if (B <= 0) {\n            COSP = evenRound((0.7071066 * COST + 0.7071066 * SINT), 8);\n            SINP = evenRound(Math.abs((0.7071066 * COST - 0.7071066 * SINT)), 8);\n        } else {\n            COSP = COST;\n            SINP = SINT;\n        }\n        // check T value\n        if (T <= 0) {\n            SINP = -SINP;\n        }\n        return [SINP, COSP, shouldSkipRotation];\n    }\n\n\n    //*********************************************************\n    //******* Factor Rotation function ************************\n    //*********************************************************\n\n    function doFactorRotations(CospAndSinp, factorA, factorB) {\n        var shouldSkipRotation = CospAndSinp[2];\n        if (shouldSkipRotation) {\n            var originalFactors = [factorA, factorB];\n            return originalFactors;\n        } else {\n            var resultsArrayFactorA = [];\n            var resultsArrayFactorB = [];\n            var i, AA, BB, rotatedFactors;\n            var iLoopLen = factorA.length;\n            var SINP = CospAndSinp[0];\n            var COSP = CospAndSinp[1];\n\n            for (i = 0; i < iLoopLen; i++) {\n                AA = evenRound((factorA[i] * COSP + factorB[i] * SINP), 8);\n                resultsArrayFactorA.push(AA);\n\n                BB = evenRound((-factorA[i] * SINP + factorB[i] * COSP), 8);\n                resultsArrayFactorB.push(BB);\n            }\n            rotatedFactors = [resultsArrayFactorA, resultsArrayFactorB];\n            return rotatedFactors;\n        }\n    }\n\n    //**********************************************************   model\n    //******* de-normalize rotation results ****************************\n    //******************************************************************\n\n    VARIMAX.unStandardize = function (standardizedResults, sumSquares) {\n        var results = [];\n        var nLoopLen = standardizedResults.length;\n        var n, p;\n        var arrayFrag, pLoopLen, newArrayFrag, arrayItem, resultsTransposed;\n        var crit;\n\n        for (n = 0; n < nLoopLen; n++) {\n\n            arrayFrag = standardizedResults[n];\n            newArrayFrag = [];\n            pLoopLen = arrayFrag.length;\n\n            crit = 0;\n            for (p = 0; p < pLoopLen; p++) {\n                arrayItem = 0;\n                arrayItem = (evenRound(arrayFrag[p], 5) * evenRound(Math.sqrt(sumSquares[p]), 5));\n                newArrayFrag.push(evenRound((arrayItem), 5));\n                crit = crit + arrayItem * Math.abs(arrayItem);\n            }\n\n            // invert (reflect) mostly negative factors\n            if (crit < 0) {\n                var q;\n                var qLoopLen = newArrayFrag.length;\n                for (q = 0; q < qLoopLen; q++) {\n                    newArrayFrag[q] = -newArrayFrag[q];\n                }\n            }\n            results.push(newArrayFrag);\n        }\n\n        resultsTransposed = _.zip.apply(_, results);\n\n        return resultsTransposed;\n    };\n\n    //***********************************************************\n    //************** helper functions ***************************\n    //***********************************************************\n\n    VARIMAX.sumArray = function (array) {\n        return (_.reduce(array, function (sum, num) {\n            return sum + num;\n        }));\n    };\n\n}(window.VARIMAX = window.VARIMAX || {}, QAV));//# sourceMappingURL=data:application/json;charset=utf-8;base64,')}});