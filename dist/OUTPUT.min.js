!function(g){function I(C){if(A[C])return A[C].exports;var t=A[C]={i:C,l:!1,exports:{}};return g[C].call(t.exports,t,t.exports,I),t.l=!0,t.exports}var A={};I.m=g,I.c=A,I.i=function(g){return g},I.d=function(g,A,C){I.o(g,A)||Object.defineProperty(g,A,{configurable:!1,enumerable:!0,get:C})},I.n=function(g){var A=g&&g.__esModule?function(){return g.default}:function(){return g};return I.d(A,"a",A),A},I.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},I.p="",I(I.s=8)}({8:function(module,exports){eval('// Ken-Q Analysis\n//Copyright (C) 2016 Shawn Banasick\n//\n//    This program is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, either version 3 of the License, or\n//    (at your option) any later version.\n\n// JSlint declarations\n/* global resources, d3, VIEW, d3_save_svg, CORR, alasql, window, QAV, $, document, evenRound, UTIL, _  */\n\n(function(OUTPUT, QAV, undefined) {\n    \'use strict\';\n    //     DOWNLOAD FUNCTIONS\n\n    // todo - bug fix escape codes for "\'" in statement listing\n    OUTPUT.generateOutput = function pushProjectHistoryToOutputArray() {\n        var sheetNames = [];\n        var output = [];\n\n        var language = QAV.getState("language");\n        var appendText1 = resources[language].translation["Project Overview"];\n        var appendText2 = resources[language].translation.Undo;\n        var appendText3 = resources[language].translation["Analysis Completed on"];\n        var appendText4 = resources[language].translation["Total Number of Statements"];\n        var appendText5 = resources[language].translation["Q-sort Triangle Shape"];\n        var appendText6 = resources[language].translation["Total Number of Q-sorts"];\n        var appendText7 = resources[language].translation["Analysis Process"];\n        var appendText8 = resources[language].translation["Project name"];\n        var versionNum = resources[language].translation.versionNumber;\n\n        var newSheet = {\n            sheetid: appendText1,\n            headers: false\n        };\n        sheetNames.push(newSheet);\n\n        // no ala download data\n        var sheetNamesXlsx = [];\n        sheetNamesXlsx.push(appendText1);\n        var dataXlsx = [];\n\n        var settings = [];\n        var spacer = ["", ""];\n\n        var projectName = QAV.getState("qavProjectName");\n        var projectNameArray = [appendText8, projectName];\n        settings.push(spacer, projectNameArray, spacer);\n        dataXlsx.push(spacer, projectNameArray, spacer);\n\n        var totalStatements = QAV.getState("qavOriginalSortSize");\n        var totalNumberStatementsArray = [appendText4, totalStatements];\n        settings.push(totalNumberStatementsArray, spacer);\n        dataXlsx.push(totalNumberStatementsArray, spacer);\n\n        var sortTriangleShape = QAV.getState("qavSortTriangleShape");\n        var sortTriangleShape2 = sortTriangleShape.join();\n        var sortTriangleShapeArray = [appendText5, sortTriangleShape2];\n        settings.push(sortTriangleShapeArray, spacer);\n        dataXlsx.push(sortTriangleShapeArray, spacer);\n\n        var totalSorts = QAV.getState("qavTotalNumberSorts");\n        var totalSortsArray = [appendText6, totalSorts];\n        settings.push(totalSortsArray, spacer);\n        dataXlsx.push(totalSortsArray, spacer);\n\n        var list = document.getElementById("rotationHistoryList");\n        var items = list.childNodes;\n        var temp,\n            temp1,\n            temp2;\n\n        settings.push([appendText7, ""]);\n        dataXlsx.push([appendText7, ""]);\n\n        // pull list items and push to array for output\n        for (var i = 0; i < items.length; i++) {\n            var listArray1 = [];\n            temp = i + 1;\n            temp1 = items[i].textContent;\n            temp2 = temp1.replace(appendText2, "");\n            listArray1.push(temp, temp2);\n            settings.push(listArray1);\n            dataXlsx.push(listArray1);\n        }\n\n        var outputLanguage = QAV.getState("language");\n        settings.push(spacer, ["Language", outputLanguage]);\n        dataXlsx.push(spacer, ["Language", outputLanguage]);\n\n        var timeCompleted = UTIL.currentDate1() + " at " + UTIL.currentTime1();\n        settings.push(spacer, [\n            appendText3 + timeCompleted,\n            ""\n        ]);\n\n        dataXlsx.push(spacer, [\n            appendText3 + timeCompleted,\n            ""\n        ]);\n\n        settings.push(spacer, ["Version Number: ", versionNum]);\n        dataXlsx.push(spacer, ["Version Number: ", versionNum]);\n\n        var colSizes = [\n            [{\n                wch: 40\n            }, {\n                wch: 70\n            }]\n        ];\n\n        var outputData = [];\n        outputData.push(dataXlsx);\n\n        output.push(settings);\n        pushStatementsToOutputArray(sheetNames, output, outputData, sheetNamesXlsx, colSizes);\n    };\n\n    function pushStatementsToOutputArray(sheetNames, output, outputData, sheetNamesXlsx, colSizes) {\n        var statements = QAV.getState("qavCurrentStatements");\n        var language = QAV.getState("language");\n        var appendText1 = resources[language].translation.Statements;\n        var appendText2 = resources[language].translation["Statement Number"];\n\n        var newSheet = {\n            sheetid: appendText1,\n            header: true\n        };\n        sheetNamesXlsx.push(appendText1);\n\n        var maxStatementLength = 0;\n        var arrayOfStatements = [];\n        arrayOfStatements.push([\n            "", ""\n        ], [appendText2, appendText1]);\n        for (var ii = 0, iiLen = statements.length; ii < iiLen; ii++) {\n            var tempArray1 = [];\n            tempArray1.push((ii + 1), statements[ii]);\n            arrayOfStatements.push(tempArray1);\n            var stringLength = statements[ii].length;\n            if (stringLength > maxStatementLength) {\n                maxStatementLength = stringLength;\n            }\n        }\n        outputData.push(arrayOfStatements);\n\n        var columns = [{\n            wch: 10\n        }, {\n            wch: maxStatementLength\n        }];\n        colSizes.push(columns);\n        QAV.setState("maxStatementLength", maxStatementLength);\n\n        pushSortsToOutputArray(sheetNames, output, outputData, sheetNamesXlsx, colSizes);\n    }\n\n    function pushSortsToOutputArray(sheetNames, output, outputData, sheetNamesXlsx, colSizes) {\n\n        var language = QAV.getState("language");\n        var appendText2 = resources[language].translation.Respondent;\n        var appendText3 = resources[language].translation.Mean;\n        var appendText4 = resources[language].translation["Standard Deviation"];\n        var appendText6 = resources[language].translation["Q-sorts"];\n\n        sheetNamesXlsx.push(appendText6);\n\n        var sortsAsNumbers = QAV.getState("sortsAsNumbers");\n        var respondentNames = QAV.getState("qavRespondentNames");\n        var dataArray = [];\n\n        // set up column widths\n        var columns = [{\n            wch: 15\n        }];\n        for (var ii = 0, iiLen = sortsAsNumbers[0].length + 2; ii < iiLen; ii++) {\n            columns.push({\n                wch: 5\n            });\n        }\n        colSizes.push(columns);\n\n        var stddev,\n            statementSort;\n        // create sheet header\n        var headerArray = [appendText2];\n        for (var jj = 0, jjLen = sortsAsNumbers[0].length; jj < jjLen; jj++) {\n            statementSort = "S" + (jj + 1);\n            headerArray.push(statementSort);\n        }\n        headerArray.push(appendText3, appendText4);\n        dataArray.push([\n            "", ""\n        ], [\n            appendText6, ""\n        ], [\n            "", ""\n        ], headerArray);\n\n        // push in sorts, means, and standard devs\n        for (var kk = 0, kkLen = sortsAsNumbers.length; kk < kkLen; kk++) {\n            var average3 = evenRound((UTIL.average(sortsAsNumbers[kk])), 3);\n            stddev = evenRound((UTIL.standardDeviation(sortsAsNumbers[kk])), 3);\n            sortsAsNumbers[kk].unshift(respondentNames[kk]);\n            sortsAsNumbers[kk].push(average3, stddev);\n            dataArray.push(sortsAsNumbers[kk]);\n        }\n        outputData.push(dataArray);\n\n        QAV.setState("freeDistributionArray", dataArray);\n\n        pushCorrelationArray(sheetNames, output, outputData, sheetNamesXlsx, colSizes);\n    }\n\n    function pushCorrelationArray(sheetNames, output, outputData, sheetNamesXlsx, colSizes) {\n\n        var language = QAV.getState("language");\n        var appendText1 = resources[language].translation["Correlation matrix"];\n        var appendText2 = resources[language].translation["between Q-sorts"];\n\n        sheetNamesXlsx.push(appendText1);\n\n        var correlationTableArrayFormatted3 = QAV.getState("correlationTableArrayFormatted");\n\n        // get max respondent name length\n        var respondentNameMaxLength = 0;\n        for (var i = 0, iLen = correlationTableArrayFormatted3[0].length; i < iLen; i++) {\n            var temp1 = correlationTableArrayFormatted3[0][i].length;\n            if (temp1 > respondentNameMaxLength) {\n                respondentNameMaxLength = temp1;\n            }\n        }\n        if (respondentNameMaxLength < 5) {\n            respondentNameMaxLength = 5;\n        }\n\n        // set up column spacing\n        var columns = [];\n        for (var j = 0, jLen = (correlationTableArrayFormatted3[0].length + 1); j < jLen; j++) {\n            columns.push({\n                wch: respondentNameMaxLength\n            });\n        }\n        colSizes.push(columns);\n\n        correlationTableArrayFormatted3.unshift([\n            "", ""\n        ], [appendText1 + appendText2], ["", ""]);\n        outputData.push(correlationTableArrayFormatted3);\n\n        pushUnrotatedFactorsTableToOutputArray(sheetNames, output, outputData, sheetNamesXlsx, colSizes);\n    }\n\n    function pushUnrotatedFactorsTableToOutputArray(sheetNames, output, outputData, sheetNamesXlsx, colSizes) {\n        var factorMatrixTransposed, i, j, k, m, temp, tempA, temp1, temp2, temp2A;\n        var newSheet, expVar, centroidsArray, tempObj, respondentNames, typeOfFactor, numFactorsExtracted;\n        var language = QAV.getState("language");\n        var appendText1 = resources[language].translation["Unrotated Factor Matrix"];\n        var appendText2 = resources[language].translation.Eigenvalues;\n        var appendText3 = resources[language].translation.Factor;\n        var appendText4 = resources[language].translation.Respondent;\n\n        respondentNames = QAV.respondentNames;\n        factorMatrixTransposed = QAV.getState("eigenVecs");\n        temp = QAV.getState("eigenValuesSorted");\n        temp2 = QAV.getState("eigenValuesAsPercents");\n        temp1 = QAV.getState("factorLabels");\n        expVar = QAV.getState("expVarCentroid");\n        numFactorsExtracted = QAV.getState("numFactorsExtracted");\n        typeOfFactor = QAV.getState("typeOfFactor");\n\n        sheetNamesXlsx.push(appendText1);\n\n        // set excel column widths\n        var columns = [{\n            wch: 20\n        }];\n        for (var iii = 0, iiiLen = temp1.length; iii < iiLen; iii++) {\n            columns.push({\n                wch: 8\n            });\n        }\n        colSizes.push(columns);\n\n        // add labels to Unrotated factor data\n        if (typeOfFactor === "PCA") {\n\n            temp2 = temp2.slice(0, numFactorsExtracted);\n            temp = temp.slice(0, numFactorsExtracted);\n\n            // conform PCA to legacy centroid data structure\n            for (m = 0; m < (respondentNames.length - 1); m++) {\n                factorMatrixTransposed[m].unshift(respondentNames[m + 1]);\n            }\n            temp1.unshift("");\n            factorMatrixTransposed.unshift(temp1);\n\n            // add eigenvals to match data structure\n            temp.unshift(appendText2);\n            factorMatrixTransposed.push([], temp);\n            temp2.unshift("");\n            factorMatrixTransposed.push(temp2);\n        } else {\n            factorMatrixTransposed = QAV.getState("factorMatrixTransposed");\n            factorMatrixTransposed.push(expVar);\n        }\n\n        // change after deleting alasql code\n        var unrotatedFactors = _.cloneDeep(factorMatrixTransposed);\n        unrotatedFactors[0][0] = (appendText4);\n\n        for (var ii = 1, iiLen = unrotatedFactors.length - 1; ii < iiLen; ii++) {\n            for (var jj = 1, jjLen = unrotatedFactors[ii].length; jj < jjLen; jj++) {\n                unrotatedFactors[ii][jj] = evenRound(unrotatedFactors[ii][jj], 4);\n            }\n        }\n        unrotatedFactors.unshift([\n            "", ""\n        ], [appendText1], ["", ""]);\n        outputData.push(unrotatedFactors);\n\n        pushCumulativeCommunalitiesMaxtrixToOutputArray(sheetNames, output, factorMatrixTransposed, outputData, sheetNamesXlsx, colSizes);\n    }\n\n    function pushCumulativeCommunalitiesMaxtrixToOutputArray(sheetNames, output, factorMatrixTransposed, outputData, sheetNamesXlsx, colSizes) {\n        var newSheet, cumulCommMatrix9, explnVarRow, responderHeadersRow;\n        var i, j, k, temp1, temp2, respondentName;\n        var language = QAV.getState("language");\n        var appendText1 = resources[language].translation["Cumul Comm Matrix"];\n        var appendText2 = resources[language].translation["cumulative % explained variance"];\n        var appendText4 = resources[language].translation.Respondent;\n        var appendText5 = resources[language].translation["Cumulative Communalities Matrix"];\n\n        sheetNamesXlsx.push(appendText1);\n\n        // isolate data\n        cumulCommMatrix9 = _.cloneDeep(factorMatrixTransposed);\n\n        // set excel column widths\n        var columns = [{\n            wch: 30\n        }];\n        for (var ii = 0, iiLen = cumulCommMatrix9[0].length; ii < iiLen; ii++) {\n            columns.push({\n                wch: 8\n            });\n        }\n        colSizes.push(columns);\n\n        explnVarRow = cumulCommMatrix9.pop();\n        // get rid of eigenvalue row\n        cumulCommMatrix9.pop();\n        responderHeadersRow = cumulCommMatrix9.shift();\n        // add respondent names and do rounding\n        for (i = 0; i < cumulCommMatrix9.length; i++) {\n            respondentName = cumulCommMatrix9[i].shift();\n            for (j = 0; j < cumulCommMatrix9[i].length; j++) {\n                if (j === 0) {\n                    temp1 = cumulCommMatrix9[i][j];\n                    cumulCommMatrix9[i][j] = evenRound((temp1 * temp1), 4);\n                } else {\n                    temp1 = cumulCommMatrix9[i][j];\n                    cumulCommMatrix9[i][j] = evenRound(((temp1 * temp1) + cumulCommMatrix9[i][(j - 1)]), 4);\n                }\n            }\n            cumulCommMatrix9[i].unshift(respondentName);\n        }\n        cumulCommMatrix9.unshift(responderHeadersRow);\n        // add cumulative explained variance\n        explnVarRow.shift();\n        for (k = 0; k < explnVarRow.length; k++) {\n            if (k === 0) {} else {\n                temp2 = explnVarRow[k];\n                explnVarRow[k] = explnVarRow[k] + explnVarRow[(k - 1)];\n            }\n        }\n        explnVarRow.unshift(appendText2);\n        cumulCommMatrix9.push(explnVarRow);\n        output.push(cumulCommMatrix9);\n        // format for excel\n        cumulCommMatrix9[0][0] = appendText4;\n        cumulCommMatrix9.unshift([\n            "", ""\n        ], [appendText5], ["", ""]);\n        outputData.push(cumulCommMatrix9);\n\n        pushRotatedFactorsArrayToOutputArray(sheetNames, output, outputData, sheetNamesXlsx, colSizes);\n    }\n\n    //  AKA factor loadings table\n    function pushRotatedFactorsArrayToOutputArray(sheetNames, output, outputData, sheetNamesXlsx, colSizes) {\n        var results = QAV.getState("results");\n        var language = QAV.getState("language");\n        var appendText1 = resources[language].translation.Loadings;\n        var appendText2 = resources[language].translation.Flagged;\n        var appendText3 = resources[language].translation["Factor Matrix with Defining Sorts Flagged"];\n\n        sheetNamesXlsx.push(appendText1);\n\n        var formattedResults = [];\n        var jLoopLen = results[0].length;\n        var i, j;\n        var iLoopLen = results.length;\n        var temp;\n        var tempArray = [];\n\n        var headerRowFromCurrentTable = $(\'#factorRotationTable2 thead tr\')[0];\n        $.each(headerRowFromCurrentTable.cells, function(i, v) {\n            var temp5 = v.textContent;\n            tempArray.push(temp5);\n        });\n        formattedResults.push(tempArray);\n\n        // resort the array\n        results.sort(function(a, b) {\n            return a[0] - b[0];\n        });\n\n        for (i = 0; i < iLoopLen; i++) {\n            for (j = 0; j < jLoopLen; j++) {\n                temp = results[i][j];\n                if (temp === "true") {\n                    results[i][j] = appendText2;\n                } else if (temp === "false") {\n                    results[i][j] = "";\n                } else if (j !== 0 && !isNaN(temp)) {\n                    results[i][j] = evenRound((temp), 4);\n                }\n            }\n            formattedResults.push(results[i]);\n        }\n        var expVar = QAV.getState("expVar");\n        formattedResults.push(expVar);\n\n        // set excel column widths\n        var columns = [{\n            wch: 20\n        }];\n        for (var ii = 0, iiLen = formattedResults[0].length; ii < iiLen; ii++) {\n            columns.push({\n                wch: 8\n            });\n        }\n        colSizes.push(columns);\n\n        output.push(formattedResults);\n\n        formattedResults.unshift([\n            "", ""\n        ], [appendText3], ["", ""]);\n        outputData.push(formattedResults);\n        pushFreeDistributionDataToOutputArray(sheetNames, output, outputData, sheetNamesXlsx, colSizes);\n    }\n\n    function pushFreeDistributionDataToOutputArray(sheetNames, output, outputData, sheetNamesXlsx, colSizes) {\n        var language = QAV.getState("language");\n        var appendText1 = resources[language].translation["Free Dist"];\n        var appendText2 = resources[language].translation.Respondent;\n        var appendText3 = resources[language].translation.Mean;\n        var appendText4 = resources[language].translation["Standard Deviation"];\n        var appendText5 = resources[language].translation["Free Distribution Data Results"];\n        var qavCurrentStatements = QAV.getState("qavCurrentStatements");\n\n        var newSheet = {\n            sheetid: appendText1,\n            headers: false\n        };\n        sheetNames.push(newSheet);\n        sheetNamesXlsx.push(appendText1);\n\n        var columns = [{\n            wch: 20\n        }, {\n            wch: 10\n        }, {\n            wch: 10\n        }];\n        colSizes.push(columns);\n\n        var freeDistributionArray = QAV.getState("freeDistributionArray");\n\n        freeDistributionArray = freeDistributionArray.slice(3);\n        var freeDistributionData = [];\n        var cutLength = freeDistributionArray[0].length - 3;\n        for (var i = 0, iLen = freeDistributionArray.length; i < iLen; i++) {\n            var tempCut = freeDistributionArray[i].splice(1, cutLength);\n            freeDistributionData.push(freeDistributionArray[i]);\n        }\n        freeDistributionData.unshift(["", ""], [appendText5], ["", ""]);\n        outputData.push(freeDistributionData);\n        pushFactorsToOutputArray(sheetNames, output, outputData, sheetNamesXlsx, colSizes);\n    }\n\n    function pushFactorsToOutputArray(sheetNames, output, outputData, sheetNamesXlsx, colSizes) {\n\n        var language = QAV.getState("language");\n        var appendText1 = resources[language].translation["Sorts Weight"];\n        var appendText2 = resources[language].translation["Sorts Corr"];\n        var appendText3 = resources[language].translation["Statement Number"];\n        var appendText4 = resources[language].translation.Statement;\n        var appendText5 = resources[language].translation["Z-score"];\n        var appendText6 = resources[language].translation["Sort Values"];\n\n        var analysisOutput2 = QAV.getState("analysisOutput");\n        var analysisOutput = _.cloneDeep(analysisOutput2);\n        var sigSortsArray = QAV.getState("sigSortsArray");\n        var sortsAsNumbers = QAV.getState("sortsAsNumbers");\n        var qavRespondentNames = QAV.getState("qavRespondentNames");\n        var correlationTableArrayFormatted2 = QAV.getState("correlationTableArrayFormatted");\n        var userSelectedFactors = QAV.getState("userSelectedFactors");\n        var sortWeights = QAV.getState("sortWeights");\n\n        // to hold data in QAV until later insertion into output results - to match PQMethod order\n        var factorWeightFactorArrayHolder = [];\n        var miniCorrelationArrayHolder = [];\n        var synFactorArray1Holder = [];\n        var synFactorArray1 = [];\n        var sheetNamesHolder1 = [];\n        var sheetNamesHolder2 = [];\n        var sheetNamesHolder3 = [];\n\n        for (var i = 0; i < analysisOutput.length; i++) {\n            var temp1 = {};\n            var temp1a = {};\n            var temp1b = {};\n\n            temp1a.sheetid = sigSortsArray[i]["Factor Number"] + appendText1;\n            temp1a.header = true;\n            sheetNamesHolder1.push(temp1a);\n\n            temp1b.sheetid = sigSortsArray[i]["Factor Number"] + appendText2;\n            temp1b.header = true;\n            sheetNamesHolder2.push(temp1b);\n\n            temp1.sheetid = sigSortsArray[i]["Factor Number"];\n            temp1.header = true;\n            sheetNamesHolder3.push(temp1);\n        }\n\n        QAV.setState("sheetNamesHolder1", sheetNamesHolder1);\n        QAV.setState("sheetNamesHolder2", sheetNamesHolder2);\n        QAV.setState("sheetNamesHolder3", sheetNamesHolder3);\n\n        // pull raw sorts for factor tables\n        var rawSorts = [];\n        for (var p = 0; p < sigSortsArray.length; p++) {\n            var tempArray = [];\n            for (var r = 0; r < sigSortsArray[p].SigSorts.length; r++) {\n                var sigSort = sigSortsArray[p].SigSorts[r];\n                var rawSortIndex = qavRespondentNames.indexOf(sigSort);\n                var rawSortValues = sortsAsNumbers[rawSortIndex];\n                tempArray.push(rawSortValues);\n            }\n            rawSorts.push(tempArray);\n        }\n\n        // for each factor check get a sigSort (if another remains)\n        // get the raw sort for that specific sigSort\n        // read that sigSorts raw sort data into testObj\n        var compositeFactorMasterArray = [];\n        var matchCount = [];\n        //  FOR EACH FACTOR LOOP\n        for (var j = 0; j < analysisOutput.length; j++) {\n\n            // FACTOR WEIGHTS TABLES STARTS FROM HERE\n            var factorWeightFactorArray = [\n                ["Q-Sort", "Weight"]\n            ];\n            var factorWeightName = userSelectedFactors[j];\n            for (var w = 0; w < sortWeights.length; w++) {\n                var factorWeightTempArray = [];\n                if (sortWeights[w][0] === factorWeightName) {\n                    factorWeightTempArray.push(sortWeights[w][1], sortWeights[w][3]);\n                    factorWeightFactorArray.push(factorWeightTempArray);\n                }\n            }\n            // output.push(factorWeightFactorArray);\n            factorWeightFactorArrayHolder.push(factorWeightFactorArray);\n\n\n            // FACTOR SCORE MINI CORRELATION TABLES STARTS FROM HERE\n\n            // loop through sigSortsArray to get this factor\'s sig Sorts\n            var miniSortsID = userSelectedFactors[j];\n            var miniCorrelationFactorsArray = [];\n            for (var t = 0; t < sigSortsArray.length; t++) {\n                if (sigSortsArray[t]["Factor Number"] === miniSortsID) {\n                    miniCorrelationFactorsArray.push(sigSortsArray[t].SigSorts);\n                }\n            }\n\n            // pull correlations from table\n            var miniCorrelationArray = [];\n            var miniCorrelationHeaderArray = ["Q-Sort"];\n            var miniCorrelationHeaderIndex = correlationTableArrayFormatted2[0];\n\n            // loop through all sig Sorts\n            for (var t3 = 0; t3 < miniCorrelationFactorsArray[0].length; t3++) {\n\n                miniCorrelationHeaderArray.push(miniCorrelationFactorsArray[0][t3]);\n\n                // loop through correlation table array\n                for (var t1 = 0; t1 < correlationTableArrayFormatted2.length; t1++) {\n\n                    var tempArrayT1 = [];\n\n                    // find row for  the sig sorts, then push data\n                    if (correlationTableArrayFormatted2[t1][0] === miniCorrelationFactorsArray[0][t3]) {\n\n                        // push name into left column\n                        tempArrayT1.push(miniCorrelationFactorsArray[0][t3]);\n\n                        // cycle through row to find push data for all sigSorts\n                        for (var t2 = 0; t2 < miniCorrelationFactorsArray[0].length; t2++) {\n                            var index = miniCorrelationHeaderIndex.indexOf(miniCorrelationFactorsArray[0][t2]);\n                            tempArrayT1.push(correlationTableArrayFormatted2[t1][index]);\n                        }\n                        miniCorrelationArray.push(tempArrayT1);\n                    }\n\n                }\n            }\n            miniCorrelationArray.unshift(miniCorrelationHeaderArray);\n\n            // output.push(miniCorrelationArray);\n            miniCorrelationArrayHolder.push(miniCorrelationArray);\n\n            // SYNTHETIC FACTOR OUTPUT STARTS FROM HERE\n            // convert arrays to object\n            var synFactorArray = [];\n            var matchCountArray = [];\n            var compositeFactorArray = [];\n\n            // simul calc two md arrays - one for tables, one for match counts\n            for (var m = 0, mLen = analysisOutput[0].length; m < mLen; m++) {\n                // initialize and empty temp objs and arrays\n                var tempObj = {};\n                var tempObj5 = {};\n                var matchSortValue = [];\n                var matchingCounter = 0;\n                var compositeFactorTempArray = [];\n\n                tempObj5.indexer = analysisOutput[j][m].statement;\n                tempObj5.matchSortValue = analysisOutput[j][m].sortValue;\n                tempObj5.zScore = analysisOutput[j][m].zScore;\n                var testValue = analysisOutput[j][m].sortValue;\n\n                tempObj[appendText3] = analysisOutput[j][m].statement;\n                tempObj[appendText4] = analysisOutput[j][m].sortStatement;\n                tempObj[appendText5] = analysisOutput[j][m].zScore;\n                tempObj[appendText6] = analysisOutput[j][m].sortValue;\n\n                // set up new output array\n                compositeFactorTempArray.push(analysisOutput[j][m].statement, analysisOutput[j][m].sortStatement, analysisOutput[j][m].zScore, analysisOutput[j][m].sortValue);\n\n                for (var s = 0, sLen = rawSorts[j].length; s < sLen; s++) {\n                    tempObj["Raw Sort " + sigSortsArray[j].SigSorts[s]] = rawSorts[j][s][m];\n                    // add to new output array\n                    compositeFactorTempArray.push(rawSorts[j][s][m]);\n                    // matchSortValue.push(rawSorts[j][s][m]);\n                    if (testValue === rawSorts[j][s][m]) {\n                        matchingCounter++;\n                    }\n                } // pushing in raw sort vals\n                tempObj5.matchingCounts = matchingCounter;\n                tempObj5.matchingCountsPercent = parseInt((matchingCounter / sLen * 100), 10);\n                // tempObj5.matchSortValue = matchSortValue;\n                matchCountArray.push(tempObj5);\n                synFactorArray.push(tempObj);\n                // add to new output array\n                compositeFactorArray.push(compositeFactorTempArray);\n            } // pushing in q-sort loadings\n            // add to new output Master array\n            compositeFactorMasterArray.push(compositeFactorArray);\n            matchCount.push(matchCountArray); // push in factor arrays\n            synFactorArray1 = synFactorArray.slice(0);\n\n            synFactorArray1.sort(function(a, b) {\n                if (b[appendText5] === a[appendText5]) {\n                    return b[appendText3] - a[appendText3];\n                } else {\n                    return b[appendText5] - a[appendText5];\n                }\n            });\n\n            // output.push(synFactorArray1);\n            synFactorArray1Holder.push(synFactorArray1);\n        }\n\n        QAV.setState("factorWeightFactorArrayHolder", factorWeightFactorArrayHolder);\n        QAV.setState("miniCorrelationArrayHolder", miniCorrelationArrayHolder);\n        QAV.setState("synFactorArray1Holder", synFactorArray1Holder);\n        QAV.setState("matchCount", matchCount);\n        QAV.setState("compositeFactorMasterArray", compositeFactorMasterArray);\n\n        pushFactorScoreComparisonRanksTableToOutputArray(sheetNames, output, outputData, sheetNamesXlsx, colSizes);\n    }\n\n    function pushFactorScoreComparisonRanksTableToOutputArray(sheetNames, output, outputData, sheetNamesXlsx, colSizes) {\n        var language = QAV.getState("language");\n        var appendText1 = resources[language].translation["Factor Score Ranks"];\n        var appendText2 = resources[language].translation.Factors;\n        var appendText3 = resources[language].translation["Statement Number"];\n        var appendText4 = resources[language].translation.Statement;\n        var appendText5 = resources[language].translation["Z-score"];\n        var appendText6 = resources[language].translation["Factor Scores with Corresponding Ranks"];\n        var appendText7 = resources[language].translation.Rank;\n        var appendText8 = resources[language].translation["Sort Values"];\n\n        var synFactorArray1 = QAV.getState("synFactorArray1Holder");\n        var userSelectedFactors = QAV.getState("userSelectedFactors");\n        var tempArray1,\n            rankValue,\n            rankingTempArray;\n        var statementRankingArray = [];\n\n        // var newSheet = {\n        //     sheetid: appendText1,\n        //     headers: false\n        // };\n        // sheetNames.push(newSheet);\n        sheetNamesXlsx.push(appendText1);\n\n        var maxStatementLength = QAV.getState("maxStatementLength");\n        var columns = [{\n            wch: 8\n        }, {\n            wch: maxStatementLength\n        }, {\n            wch: 8\n        }];\n        for (var ss = 0, ssLen = (userSelectedFactors.length * 2); ss < ssLen; ss++) {\n            columns.push({\n                wch: 7\n            });\n        }\n        colSizes.push(columns);\n\n\n        // add factor ranks and round at 2 digits\n        for (var j = 0, jLen = synFactorArray1.length; j < jLen; j++) {\n            for (var jj = 0, jjLen = synFactorArray1[j].length; jj < jjLen; jj++) {\n                synFactorArray1[j][jj][appendText5] = evenRound((synFactorArray1[j][jj][appendText5]), 2);\n            }\n            synFactorArray1[j]\n                .sort(function(a, b) {\n                    if (b[appendText5] === a[appendText5]) {\n                        return a[appendText3] - b[appendText3];\n                    } else {\n                        return b[appendText5] - a[appendText5];\n                    }\n                });\n\n            for (var i = 0, iLen = synFactorArray1[j].length; i < iLen; i++) {\n                rankValue = (i + 1);\n                synFactorArray1[j][i].Rank = rankValue;\n            }\n\n            synFactorArray1[j]\n                .sort(function(a, b) {\n                    return a[appendText3] - b[appendText3];\n                });\n        }\n\n        // re-sort for use below?\n        // synFactorArray1[0]\n        //     .sort(function(a, b) {\n        //         return a[appendText3] - b[appendText3];\n        //     });\n\n        var compositeFactorMasterArray = QAV.getState("compositeFactorMasterArray");\n        var factorScoreRanksArray = [];\n\n        // sort by statement number and push num and statement and num into ranks array\n        compositeFactorMasterArray[0].sort(function(a, b) {\n            if (a[0] === b[0]) {\n                return 0;\n            } else {\n                return (a[0] < b[0]) ?\n                    -1 :\n                    1;\n            }\n        });\n        for (var ww = 0, wwLen = compositeFactorMasterArray[0].length; ww < wwLen; ww++) {\n            var tempArraymm1 = [];\n            tempArraymm1.push(compositeFactorMasterArray[0][ww][0]);\n            tempArraymm1.push(compositeFactorMasterArray[0][ww][1]);\n            tempArraymm1.push(compositeFactorMasterArray[0][ww][0]);\n            factorScoreRanksArray.push(tempArraymm1);\n        }\n\n        // cycle through user selected factors to get zScore and rank\n        for (var kk = 0, kkLen = compositeFactorMasterArray.length; kk < kkLen; kk++) {\n            // sort by statement number\n            compositeFactorMasterArray[kk]\n                .sort(function(a, b) {\n                    if (a[0] === b[0]) {\n                        return 0;\n                    } else {\n                        return (a[0] < b[0]) ?\n                            -1 :\n                            1;\n                    }\n                });\n            // insert zScore\n            for (var ii = 0, iiLen = compositeFactorMasterArray[kk].length; ii < iiLen; ii++) {\n                var tempZscore = evenRound(compositeFactorMasterArray[kk][ii][2], 2);\n                factorScoreRanksArray[ii].push(tempZscore);\n            }\n            // re-sort by latest pushed zScore\n            // var placeSetter = factorScoreRanksArray[0].length - 1;\n            var placeSetter = 2;\n            compositeFactorMasterArray[kk].sort(function(a, b) {\n                if (a[placeSetter] === b[placeSetter]) {\n                    return 0;\n                } else {\n                    return (b[placeSetter] < a[placeSetter]) ?\n                        -1 :\n                        1;\n                }\n            });\n\n            for (var rr = 0, rrLen = compositeFactorMasterArray[kk].length; rr < rrLen; rr++) {\n                var RankValue2 = (rr + 1);\n                compositeFactorMasterArray[kk][rr].push(RankValue2);\n            }\n\n            // re-sort to statement number\n            compositeFactorMasterArray[kk]\n                .sort(function(a, b) {\n                    if (a[0] === b[0]) {\n                        return 0;\n                    } else {\n                        return (a[0] < b[0]) ?\n                            -1 :\n                            1;\n                    }\n                });\n\n            // get and push ranking numbers\n            for (var pp = 0, ppLen = compositeFactorMasterArray[kk].length; pp < ppLen; pp++) {\n                var RankValue3 = compositeFactorMasterArray[kk][pp].pop();\n                factorScoreRanksArray[pp].push(RankValue3);\n            }\n            // placeSetter = placeSetter + 2;\n        }\n\n        var spacer = ["", ""];\n        var tempArrayHeader = ["", appendText6];\n        var tempArrayHeader2 = [appendText3, appendText4, appendText3];\n        var tempSubHeader = ["", "", ""];\n        for (var yy = 0, yyLen = userSelectedFactors.length; yy < yyLen; yy++) {\n            tempArrayHeader2.push(userSelectedFactors[yy], userSelectedFactors[yy]);\n            tempSubHeader.push("Z-score", "Rank");\n        }\n\n        factorScoreRanksArray.unshift(spacer, tempArrayHeader, spacer, tempArrayHeader2, tempSubHeader);\n        outputData.push(factorScoreRanksArray);\n\n        // setup the array of ranked statements\n        var factorScoreComparisonArray = [];\n        for (var k = 0, kLen = synFactorArray1[0].length; k < kLen; k++) {\n            rankingTempArray = [];\n            tempArray1 = {};\n            tempArray1.Num1 = synFactorArray1[0][k][appendText3];\n            tempArray1.Statement = synFactorArray1[0][k][appendText4];\n            tempArray1.Num2 = synFactorArray1[0][k][appendText3];\n            tempArray1.Zscore1 = synFactorArray1[0][k][appendText5];\n            var rank1 = synFactorArray1[0][k][appendText7];\n            tempArray1.Rank1 = rank1;\n            var tempSortValue = synFactorArray1[0][k][appendText8];\n            rankingTempArray.push(tempSortValue);\n            for (var m = 1, mLen = synFactorArray1.length; m < mLen; m++) {\n                var mm = m + 1;\n                tempArray1["Zscore" + mm] = synFactorArray1[m][k][appendText5];\n                tempArray1["Rank" + mm] = synFactorArray1[m][k][appendText7];\n                var tempSortValue2 = synFactorArray1[m][k][appendText8];\n                rankingTempArray.push(tempSortValue2);\n            }\n            factorScoreComparisonArray.push(tempArray1);\n            statementRankingArray.push(rankingTempArray);\n        }\n\n        QAV.setState("statementRankingArray", statementRankingArray);\n\n        pushFactorScoreCorrelationsToOutputArray(sheetNames, output, outputData, sheetNamesXlsx, colSizes);\n    }\n\n    function pushFactorScoreCorrelationsToOutputArray(sheetNames, output, outputData, sheetNamesXlsx, colSizes) {\n\n        var language = QAV.getState("language");\n        var appendText1 = resources[language].translation["Factor score correlations"];\n\n        sheetNamesXlsx.push(appendText1);\n\n        var analysisOutput = QAV.getState("analysisOutput");\n        var userSelectedFactors = QAV.getState("userSelectedFactors");\n        var analysisOutput2 = _.cloneDeep(analysisOutput);\n        var factorScoresCorrelationArray2 = [];\n        var temp1, temp2, tempArray;\n\n        var columns = [{\n            wch: 7\n        }];\n        for (var ss = 0, ssLen = (userSelectedFactors.length); ss < ssLen; ss++) {\n            columns.push({\n                wch: 7\n            });\n        }\n        colSizes.push(columns);\n\n        // i loop through selected factors, j loop through sorts to get new array of z-scores\n        // todo - added after other calculations, so now repeats with factor download sheets - dry out\n        for (var i = 0; i < userSelectedFactors.length; i++) {\n            temp2 = userSelectedFactors[i];\n            tempArray = [];\n            for (var j = 0; j < analysisOutput2[i].length; j++) {\n                temp1 = analysisOutput2[i][j].zScore;\n                tempArray.push(temp1);\n            }\n            factorScoresCorrelationArray2.push(tempArray);\n        }\n\n        // todo - converting to integer gives lots variation with PQmethod - use evenRound?\n        var factorScoresCorrelationArray = [];\n        for (var q = 0; q < factorScoresCorrelationArray2.length; q++) {\n            var temp11 = _.map(factorScoresCorrelationArray2[q], evenRoundFunc);\n            factorScoresCorrelationArray.push(temp11);\n        }\n\n        function evenRoundFunc(n) {\n            var temp1 = evenRound((n), 5);\n            return temp1;\n        }\n\n        var pullX;\n        var correlationTableArrayFragment = [];\n        var correlationTableArray = [];\n        for (var k = 0; k < factorScoresCorrelationArray.length; k++) {\n            pullX = factorScoresCorrelationArray[k];\n            correlationTableArrayFragment = factorScoresCorrelationsHelper(factorScoresCorrelationArray, pullX);\n            correlationTableArray.push(correlationTableArrayFragment);\n            correlationTableArrayFragment = [];\n        }\n\n        function factorScoresCorrelationsHelper(factorScoresCorrelationArray, pullX) {\n\n            var correlationHolder,\n                correlationHolder2;\n            var correlationTableArrayFragment = [];\n\n            _(factorScoresCorrelationArray).forEach(function(element) {\n                correlationHolder2 = CORR.getPqmethodCorrelation(pullX, element);\n                correlationHolder = evenRound((correlationHolder2[0]), 4);\n                correlationTableArrayFragment.push(correlationHolder);\n            }).value();\n            return correlationTableArrayFragment;\n        }\n\n        // add factor names to first column\n        for (var m = 0; m < correlationTableArray.length; m++) {\n            var temp8 = userSelectedFactors[m];\n            correlationTableArray[m].unshift(temp8);\n        }\n\n        var tempArray3 = [];\n        tempArray3.push("");\n        for (var p = 0; p < userSelectedFactors.length; p++) {\n            var temp9 = userSelectedFactors[p];\n            tempArray3.push(temp9);\n        }\n        correlationTableArray.unshift(tempArray3);\n\n        QAV.setState("correlationTableArrayHolder", correlationTableArray);\n        output.push(correlationTableArray);\n\n        //var correlationTableArray2 = _.cloneDeep(correlationTableArray);\n        correlationTableArray.unshift([\n            "", ""\n        ], [appendText1], ["", ""]);\n\n        outputData.push(correlationTableArray);\n\n        // pushFactorsToOutputArray(sheetNames, output);\n        insertFactorsIntoOutputArray(sheetNames, output, analysisOutput, outputData, sheetNamesXlsx, colSizes);\n    }\n\n    function insertFactorsIntoOutputArray(sheetNames, output, analysisOutput, outputData, sheetNamesXlsx, colSizes) {\n\n        var language = QAV.getState("language");\n        var appendText1 = resources[language].translation["Sorts Weight"];\n        var appendText2 = resources[language].translation["Sorts Corr"];\n        var appendText3 = resources[language].translation["Statement Number"];\n        var appendText4 = resources[language].translation.Statement;\n        var appendText5 = resources[language].translation["Z-score"];\n        // var appendText6 = resources[language].translation["Sort Values"];\n        var appendText7 = resources[language].translation["Raw Sort"];\n        var appendText8 = resources[language].translation["Sort Values"];\n        var appendText9 = resources[language].translation["Sorts Correlations"];\n        var appendText10 = resources[language].translation["Factor Scores for "];\n\n        var sheetNamesHolder1 = QAV.getState("sheetNamesHolder1");\n        var sheetNamesHolder2 = QAV.getState("sheetNamesHolder2");\n        var sheetNamesHolder3 = QAV.getState("sheetNamesHolder3");\n\n        var factorWeightFactorArray = QAV.getState("factorWeightFactorArrayHolder");\n        var miniCorrelationArray = QAV.getState("miniCorrelationArrayHolder");\n        var synFactorArray1 = QAV.getState("synFactorArray1Holder");\n        var compositeFactorMasterArray = QAV.getState("compositeFactorMasterArray");\n        var userSelectedFactors = QAV.getState("userSelectedFactors");\n        var sigSortsArray = QAV.getState("sigSortsArray");\n        var maxStatementLength = QAV.getState("maxStatementLength");\n        var spacer = ["", ""];\n\n        for (var ii = 0, iiLen = userSelectedFactors.length; ii < iiLen; ii++) {\n\n            var sheetHeaderArrayPartial = [appendText3, appendText4, appendText5, appendText8];\n\n            // set weights name\n            sheetNamesXlsx.push((sheetNamesHolder1[ii].sheetid));\n\n            // set weights columns\n            var columns = [{\n                wch: 8\n            }, {\n                wch: 8\n            }];\n            colSizes.push(columns);\n\n            // set weights sheet\n            factorWeightFactorArray[ii].unshift(spacer, [userSelectedFactors[ii], appendText1], spacer);\n            outputData.push(factorWeightFactorArray[ii]);\n\n            // set sorts corr name\n            sheetNamesXlsx.push((sheetNamesHolder2[ii].sheetid));\n\n            // set sorts corr cols\n            var columns2 = [{\n                wch: 8\n            }];\n            for (var ss = 0, ssLen = (userSelectedFactors.length); ss < ssLen; ss++) {\n                columns2.push({\n                    wch: 8\n                });\n            }\n            colSizes.push(columns2);\n\n            // set sorts corr sheet\n            miniCorrelationArray[ii].unshift(spacer, [userSelectedFactors[ii], appendText9], spacer);\n            outputData.push(miniCorrelationArray[ii]);\n\n            // set factor sheet name\n            sheetNamesXlsx.push((sheetNamesHolder3[ii].sheetid));\n\n            // set factor sheet cols\n            var columns3 = [{\n                wch: 8\n            }, {\n                wch: maxStatementLength\n            }, {\n                wch: 9\n            }, {\n                wch: 12\n            }];\n            for (var tt = 0, ttLen = sigSortsArray[ii].SigSorts.length; tt < ttLen; tt++) {\n                columns3.push({\n                    wch: 12\n                });\n            }\n            colSizes.push(columns3);\n\n            // set factor sheets\n            // re-sort to zScore\n            compositeFactorMasterArray[ii].sort(function(a, b) {\n                if (a[2] === b[2]) {\n                    return (a[0] < b[0]) ?\n                        -1 :\n                        1;\n                } else {\n                    return (b[2] < a[2]) ?\n                        -1 :\n                        1;\n                }\n            });\n\n            for (var jj = 0, jjLen = sigSortsArray[ii].SigSorts.length; jj < jjLen; jj++) {\n                sheetHeaderArrayPartial.push(appendText7 + " " + sigSortsArray[ii].SigSorts[jj]);\n            }\n            compositeFactorMasterArray[ii].unshift(spacer, ["", appendText10 + " " + userSelectedFactors[ii]], spacer, sheetHeaderArrayPartial);\n            outputData.push(compositeFactorMasterArray[ii]);\n        }\n\n        for (var i = 0, iLen = factorWeightFactorArray.length; i < iLen; i++) {\n            sheetNames.push(sheetNamesHolder1[i]);\n            sheetNames.push(sheetNamesHolder2[i]);\n            sheetNames.push(sheetNamesHolder3[i]);\n            output.push(factorWeightFactorArray[i]);\n            output.push(miniCorrelationArray[i]);\n            output.push(synFactorArray1[i]);\n        }\n\n        pushFactorPowerSetDiffsToOutputArray(sheetNames, output, analysisOutput, outputData, sheetNamesXlsx, colSizes);\n    }\n\n    function pushFactorPowerSetDiffsToOutputArray(sheetNames, output, analysisOutput, outputData, sheetNamesXlsx, colSizes) {\n        var language = QAV.getState("language");\n        var chartText1 = resources[language].translation.Diff;\n        var chartText2 = resources[language].translation.Difference;\n        var chartText3 = resources[language].translation["Statement Number"];\n        var chartText4 = resources[language].translation.Statement;\n        var chartText5 = resources[language].translation["Descending Array of Differences Between"];\n        var chartText6 = resources[language].translation.and;\n        var oneFactor, anotherFactor;\n        var maxStatementLength = QAV.getState("maxStatementLength");\n        var spacer = ["", ""];\n\n        var factorPairs = [];\n        for (var i = 0; i < analysisOutput.length - 1; i++) {\n            for (var j = i; j < analysisOutput.length - 1; j++) {\n                factorPairs.push([\n                    analysisOutput[i],\n                    analysisOutput[j + 1]\n                ]);\n            }\n        }\n        var diffArraySorted;\n        var namesComboArray = [];\n        var sheetHeader1Array = [];\n\n        for (var k = 0; k < factorPairs.length; k++) {\n            var namesComboArrayFrag = [];\n            var sheetHeader1 = [chartText3, chartText4];\n            oneFactor = factorPairs[k][0][0].factor;\n            anotherFactor = factorPairs[k][1][0].factor;\n            namesComboArrayFrag.push(oneFactor, anotherFactor);\n            var temp1 = {};\n            temp1.sheetid = chartText1 + oneFactor + " " + anotherFactor;\n            temp1.header = true;\n            sheetNames.push(temp1);\n            namesComboArray.push(namesComboArrayFrag);\n            sheetNamesXlsx.push(chartText1 + oneFactor + " " + anotherFactor);\n\n            sheetHeader1.push(oneFactor, anotherFactor, chartText2);\n            sheetHeader1Array.push(sheetHeader1);\n\n            var columns = [{\n                wch: 8\n            }, {\n                wch: maxStatementLength\n            }, {\n                wch: 8\n            }, {\n                wch: 8\n            }, {\n                wch: 10\n            }];\n            colSizes.push(columns);\n        }\n\n        // push each pair to output\n        for (var m = 0; m < factorPairs.length; m++) {\n            var diffArray = [];\n            var diffArrayXlsx = [];\n            for (var p = 0; p < factorPairs[m][0].length; p++) {\n                var tempArray = [];\n\n                var temp1a = factorPairs[m][0][p].statement;\n                var temp1b = factorPairs[m][0][p].sortStatement;\n                var temp1c = factorPairs[m][0][p].zScore;\n                var temp1d = factorPairs[m][1][p].zScore;\n                var factorsDiff = evenRound(((factorPairs[m][0][p].zScore) - (factorPairs[m][1][p].zScore)), 3);\n                tempArray.push(temp1a, temp1b, temp1c, temp1d, factorsDiff);\n                diffArrayXlsx.push(tempArray);\n            }\n\n            diffArrayXlsx.sort(function(a, b) {\n                if (a[4] === b[4]) {\n                    return 0;\n                } else {\n                    return (b[4] < a[4]) ?\n                        -1 :\n                        1;\n                }\n            });\n            diffArrayXlsx.unshift(spacer, [chartText5 + " " + namesComboArray[m][0] + " " + chartText6 + " " + namesComboArray[m][1]], spacer, sheetHeader1Array[m]);\n            outputData.push(diffArrayXlsx);\n        }\n\n        pushConsensusStatementsToOutput(sheetNames, output, analysisOutput, outputData, sheetNamesXlsx, colSizes);\n    }\n\n    function pushConsensusStatementsToOutput(sheetNames, output, analysisOutput, outputData, sheetNamesXlsx, colSizes) {\n\n        var language = QAV.getState("language");\n        var chartText1 = resources[language].translation["Z-Score Variance"];\n        var chartText2 = resources[language].translation["Consensus-Disagreement"];\n        var chartText3 = resources[language].translation["Statement Number"];\n        var chartText4 = resources[language].translation.Statement;\n        var chartText5 = resources[language].translation["Z-Score Variance"];\n        var chartText6 = resources[language].translation["Factor Q-sort Values for Statements sorted by Consensus vs. Disagreement"];\n\n        var sigFactorNumbersArray = QAV.getState("sigFactorNumbersArray");\n        var userSelectedFactors = QAV.getState("userSelectedFactors");\n        var maxStatementLength = QAV.getState("maxStatementLength");\n        var spacer = ["", ""];\n\n        sigFactorNumbersArray.sort();\n\n        var tableHeader = [chartText3, chartText4];\n        var tableHeader2 = tableHeader.concat(userSelectedFactors);\n        tableHeader2.push(chartText5);\n\n        sheetNamesXlsx.push(chartText2);\n\n        // set factor sheet cols\n        var columns = [{\n            wch: 8\n        }, {\n            wch: maxStatementLength\n        }];\n        for (var tt = 0, ttLen = userSelectedFactors.length; tt < ttLen; tt++) {\n            columns.push({\n                wch: 8\n            });\n        }\n        columns.push({\n            wch: 15\n        });\n        colSizes.push(columns);\n\n        var consensusDisagreeArray = [];\n        var zScoreArrayForStatements = [];\n        for (var i = 0; i < analysisOutput[0].length; i++) {\n            var tempArray1a = [];\n            tempArray1a.push(analysisOutput[0][i].statement, analysisOutput[0][i].sortStatement);\n            var tempArray = [];\n            for (var j = 0; j < analysisOutput.length; j++) {\n                var temp1 = sigFactorNumbersArray[j];\n                tempArray1a.push(analysisOutput[j][i].sortValue);\n                tempArray.push(analysisOutput[j][i].zScore);\n            }\n            var zScoreVariance = evenRound((UTIL.variance(tempArray)), 3);\n            tempArray1a.push(zScoreVariance);\n            consensusDisagreeArray.push(tempArray1a);\n        }\n\n        var locator = userSelectedFactors.length + 2;\n        consensusDisagreeArray.sort(function(a, b) {\n            if (a[locator] === b[locator]) {\n                return 0;\n            } else {\n                return (a[locator] < b[locator]) ?\n                    -1 :\n                    1;\n            }\n        });\n        consensusDisagreeArray.unshift(spacer, [chartText6], spacer, tableHeader2);\n        outputData.push(consensusDisagreeArray);\n\n        pushFactorCharacteristicsToOutput(sheetNames, output, analysisOutput, sigFactorNumbersArray, outputData, sheetNamesXlsx, colSizes);\n    }\n\n    function pushFactorCharacteristicsToOutput(sheetNames, output, analysisOutput, sigFactorNumbersArray, outputData, sheetNamesXlsx, colSizes) {\n\n        var language = QAV.getState("language");\n        var chartText1 = resources[language].translation["Factor Characteristics"];\n        var chartText2 = resources[language].translation["Factor Number"];\n        var chartText3 = resources[language].translation["No. of Defining Variables"];\n        var chartText4 = resources[language].translation["Avg. Rel. Coef."];\n        var chartText5 = resources[language].translation["Composite Reliability"];\n        var chartText6 = resources[language].translation["S.E. of Factor Z-scores"];\n        var userSelectedFactors = QAV.getState("userSelectedFactors");\n        var sigSortsArray = QAV.getState("sigSortsArray");\n        var spacer = ["", ""];\n\n        sheetNamesXlsx.push(chartText1);\n\n        // set factor sheet col widths\n        var columns = [{\n            wch: 20\n        }];\n        for (var tt = 0, ttLen = userSelectedFactors.length; tt < ttLen; tt++) {\n            columns.push({\n                wch: 8\n            });\n        }\n        colSizes.push(columns);\n\n        var factorCharacteristicsSheetArray = [];\n\n        // line 1 - factor labels\n        var line1Array = [""];\n        var line1Arrayb = line1Array.concat(userSelectedFactors);\n        factorCharacteristicsSheetArray.push(line1Arrayb);\n\n\n        // line 2 - No. of Defining Variables\n        var line2Array = [chartText3];\n        for (var j = 0; j < sigSortsArray.length; j++) {\n            line2Array.push(sigSortsArray[j].SigSorts.length);\n        }\n        factorCharacteristicsSheetArray.push(line2Array);\n\n        // line 3 - Avg. Rel. Coef.\n        // todo - !important - change this for unrestrained unforced sort patterns?\n        var line3Array = [chartText4];\n        for (var k = 0; k < sigSortsArray.length; k++) {\n            line3Array.push(0.800);\n        }\n        factorCharacteristicsSheetArray.push(line3Array);\n\n        // line 4 - Composite Reliability\n        var line4Array = [chartText5];\n        var nSorts,\n            compositeRel;\n        var composRelArray = [];\n        for (var m = 0; m < sigSortsArray.length; m++) {\n            nSorts = sigSortsArray[m].SigSorts.length;\n            compositeRel = evenRound(((nSorts * 0.800) / (1 + ((nSorts - 1) * 0.800))), 3);\n            composRelArray.push(compositeRel);\n            line4Array.push(compositeRel);\n        }\n        factorCharacteristicsSheetArray.push(line4Array);\n\n        // line 5 - S.E. of Factor Z-scores\n        var line5Array = [chartText6];\n        var stndErrorArray = [];\n        for (var p = 0; p < sigSortsArray.length; p++) {\n            var stndError = evenRound(Math.sqrt(Math.abs(1.0 - composRelArray[p])), 3);\n            stndErrorArray.push(stndError);\n            line5Array.push(stndError);\n        }\n        factorCharacteristicsSheetArray.push(line5Array);\n        factorCharacteristicsSheetArray.unshift(spacer, [chartText1], spacer);\n\n        outputData.push(factorCharacteristicsSheetArray);\n\n        pushStandardErrorsDifferencesToOutput(sheetNames, output, stndErrorArray, analysisOutput, sigFactorNumbersArray, outputData, sheetNamesXlsx, colSizes);\n    }\n\n    function pushStandardErrorsDifferencesToOutput(sheetNames, output, stndErrorArray, analysisOutput, sigFactorNumbersArray, outputData, sheetNamesXlsx, colSizes) {\n\n        var language = QAV.getState("language");\n        var chartText1 = resources[language].translation["Standard Errors for Diffs"];\n        var chartText2 = resources[language].translation["Standard Errors for Differences in Factor Z-scores"];\n        var sigSortsArray = QAV.getState("sigSortsArray");\n        var userSelectedFactors = QAV.getState("userSelectedFactors");\n        var spacer = ["", ""];\n\n        sheetNamesXlsx.push(chartText1);\n\n        // set factor sheet col widths\n        var columns = [{\n            wch: 8\n        }];\n        for (var tt = 0, ttLen = userSelectedFactors.length; tt < ttLen; tt++) {\n            columns.push({\n                wch: 8\n            });\n        }\n        colSizes.push(columns);\n\n        var standardErrorDiffSheetArray = [];\n\n        // line 1\n        var line1Array = [""];\n        var line1Arrayb = line1Array.concat(userSelectedFactors);\n        standardErrorDiffSheetArray.push(line1Arrayb);\n\n        var stndErrorDiffArray = [];\n        var stndErrorDiffDataArray = [];\n        var stndErrorDiffDataDistingArray = [];\n\n        var stndError1, stndError2, stndError3;\n\n        // lines 2 to end\n        for (var j = 0; j < sigSortsArray.length; j++) {\n            var tempArray1 = [];\n            tempArray1.push(sigSortsArray[j]["Factor Number"]);\n\n            for (var k = 0; k < sigSortsArray.length; k++) {\n                var stndErrorDiffDataArrayTemp1 = [];\n                var tempArray2 = [];\n                stndErrorDiffDataArrayTemp1.push("Factor " + sigSortsArray[j]["Factor Number"]);\n                tempArray2.push(sigSortsArray[j]["Factor Number"]);\n                stndErrorDiffDataArrayTemp1.push("Factor " + sigSortsArray[k]["Factor Number"]);\n                tempArray2.push(sigSortsArray[k]["Factor Number"]);\n                stndError1 = stndErrorArray[j];\n                stndError2 = stndErrorArray[k];\n                stndError3 = evenRound((Math.sqrt((stndError1 * stndError1) + (stndError2 * stndError2))), 3);\n                stndErrorDiffDataArrayTemp1.push(stndError3);\n                tempArray2.push(stndError3);\n                tempArray1.push(stndError3);\n                stndErrorDiffDataArray.push(stndErrorDiffDataArrayTemp1);\n                stndErrorDiffDataDistingArray.push(tempArray2);\n            }\n            standardErrorDiffSheetArray.push(tempArray1);\n        }\n        standardErrorDiffSheetArray.unshift(spacer, [chartText2], spacer);\n        outputData.push(standardErrorDiffSheetArray);\n\n        pushDistinguishingStatementsToOutput(sheetNames, output, sigSortsArray, analysisOutput, stndErrorDiffDataArray, stndErrorDiffDataDistingArray, sigFactorNumbersArray, outputData, sheetNamesXlsx, colSizes);\n    }\n\n    function pushDistinguishingStatementsToOutput(sheetNames, output, sigSortsArray, analysisOutput, stndErrorDiffDataArray, stndErrorDiffDataDistingArray, sigFactorNumbersArray, outputData, sheetNamesXlsx, colSizes) {\n\n        var language = QAV.getState("language");\n        var chartText1 = resources[language].translation["Dist State"];\n        var chartText2 = resources[language].translation["Consensus Statements"];\n        var maxStatementLength = QAV.getState("maxStatementLength");\n        var userSelectedFactors = QAV.getState("userSelectedFactors");\n\n        // property to count loop iterations for assigning significance * in disting factor output\n        formatDistingArrayForDownload.calledTimes = 0;\n\n        // loop to set up worksheet names and push into output array\n        for (var i = 0; i < sigSortsArray.length; i++) {\n\n            sheetNamesXlsx.push(chartText1 + sigSortsArray[i]["Factor Number"]);\n\n            // set up col widths for excel output - todo - change maxStatementLength?\n            var columns = [{\n                wch: 8\n            }, {\n                wch: maxStatementLength\n            }, {\n                wch: 8\n            }];\n            for (var tt = 0, ttLen = userSelectedFactors.length; tt < ttLen; tt++) {\n                columns.push({\n                    wch: 8\n                }, {\n                    wch: 8\n                }, {\n                    wch: 8\n                });\n            }\n            colSizes.push(columns);\n        }\n\n        // starting calcs for distinguishing factors\n        var sedComparisonValue, j, k, m;\n        var consensusStatementComparisonArray05 = [];\n        var consensusStatementComparisonArray01 = [];\n        var distStatementDataVizArray = [];\n        var masterDistingStatementNumbersArray05 = [];\n        var masterDistingStatementNumbersArray01 = [];\n\n        // looping through all factors to determine if distinguishing!\n        // todo - create if statement for case of only two sig factors-bypass processing of second c 4894\n        for (j = 0; j < sigSortsArray.length; j++) {\n            // factor j\n            // looping through all statements in each j factor\n            var distingStatementsTransferArray05 = [];\n            var distingStatementsTransferArray01 = [];\n            var consensusStatementTransferArray05 = [];\n            var consensusStatementTransferArray01 = [];\n\n            for (k = 0; k < analysisOutput[0].length; k++) {\n                // looping through each statement\'s other factor zScores to compare\n                // also grabbing the appropriate SED value for each comparison\n                var sig05 = false;\n                var sig05Array = [];\n                var sig01 = false;\n                var sig01Array = [];\n                var newStatementNum;\n\n                for (m = 0; m < sigSortsArray.length; m++) {\n                    // factor m\n                    // check to avoid comparison with self\n                    if (analysisOutput[j][k].factor === analysisOutput[m][k].factor) {} else {\n                        // loop through SED array to find comparison value\n                        sedComparisonValue = null;\n\n                        for (var p = 0; p < stndErrorDiffDataDistingArray.length; p++) {\n                            var searchVal1 = stndErrorDiffDataDistingArray[p][0];\n                            var searchVal2 = stndErrorDiffDataDistingArray[p][1];\n                            var iteratorJShift = sigFactorNumbersArray[j];\n                            var iteratorMShift = sigFactorNumbersArray[m];\n\n                            if (searchVal1 === iteratorJShift && searchVal2 === iteratorMShift) {\n                                sedComparisonValue = stndErrorDiffDataDistingArray[p][2];\n                            }\n                        }\n\n                        if (Math.abs(analysisOutput[j][k].zScore - analysisOutput[m][k].zScore) >= (sedComparisonValue * 1.96)) {\n                            analysisOutput[j][k].zScore = evenRound((analysisOutput[j][k].zScore), 2);\n                            sig05 = true;\n                            sig05Array.push(sig05);\n                        }\n\n                        if (Math.abs(analysisOutput[j][k].zScore - analysisOutput[m][k].zScore) >= (sedComparisonValue * 2.58)) {\n                            analysisOutput[j][k].zScore = evenRound((analysisOutput[j][k].zScore), 2);\n                            sig01 = true;\n                            sig01Array.push(sig01);\n                        }\n                    }\n                }\n\n                newStatementNum = k + 1;\n\n                if (sig05Array.length === (sigFactorNumbersArray.length - 1)) {\n                    distingStatementsTransferArray05.push(newStatementNum);\n                }\n\n                if (sig01Array.length === (sigFactorNumbersArray.length - 1)) {\n                    distingStatementsTransferArray01.push(newStatementNum);\n                }\n\n                if (sig05Array.length === 0) {\n                    consensusStatementTransferArray05.push(newStatementNum);\n                }\n\n                if (sig01Array.length === 0) {\n                    consensusStatementTransferArray01.push(newStatementNum);\n                }\n            }\n\n            var distingStatementsTransferArray05b = _.uniq(distingStatementsTransferArray05, true);\n            var distingStatementsTransferArray01b = _.uniq(distingStatementsTransferArray01, true);\n            var distingStatementsTransferArray05c = _.difference(distingStatementsTransferArray05b, distingStatementsTransferArray01b);\n\n            masterDistingStatementNumbersArray05.push(distingStatementsTransferArray05c);\n            masterDistingStatementNumbersArray01.push(distingStatementsTransferArray01b);\n\n            consensusStatementComparisonArray05.push(consensusStatementTransferArray05);\n            consensusStatementComparisonArray01.push(consensusStatementTransferArray01);\n\n            var factorNumber = sigFactorNumbersArray[j];\n\n            var formattedDistingStatements = formatDistingArrayForDownload(distingStatementsTransferArray01b, distingStatementsTransferArray05c, factorNumber, analysisOutput, sigFactorNumbersArray);\n\n            distStatementDataVizArray.push(formattedDistingStatements[0]);\n\n            outputData.push(formattedDistingStatements[1]);\n        }\n\n        QAV.setState("masterDistingStatementNumbersArray01", masterDistingStatementNumbersArray01);\n        QAV.setState("masterDistingStatementNumbersArray05", masterDistingStatementNumbersArray05);\n\n        // ******\n        // develop consensus statement data\n        // ******\n        //var outputForDataViz = _.cloneDeep(analysisOutput);\n        QAV.setState("distStatementDataVizArray", distStatementDataVizArray);\n        QAV.setState("outputForDataViz", analysisOutput);\n\n        do {\n            consensusStatementComparisonArray05 = reduceDistingArray(consensusStatementComparisonArray05);\n        } while (consensusStatementComparisonArray05.length > 1);\n\n        do {\n            consensusStatementComparisonArray01 = reduceDistingArray(consensusStatementComparisonArray01);\n        } while (consensusStatementComparisonArray01.length > 1);\n\n        var consensus05 = _.flatten(consensusStatementComparisonArray05);\n        var consensusStatementComparisonArray01b = _.flatten(consensusStatementComparisonArray01);\n\n        var consensus01 = _.xor(consensus05, consensusStatementComparisonArray01b);\n\n        QAV.setState("consensus05Statements", consensus05);\n        QAV.setState("consensus01Statements", consensus01);\n\n        sheetNamesXlsx.push(chartText2);\n\n        // set up col widths for excel output\n        var columns2 = [{\n            wch: 12\n        }, {\n            wch: 12\n        }, {\n            wch: maxStatementLength\n        }, {\n            wch: 12\n        }];\n        for (var ttt = 0, tttLen = userSelectedFactors.length; ttt < tttLen; ttt++) {\n            columns2.push({\n                wch: 12\n            }, {\n                wch: 15\n            }, {\n                wch: 15\n            });\n        }\n        colSizes.push(columns2);\n\n        var formattedConsensusStatements = formatConsensusArrayForDownload(consensus05, consensus01, analysisOutput, sigFactorNumbersArray);\n        QAV.setState("formattedConsensusStatements", formattedConsensusStatements[0]);\n\n        outputData.push(formattedConsensusStatements[1]);\n\n        pushCribSheetsToOutput(sheetNames, output, outputData, sheetNamesXlsx, colSizes);\n    }\n\n    function pushCribSheetsToOutput(sheetNames, output, outputData, sheetNamesXlsx, colSizes) {\n        var language = QAV.getState("language");\n        var appendText1 = resources[language].translation[" Rel. Ranks"];\n        var appendText2 = resources[language].translation["Relative Ranking of Statements in "];\n        var appendText3 = resources[language].translation["Statement Number"];\n        var appendText5 = resources[language].translation["Z-score"];\n        var appendText9 = resources[language].translation.Distinguishing;\n        var appendText8 = resources[language].translation.Consensus;\n        var appendTextHeader1 = resources[language].translation["Highest Ranked Statements"];\n        var appendTextHeader2a = resources[language].translation["Positive Statements Ranked Higher in "];\n        var appendTextHeader2b = resources[language].translation["Array than in Other Factor Arrays"];\n        var appendTextHeader3a = resources[language].translation["Negative Statements Ranked Lower in "];\n        var appendTextHeader3b = resources[language].translation["Array than in Other Factor ArraysB"];\n        var appendTextHeader4 = resources[language].translation["Lowest Ranked Statements"];\n        var maxStatementLength = QAV.getState("maxStatementLength");\n        var appendText6 = resources[language].translation.Statement;\n        var appendText7 = resources[language].translation["Sort Values"];\n        // var appendText8 = resources[language].translation["Note: "];\n\n        var statementRankingArray = QAV.getState("statementRankingArray");\n        var userSelectedFactors = QAV.getState("userSelectedFactors");\n        var factorInformation,\n            lowestRankStatements,\n            tempObj1,\n            cribArray = [];\n        var cribArray2 = [];\n        var highestRankStatements,\n            tempObj2,\n            tempObj3,\n            tempObj4;\n        var maxRankValue,\n            minRankValue,\n            compositeSortValue,\n            compositeSortValue2;\n        var currentRank,\n            currentRank2;\n\n        // determine the number of statements in the extreme columns\n        var sortTriangleShape = QAV.getState("qavSortTriangleShape");\n        var synFactorArray1Holder = QAV.getState("synFactorArray1Holder");\n\n        var arrayMax = +(_.max(sortTriangleShape));\n        var arrayMin = +(_.min(sortTriangleShape));\n        var triangleCounts = _.countBy(sortTriangleShape, _.identity);\n\n        var maxCounts = triangleCounts[arrayMax];\n        var minCounts = triangleCounts[arrayMin];\n\n        // loop through factors\n        for (var j = 0, jLen = userSelectedFactors.length; j < jLen; j++) {\n\n            sheetNamesXlsx.push(userSelectedFactors[j] + appendText1);\n\n            var columns = [{\n                wch: 8\n            }, {\n                wch: 80\n            }, {\n                wch: 8\n            }, {\n                wch: 12\n            }];\n            colSizes.push(columns);\n\n            cribArray = [\n                [],\n                [],\n                [],\n                []\n            ];\n\n            cribArray2 = [\n                [],\n                [],\n                [],\n                []\n            ];\n\n            factorInformation = _.cloneDeep(synFactorArray1Holder[j]);\n\n            // sort by statement number\n            factorInformation.sort(function(a, b) {\n                return a[appendText3] - b[appendText3];\n            });\n\n            //console.log(JSON.stringify(factorInformation));\n\n            // append the ranking arrays\n            for (var k = 0, kLen = factorInformation.length; k < kLen; k++) {\n                factorInformation[k].rankArray = statementRankingArray[k];\n            }\n\n            // resort back to high to low z-score sort\n            factorInformation\n                .sort(function(a, b) {\n                    if (b[appendText5] === a[appendText5]) {\n                        return a[appendText3] - b[appendText3];\n                    } else {\n                        return b[appendText5] - a[appendText5];\n                    }\n                });\n\n            // push highest to cribArray\n            for (var m = 0; m < minCounts; m++) {\n                // tempObj1 = {};\n                highestRankStatements = factorInformation.shift();\n                var stateNum0 = highestRankStatements[appendText3];\n                var statement0 = highestRankStatements[appendText6];\n                var checkIfDisOrCon0 = checkIfDistinguishingOrConsensus(stateNum0, j);\n                var compositeSortValue0 = highestRankStatements[appendText7];\n                var otherValues = _.clone(highestRankStatements.rankArray);\n                otherValues.splice(j, 1);\n                var array0 = [stateNum0, statement0, compositeSortValue0, checkIfDisOrCon0];\n                var array0a = array0.concat(otherValues);\n                cribArray2[0].push(array0a);\n            }\n\n            // push lowest to cribArray\n            for (var p = 0; p < maxCounts; p++) {\n                // tempObj2 = {};\n                lowestRankStatements = factorInformation.pop();\n                var stateNum3 = lowestRankStatements[appendText3];\n                var statement3 = lowestRankStatements[appendText6];\n                var checkIfDisOrCon3 = checkIfDistinguishingOrConsensus(stateNum3, j);\n                var compositeSortValue3 = lowestRankStatements[appendText7];\n                var otherValues3 = _.clone(lowestRankStatements.rankArray);\n                otherValues3.splice(j, 1);\n                var array3 = [stateNum3, statement3, compositeSortValue3, checkIfDisOrCon3];\n                var array3a = array3.concat(otherValues3);\n\n                cribArray2[3].unshift(array3a);\n            }\n\n            // look for higher relative statements and push to cribArray\n            for (var r = 0, rLen = factorInformation.length; r < rLen; r++) {\n                compositeSortValue = factorInformation[r][appendText7];\n                if (compositeSortValue > -1) {\n                    maxRankValue = _.max(factorInformation[r].rankArray);\n                    if (compositeSortValue === maxRankValue) {\n                        var otherValues2 = _.clone(factorInformation[r].rankArray);\n                        otherValues2.splice(j, 1);\n                        var stateNum = factorInformation[r][appendText3];\n                        var checkIfDisOrCon = checkIfDistinguishingOrConsensus(stateNum, j);\n                        var tempArray22 = [\n                            stateNum,\n                            (factorInformation[r][appendText6]),\n                            (compositeSortValue),\n                            checkIfDisOrCon\n                        ];\n                        var combinedArray1 = tempArray22.concat(otherValues2);\n                        cribArray2[1].push(combinedArray1);\n                    }\n                }\n                if (compositeSortValue < 1) {\n                    minRankValue = _.min(factorInformation[r].rankArray);\n                    currentRank2 = factorInformation[r].rankArray[j];\n                    if (compositeSortValue === minRankValue) {\n                        var otherValuesLower = _.clone(factorInformation[r].rankArray);\n                        otherValuesLower.splice(j, 1);\n                        var stateNum2 = factorInformation[r][appendText3];\n                        var checkIfDisOrCon2 = checkIfDistinguishingOrConsensus(stateNum2, j);\n                        var tempArray33 = [\n                            stateNum2,\n                            (factorInformation[r][appendText6]),\n                            (compositeSortValue),\n                            checkIfDisOrCon2\n                        ];\n                        var combinedArray2 = tempArray33.concat(otherValuesLower);\n                        cribArray2[2].push(combinedArray2);\n                    }\n                }\n            }\n\n            var spacerArray = ["", ""];\n\n            // construct headers for statement groups\n            var facName = userSelectedFactors[j];\n\n            // create column headers for other factors\n            var otherFactorNames = _.clone(userSelectedFactors);\n            otherFactorNames.splice(j, 1);\n            var higherRankedHeader = [\n                "", appendTextHeader2a + facName + appendTextHeader2b\n            ];\n\n            var header1 = [\n                "", appendText2 + facName\n            ];\n            var header0 = ["", appendTextHeader1, facName, appendText9].concat(otherFactorNames);\n            cribArray2[0].unshift(spacerArray, header1, [\n                "", "", "", appendText8\n            ], header0);\n\n            cribArray2[1].unshift(spacerArray, higherRankedHeader);\n\n            var header3 = {};\n            header3.stateNum = "";\n            header3.statement = appendTextHeader3a + facName + appendTextHeader3b;\n            header3.sortValue = "";\n            cribArray2[2].unshift(spacerArray, [\n                "",\n                (appendTextHeader3a + facName + appendTextHeader3b),\n                ""\n            ]);\n\n            var header4 = {};\n            header4.stateNum = "";\n            header4.statement = appendTextHeader4;\n            header4.sortValue = "";\n            cribArray2[3].unshift(spacerArray, ["", (appendTextHeader4), ""]);\n\n            output.push(_.flattenDeep(cribArray));\n            outputData.push(_.flatten(cribArray2));\n        }\n\n        // helper function\n        function checkIfDistinguishingOrConsensus(statementNumber, loopNumber) {\n            var masterDistingStatementNumbersArray01 = QAV.getState("masterDistingStatementNumbersArray01");\n            var masterDistingStatementNumbersArray05 = QAV.getState("masterDistingStatementNumbersArray05");\n            var consensus05 = QAV.getState("consensus05Statements");\n            var consensus01 = QAV.getState("consensus01Statements");\n            if (_.contains(masterDistingStatementNumbersArray05[loopNumber], statementNumber)) {\n                return "  D";\n            } else if (_.contains(consensus01, statementNumber)) {\n                return "  C";\n            } else if (_.contains(masterDistingStatementNumbersArray01[loopNumber], statementNumber)) {\n                return "  D*";\n            } else if (_.contains(consensus05, statementNumber)) {\n                return "  C*";\n            } else {\n                return "";\n            }\n        }\n        pushSettingsToOutput(sheetNames, output, outputData, sheetNamesXlsx, colSizes);\n    }\n\n    function pushSettingsToOutput(sheetNames, output, outputData, sheetNamesXlsx, colSizes) {\n        QAV.setState("outputComplete", "true");\n        QAV.setState("outputSpreadsheetArray", output);\n        QAV.setState("outputSpreadsheetSheetNamesArray", sheetNames);\n\n        // for output testing - do not delete!\n        // console.log(JSON.stringify(output));\n        // console.log(JSON.stringify(sheetNames));\n\n        // console.log(JSON.stringify(outputData));\n        // console.log(JSON.stringify(sheetNamesXlsx));\n        // console.log(JSON.stringify(colSizes));\n\n        QAV.setState("dataXlsx", outputData);\n        QAV.setState("sheetNamesXlsx", sheetNamesXlsx);\n        QAV.setState("colSizes", colSizes);\n    }\n\n    //*******************************************************************************\n    //********  HELPER FUNCTIONS  ***************************************************\n    //*******************************************************************************\n\n    // helper function for distinguishing statements array\n    function formatConsensusArrayForDownload(consensus05, consensus01, analysisOutput, sigFactorNumbersArray) {\n\n        var language = QAV.getState("language");\n        var chartText1 = resources[language].translation["Consensus Statements"];\n        var chartText2 = resources[language].translation["Those That Do Not Distinguish Between ANY Pair of Factors"];\n        var chartText3 = resources[language].translation["All Listed Statements are Non-Significant at P > 0.01, and Those Flagged with an * are also Non-Significant at P > 0.05)"];\n        var chartText4 = resources[language].translation.Significance;\n        var chartText5 = resources[language].translation.Statement;\n        var chartText6 = resources[language].translation.Num;\n        var chartText7 = resources[language].translation["Statement Number"];\n        var chartText8 = resources[language].translation["Z-score"];\n        var spacer = ["", ""];\n        var outputLength = analysisOutput.length;\n        var consensus05Length = consensus05.length;\n        var consensus01Length = consensus01.length;\n\n        var printArray = [];\n        var printArray2 = [];\n        var consensusSheetArray = [];\n        var consensusSheetArray2 = [];\n\n        // push headers\n        var emptyLineObj = {};\n        emptyLineObj["No."] = " ";\n        emptyLineObj["SIG "] = " ";\n        emptyLineObj["Statement "] = " ";\n        emptyLineObj["Num "] = " ";\n\n        for (var i = 0; i < outputLength; i++) {\n            emptyLineObj["Q-SV-" + sigFactorNumbersArray[i]] = " ";\n            emptyLineObj["Z-SCR-" + sigFactorNumbersArray[i]] = " ";\n            emptyLineObj["SIG" + sigFactorNumbersArray[i]] = " ";\n        }\n\n        consensusSheetArray.push(spacer, [chartText1 + " -- " + chartText2], spacer, [chartText3], spacer, spacer);\n\n        var line3Array = [];\n        printArray.push(emptyLineObj);\n        var printHeaderObj1 = {};\n        printHeaderObj1["No."] = chartText1 + " -- " + chartText2;\n        printArray.push(printHeaderObj1);\n        printArray.push(emptyLineObj);\n        var printHeaderObj2 = {};\n        printHeaderObj2["No."] = chartText3;\n        printArray.push(printHeaderObj2);\n        printArray.push(emptyLineObj);\n        printArray.push(emptyLineObj);\n        var printHeaderObj4 = {};\n        printHeaderObj4["No."] = chartText7;\n        printHeaderObj4["SIG "] = chartText4;\n        printHeaderObj4["Statement "] = chartText5;\n        printHeaderObj4["Num "] = chartText7;\n\n        line3Array.push(chartText7, chartText4, chartText5, chartText7);\n\n        for (var j = 0; j < outputLength; j++) {\n            printHeaderObj4["Q-SV-" + sigFactorNumbersArray[j]] = sigFactorNumbersArray[j] + " Q-SV";\n            printHeaderObj4["Z-SCR-" + sigFactorNumbersArray[j]] = sigFactorNumbersArray[j] + " " + chartText8;\n            line3Array.push((sigFactorNumbersArray[j] + " Q-SV"), (sigFactorNumbersArray[j] + " " + chartText8));\n        }\n        printArray.push(printHeaderObj4);\n        consensusSheetArray.push(line3Array);\n\n        var tempObj,\n            tempObj2,\n            kShift,\n            pShift;\n\n        // push 05 statements\n        for (var k = 0; k < consensus05Length; k++) {\n            tempObj = {};\n            var tempArray = [];\n            kShift = consensus05[k];\n\n            // cycle through statement numbers and get statement, factors q score and sort value from results object and set sig level to ""\n            tempObj["No."] = kShift;\n            // ["No."] = kShift;\n            tempObj["SIG "] = "*";\n            tempObj["Statement "] = analysisOutput[0][(kShift - 1)].sortStatement;\n            tempObj["Num "] = kShift;\n\n            tempArray.push(kShift, "*", (analysisOutput[0][(kShift - 1)].sortStatement), kShift);\n\n            for (var m = 0; m < outputLength; m++) {\n                tempObj["Q-SV-" + sigFactorNumbersArray[m]] = analysisOutput[m][(kShift - 1)].sortValue;\n                tempObj["Z-SCR-" + sigFactorNumbersArray[m]] = analysisOutput[m][(kShift - 1)].zScore;\n                tempArray.push((analysisOutput[m][(kShift - 1)].sortValue), (analysisOutput[m][(kShift - 1)].zScore));\n            }\n            printArray2.push(tempObj);\n            consensusSheetArray2.push(tempArray);\n        }\n\n        // cycle through statement numbers and get statement, factors q score and sort value from results object and set sig level to "*"\n        for (var p = 0; p < consensus01Length; p++) {\n            var tempArray2 = [];\n            tempObj2 = {};\n            pShift = consensus01[p];\n\n            tempObj2["No."] = pShift;\n            tempObj2["SIG "] = "";\n            tempObj2["Statement "] = analysisOutput[0][(pShift - 1)].sortStatement;\n            tempObj2["Num "] = pShift;\n\n            tempArray2.push(pShift, "", (analysisOutput[0][(pShift - 1)].sortStatement), pShift);\n\n            for (var q = 0; q < outputLength; q++) {\n                tempObj2["Q-SV-" + sigFactorNumbersArray[q]] = analysisOutput[q][(pShift - 1)].sortValue;\n                tempObj2["Z-SCR-" + sigFactorNumbersArray[q]] = analysisOutput[q][(pShift - 1)].zScore;\n                tempArray2.push((analysisOutput[q][(pShift - 1)].sortValue), (analysisOutput[q][(pShift - 1)].zScore));\n            }\n            printArray2.push(tempObj2);\n            consensusSheetArray2.push(tempArray2);\n        }\n\n        var printArray3 = printArray2.sort(function(a, b) {\n            return a["No."] - b["No."];\n        });\n\n        consensusSheetArray2.sort(function(a, b) {\n            if (a[0] === b[0]) {\n                return 0;\n            } else {\n                return (a[0] < b[0]) ?\n                    -1 :\n                    1;\n            }\n        });\n\n        var finalArray = consensusSheetArray.concat(consensusSheetArray2);\n\n        for (var r = 0; r < printArray3.length; r++) {\n            printArray.push(printArray3[r]);\n        }\n        return [printArray, finalArray];\n    }\n\n    // helper function for distinguishing arrays\n    function reduceDistingArray(array) {\n        var reducedArray = [];\n        for (var r = 0; r < array.length; r++) {\n            var increment3 = r + 1;\n            var commonSet2 = _.intersection(array[r], array[increment3]);\n            reducedArray.push(commonSet2);\n        }\n        if (reducedArray.length > 1) {\n            reducedArray.pop();\n        }\n        return reducedArray;\n    }\n\n    /*\n     * helper function\n     */\n    function formatDistingArrayForDownload(distingStatementsTransferArray01, distingStatementsTransferArray05, factorNumber, analysisOutput, sigFactorNumbersArray) {\n\n        var language = QAV.getState("language");\n        var chartText1 = resources[language].translation["Distinguishing Statements for"];\n        var chartText2 = resources[language].translation["(P < .05 : Asterisk (*) Indicates Significance at P < .01)"];\n        var chartText3 = resources[language].translation["Both the Factor Q-Sort Value and the Z-Score (Z-SCR) are Shown"];\n        var chartText4 = resources[language].translation.Significance;\n        var chartText5 = resources[language].translation.Statement;\n        var chartText6 = resources[language].translation.Num;\n        var chartText7 = resources[language].translation["Statement Number"];\n        var chartText8 = resources[language].translation["Z-score"];\n\n        var outputLength = analysisOutput.length;\n        var disting05Length = distingStatementsTransferArray05.length;\n        var disting01Length = distingStatementsTransferArray01.length;\n\n        var printArray = [];\n        var printArray2 = [];\n        var spacer = ["", ""];\n\n        var distinguishingSheetArray = [];\n\n        // line 1\n        var line1Array = [chartText1 + factorNumber];\n        distinguishingSheetArray.push(spacer, line1Array);\n\n        // line 2\n        distinguishingSheetArray.push(spacer, [chartText2]);\n\n        // line 3\n        distinguishingSheetArray.push(spacer, [chartText3], spacer, spacer);\n\n        // line 4 - headers\n        var line4Array = [chartText7, chartText5, chartText7];\n\n        // push headers\n        var emptyLineObj = {};\n        emptyLineObj["No."] = " ";\n        emptyLineObj["Statement "] = " ";\n        emptyLineObj["Num "] = " ";\n\n        for (var i = 0; i < outputLength; i++) {\n            emptyLineObj["Q-SV-" + sigFactorNumbersArray[i]] = " ";\n            emptyLineObj["Z-SCR-" + sigFactorNumbersArray[i]] = " ";\n            emptyLineObj["SIG" + sigFactorNumbersArray[i]] = " ";\n        }\n\n        printArray.push(emptyLineObj);\n        var printHeaderObj1 = {};\n        printHeaderObj1["No."] = chartText1 + factorNumber;\n        printArray.push(printHeaderObj1);\n        printArray.push(emptyLineObj);\n        var printHeaderObj2 = {};\n        printHeaderObj2["No."] = chartText2;\n        printArray.push(printHeaderObj2);\n        printArray.push(emptyLineObj);\n        var printHeaderObj3 = {};\n        printHeaderObj3["No."] = chartText3;\n        printArray.push(printHeaderObj3);\n        printArray.push(emptyLineObj);\n        printArray.push(emptyLineObj);\n        var printHeaderObj4 = {};\n        printHeaderObj4["No."] = chartText7;\n        printHeaderObj4["Statement "] = chartText5;\n        printHeaderObj4["Num "] = chartText7;\n\n        for (var j = 0; j < outputLength; j++) {\n            printHeaderObj4["Q-SV-" + sigFactorNumbersArray[j]] = sigFactorNumbersArray[j] + " Q-SV";\n            printHeaderObj4["Z-SCR-" + sigFactorNumbersArray[j]] = sigFactorNumbersArray[j] + " " + chartText8;\n            printHeaderObj4["SIG" + sigFactorNumbersArray[j]] = chartText4;\n\n            line4Array.push((sigFactorNumbersArray[j] + " Q-SV"), (sigFactorNumbersArray[j] + " " + chartText8), chartText4);\n\n        }\n        printArray.push(printHeaderObj4);\n        distinguishingSheetArray.push(line4Array);\n\n        var tempObj,\n            tempObj2,\n            kShift,\n            pShift;\n\n        // line 5\n        var distinguishingSheetArray2 = [];\n\n        // push 05 statements\n        for (var k = 0; k < disting05Length; k++) {\n            var line5Array = [];\n            tempObj = {};\n            kShift = distingStatementsTransferArray05[k];\n\n            // cycle through statement numbers and get statement, factors q score and sort value from results object and set sig level to ""\n            tempObj["No."] = kShift;\n            line5Array.push(kShift);\n\n            tempObj["Statement "] = analysisOutput[0][(kShift - 1)].sortStatement;\n            line5Array.push(analysisOutput[0][(kShift - 1)].sortStatement, kShift);\n\n            tempObj["Num "] = kShift;\n            for (var m = 0; m < outputLength; m++) {\n                tempObj["Q-SV-" + sigFactorNumbersArray[m]] = analysisOutput[m][(kShift - 1)].sortValue;\n                tempObj["Z-SCR-" + sigFactorNumbersArray[m]] = analysisOutput[m][(kShift - 1)].zScore;\n                tempObj["SIG" + sigFactorNumbersArray[m]] = "";\n                line5Array.push((analysisOutput[m][(kShift - 1)].sortValue), (analysisOutput[m][(kShift - 1)].zScore), "");\n            }\n            printArray2.push(tempObj);\n            distinguishingSheetArray2.push(line5Array);\n        }\n\n        // cycle through statement numbers and get statement, factors q score and sort value from results object and set sig level to "*"\n        for (var p = 0; p < disting01Length; p++) {\n            var line6Array = [];\n            tempObj2 = {};\n            pShift = distingStatementsTransferArray01[p];\n\n            tempObj2["No."] = pShift;\n            tempObj2["Statement "] = analysisOutput[0][(pShift - 1)].sortStatement;\n            tempObj2["Num "] = pShift;\n\n            line6Array.push(pShift, (analysisOutput[0][(pShift - 1)].sortStatement), pShift);\n\n            for (var q = 0; q < outputLength; q++) {\n                tempObj2["Q-SV-" + sigFactorNumbersArray[q]] = analysisOutput[q][(pShift - 1)].sortValue;\n                tempObj2["Z-SCR-" + sigFactorNumbersArray[q]] = analysisOutput[q][(pShift - 1)].zScore;\n\n                line6Array.push((analysisOutput[q][(pShift - 1)].sortValue), (analysisOutput[q][(pShift - 1)].zScore));\n\n                if (q === formatDistingArrayForDownload.calledTimes) {\n                    tempObj2["SIG" + sigFactorNumbersArray[q]] = "*";\n                    line6Array.push("*");\n                } else {\n                    tempObj2["SIG" + sigFactorNumbersArray[q]] = "";\n                    line6Array.push("");\n                }\n            }\n            printArray2.push(tempObj2);\n            distinguishingSheetArray2.push(line6Array);\n        }\n\n        var lookupValue = sigFactorNumbersArray[formatDistingArrayForDownload.calledTimes];\n\n        var sortFactorValue = "Z-SCR-" + lookupValue;\n\n        // sort desc\n        var printArray3 = printArray2.sort(function(a, b) {\n            return b[sortFactorValue] - a[sortFactorValue];\n        });\n\n        for (var r = 0; r < printArray3.length; r++) {\n            printArray.push(printArray3[r]);\n        }\n\n        var lookupValue2 = formatDistingArrayForDownload.calledTimes;\n\n        var modifiedIndexValue = [\n            4,\n            7,\n            10,\n            13,\n            16,\n            19,\n            22,\n            25\n        ];\n\n        var indexer = modifiedIndexValue[lookupValue2];\n\n        distinguishingSheetArray2.sort(function(a, b) {\n            if (a[indexer] === b[indexer]) {\n                return 0;\n            } else {\n                return (b[indexer] < a[indexer]) ?\n                    -1 :\n                    1;\n            }\n        });\n\n        var finalSheetArray = distinguishingSheetArray.concat(distinguishingSheetArray2);\n\n        formatDistingArrayForDownload.calledTimes++;\n\n        return [printArray, finalSheetArray];\n    }\n\n    // todo - evenRound the sed comparison values in disting statements function\n    // todo - check to get rid of outputcomplete check - no longer needed i think by hiding download button\n\n    OUTPUT.downloadExcelOutputFile = function() {\n\n        var data = QAV.getState("dataXlsx");\n        var ws_name = QAV.getState("sheetNamesXlsx");\n        var wscols = QAV.getState("colSizes");\n\n        function sheet_from_array_of_arrays(data, opts) {\n            var ws = {};\n            var range = {\n                s: {\n                    c: 10000000,\n                    r: 10000000\n                },\n                e: {\n                    c: 0,\n                    r: 0\n                }\n            };\n            for (var R = 0; R != data.length; ++R) {\n                for (var C = 0; C != data[R].length; ++C) {\n                    if (range.s.r > R)\n                        range.s.r = R;\n                    if (range.s.c > C)\n                        range.s.c = C;\n                    if (range.e.r < R)\n                        range.e.r = R;\n                    if (range.e.c < C)\n                        range.e.c = C;\n                    var cell = {\n                        v: data[R][C]\n                    };\n                    if (cell.v === null)\n                        continue;\n                    var cell_ref = XLSX\n                        .utils\n                        .encode_cell({\n                            c: C,\n                            r: R\n                        });\n\n                    if (typeof cell.v === \'number\')\n                        cell.t = \'n\';\n                    else if (typeof cell.v === \'boolean\')\n                        cell.t = \'b\';\n                    else if (cell.v instanceof Date) {\n                        cell.t = \'n\';\n                        cell.z = XLSX.SSF._table[14];\n                        cell.v = datenum(cell.v);\n                    } else\n                        cell.t = \'s\';\n\n                    ws[cell_ref] = cell;\n                }\n            }\n            if (range.s.c < 10000000)\n                ws[\'!ref\'] = XLSX.utils.encode_range(range);\n\n            return ws;\n        }\n\n        function Workbook() {\n            if (!(this instanceof Workbook))\n                return new Workbook();\n            this.SheetNames = [];\n            this.Sheets = {};\n        }\n\n        // set column widths example\n        // var wscols = [{\n        //         wch: 6\n        //     },\n        //     {\n        //         wch: 7\n        //     },\n        //     {\n        //         wch: 10\n        //     },\n        //     {\n        //         wch: 50\n        //     }\n        // ];\n\n        var wb = new Workbook();\n\n        /* add worksheet to workbook */\n        for (var i = 0; i < ws_name.length; i++) {\n            var ws = sheet_from_array_of_arrays(data[i]);\n            ws[\'!cols\'] = wscols[i];\n            wb\n                .SheetNames\n                .push(ws_name[i]);\n            wb.Sheets[ws_name[i]] = ws;\n        }\n\n        var wbout = XLSX.write(wb, {\n            bookType: \'xlsx\',\n            bookSST: true,\n            type: \'binary\'\n        });\n\n        function s2ab(s) {\n            var buf = new ArrayBuffer(s.length);\n            var view = new Uint8Array(buf);\n            for (var i = 0; i != s.length; ++i)\n                view[i] = s.charCodeAt(i) & 0xFF;\n            return buf;\n        }\n\n        var timeStamp = UTIL.currentDate1() + "_" + UTIL.currentTime1();\n        var projectName = QAV.getState("qavProjectName");\n        var nameFile = \'KenQ_output_\' + projectName + \'_\' + timeStamp + \'.xlsx\';\n\n        saveAs(new Blob([s2ab(wbout)], {\n            type: "application/octet-stream"\n        }), nameFile);\n    };\n\n\n    OUTPUT.downloadCsvOutputFile = function() {\n        var data = QAV.getState("dataXlsx");\n\n        var spacer = ["", "", ""];\n\n        var newDataArray = [];\n        for (var i = 0, iLen = data.length; i < iLen; i++) {\n            for (var j = 0, jLen = data[i].length; j < jLen; j++) {\n                newDataArray.push(data[i][j]);\n            }\n            newDataArray.push(spacer, spacer, spacer, spacer, spacer, spacer);\n        }\n\n        newDataArray.shift();\n\n        var timeStamp = UTIL.currentDate1() + "_" + UTIL.currentTime1();\n        var projectName = QAV.getState("qavProjectName");\n        var nameFile = \'KenQ_output_\' + projectName + \'_\' + timeStamp + ".csv";\n\n        UTIL.exportToCsv(nameFile, newDataArray);\n    };\n\n}(window.OUTPUT = window.OUTPUT || {}, QAV));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,')}});