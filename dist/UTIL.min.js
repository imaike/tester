!function(I){function g(A){if(C[A])return C[A].exports;var n=C[A]={i:A,l:!1,exports:{}};return I[A].call(n.exports,n,n.exports,g),n.l=!0,n.exports}var C={};g.m=I,g.c=C,g.i=function(I){return I},g.d=function(I,C,A){g.o(I,C)||Object.defineProperty(I,C,{configurable:!1,enumerable:!0,get:A})},g.n=function(I){var C=I&&I.__esModule?function(){return I.default}:function(){return I};return g.d(C,"a",C),C},g.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},g.p="",g(g.s=14)}({14:function(module,exports){eval('//Ken-Q Analysis\n//Copyright (C) 2016 Shawn Banasick\n//\n//    This program is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, either version 3 of the License, or\n//    (at your option) any later version.\n\n\n// JSlint declarations\n/* global window, $, d3, resources, window, _, navigator, Blob, URL, ROTA, QAV, document, evenRound*/\n\n\n//***************************************************************************   model\n//******* custom rounding - to evens  ***********************************************\n//***********************************************************************************\n// another attempt at custom rounding to mimic pqmethod? "bankers / gaussian rounding"\nfunction evenRound(num, decimalPlaces) {\n    var d = decimalPlaces || 0;\n    var m = Math.pow(10, d);\n    var n = +(d ? num * m : num).toFixed(8); // Avoid rounding errors\n    var i = Math.floor(n),\n        f = n - i;\n    var e = 1e-8; // Allow for rounding errors in f\n    var r = (f > 0.5 - e && f < 0.5 + e) ?\n        ((i % 2 === 0) ? i : i + 1) : Math.round(n);\n    return d ? r / m : r;\n}\n\nfunction jlog(text, element) {\n    return console.log("var " + text + " = " + JSON.stringify(element) + ";");\n}\n\n\n(function (UTIL, QAV, undefined) {\n    \'use strict\';\n\n    UTIL.checkIfOnline = function () {\n        var isOnline;\n        if (window.location.protocol === \'file:\') {\n            isOnline = false;\n        } else {\n            isOnline = true;\n        }\n        return isOnline;\n    };\n\n\n    /*\n    ********************************************************\n    HELPER FUNCTIONS\n\n    standard deviation and average from:\n    http://derickbailey.com/2014/09/21/calculating-standard-deviation-with-array-map-and-array-reduce-in-javascript/\n\n    variance from:\n    http://www.endmemo.com/js/jstatistics.php\n    ********************************************************\n    */\n\n    UTIL.standardDeviation = function (values) {\n        var avg = UTIL.average(values);\n        var squareDiffs = values.map(function (value) {\n            var diff = value - avg;\n            var sqrDiff = diff * diff;\n            return sqrDiff;\n        });\n        var avgSquareDiff1 = squareDiffs.reduce(function (sum, value) {\n            return sum + value;\n        }, 0);\n        var avgSquareDiff = evenRound((avgSquareDiff1 / (squareDiffs.length - 1)), 8);\n        var stdDev = evenRound((Math.sqrt(avgSquareDiff)), 8);\n        return stdDev;\n    };\n\n    UTIL.variance = function (arr) {\n        var len = 0;\n        var sum = 0;\n        for (var i = 0; i < arr.length; i++) {\n            if (arr[i] === "") {} else if (isNaN(arr[i])) {\n                return 0;\n            } else {\n                len = len + 1;\n                sum = sum + parseFloat(arr[i]);\n            }\n        }\n        var v = 0;\n        if (len > 1) {\n            var mean = sum / len;\n            for (i = 0; i < arr.length; i++) {\n                if (arr[i] === "") {} else {\n                    v = v + (arr[i] - mean) * (arr[i] - mean);\n                }\n            }\n            var output2 = v / len;\n            var output = evenRound(output2, 6);\n            return output;\n        } else {\n            return 0;\n        }\n    };\n\n\n    UTIL.average = function (data) {\n        var sum = data.reduce(function (sum, value) {\n            return sum + value;\n        }, 0);\n        var avg = evenRound((sum / data.length), 8);\n        return avg;\n    };\n\n    UTIL.drawDatatable = function (configObj) {\n        $(configObj.domElement).DataTable({\n            "fixedColumns": configObj.fixed,\n            "retrieve": true,\n            "searching": false,\n            "ordering": configObj.ordering,\n            "info": false,\n            "destroy": true,\n            "scrollY": 800,\n            "scrollCollapse": true,\n            "scrollX": true,\n            "paging": false,\n            "data": configObj.data,\n            "columns": configObj.headers,\n            "columnDefs": configObj.colDefs,\n        });\n\n        var table = $(configObj.domElement).DataTable();\n        $(configObj.domElement + \' tbody\')\n            .on(\'mouseenter\', \'td\', function () {\n                var colIdx = table.cell(this).index().column;\n                $(table.cells().nodes()).removeClass(\'highlight\');\n                $(table.column(colIdx).nodes()).addClass(\'highlight\');\n            })\n            .on(\'mouseleave\', function () {\n                $(table.cells().nodes()).removeClass(\'highlight\');\n                $(table.columns().nodes()).removeClass(\'highlight\');\n            });\n    };\n\n    UTIL.addFactorSelectCheckboxesRotation = function (loopLength) {\n\n        // clear checkboxes if previously added to DOM\n        var checkboxFrameCheck = $("#checkboxFrame");\n        if (checkboxFrameCheck.length > 0) {\n            checkboxFrameCheck.empty();\n        }\n\n        var language = QAV.getState("language");\n        var facText = resources[language].translation.Factor;\n\n        // add checkboxes to DOM according to number factors extracted\n        for (var k = 0; k < loopLength; k++) {\n            var incrementedK = k + 1;\n\n            var checkbox = document.createElement(\'input\');\n            checkbox.type = "checkbox";\n            checkbox.name = "radioCheck";\n            checkbox.value = incrementedK;\n            checkbox.className = "checkbox";\n            checkbox.id = "checkChart" + incrementedK;\n\n            var label = document.createElement(\'label\');\n            label.htmlFor = "checkChart" + incrementedK;\n            label.className = "checkboxLabel";\n            label.appendChild(document.createTextNode(facText + " " + incrementedK));\n\n            document.getElementById("checkboxFrame").appendChild(checkbox);\n            document.getElementById("checkboxFrame").appendChild(label);\n        }\n    };\n\n    // ***************************************************************   model\n    // ***** check for unique names and sanitize  ****************************\n    // ***********************************************************************\n    UTIL.checkUniqueName = function (namesFromExistingData) {\n        var namesUniqueArrayTest2 = _.cloneDeep(namesFromExistingData);\n        var namesUniqueArrayTest = _.uniq(namesUniqueArrayTest2);\n\n        if (namesFromExistingData.length !== namesUniqueArrayTest.length) {\n            for (var i = 0; i < namesFromExistingData.length; i++) {\n                // stripping out "." because of display error in datatables\n                var ii = i + 1;\n                var currentName = namesFromExistingData[i];\n                var currentName2 = currentName.replace(/\\./g, "");\n                namesFromExistingData[i] = ii + "_" + currentName2;\n            }\n        } else {\n            for (var j = 0; j < namesFromExistingData.length; j++) {\n                // stripping out "." because of display error in datatables\n                namesFromExistingData[j] = namesFromExistingData[j].replace(/\\./g, " ");\n            }\n        }\n        return namesFromExistingData;\n    };\n\n    UTIL.calculateSortTriangleShape = function (pyramidShapeNumbers) {\n        var sortPossibleValues = [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\n        var qavSortTriangleShape = [];\n        for (var i = 0; i < sortPossibleValues.length; i++) {\n            for (var j = 0; j < pyramidShapeNumbers[i]; j++) {\n                qavSortTriangleShape.push(sortPossibleValues[i]);\n            }\n        }\n        QAV.setState("qavSortTriangleShape", qavSortTriangleShape);\n        return qavSortTriangleShape;\n    };\n\n    UTIL.sanitizeUserInputText = function (input) {\n        if (_.isNumber(input)) {\n            return input;\n        } else {\n            var output = input.replace(/<script[^>]*?>.*?<\\/<\\/script>/gi, \'\').\n            replace(/<[\\/\\!]*?[^<>]*?>/gi, \'\').\n            replace(/<style[^>]*?>.*?<\\/style>/gi, \'\').\n            replace(/<![\\s\\S]*?--[ \\t\\n\\r]*>/gi, \'\');\n            QAV.setState("output", output);\n            return output;\n        }\n    };\n\n    // helper function for export routines\n    UTIL.threeDigitPadding = function (e) {\n        if (e < 0) {\n            return " " + e;\n        } else if (e < 10) {\n            return "  " + e;\n        } else if (e > 99) {\n            return e;\n        } else {\n            return " " + e;\n        }\n    };\n\n    UTIL.currentDate1 = function () {\n        var currentDate = new Date();\n        var Day = currentDate.getDate();\n        if (Day < 10) {\n            Day = \'0\' + Day;\n        }\n        var Month = currentDate.getMonth() + 1;\n        if (Month < 10) {\n            Month = \'0\' + Month;\n        }\n        var Year = currentDate.getFullYear();\n        var fullDate = Year + "-" + Month + "-" + Day;\n        return fullDate;\n    };\n\n    UTIL.currentTime1 = function () {\n        var currentTime = new Date();\n        var Minutes = currentTime.getMinutes();\n        if (Minutes < 10) {\n            Minutes = \'0\' + Minutes;\n        }\n        var Hour = currentTime.getHours();\n        if (Hour < 10) {\n            Hour = \'0\' + Hour;\n        }\n\n        var Time = String(Hour) + "-" + String(Minutes);\n\n        return Time;\n    };\n\n    UTIL.checkIfValueIsNumber = function (value, inputBoxId) {\n        if (isNaN(value)) {\n            $("#" + inputBoxId).css("border", "red solid 3px");\n        } else {\n            $("#" + inputBoxId).css("border", "lightgray solid 1px");\n        }\n    };\n\n\n    // *************************************************************  Data Model\n    // **********  Archive function to allow undo of rotations *****************\n    // *************************************************************************\n\n    UTIL.archiveFactorScoreStateMatrixAndDatatable = function () {\n\n        // saveRotationArchieveCounter is reset to 1 on centroid extraction function call\n\n        // get current table data including flags\n        var table = $(\'#factorRotationTable2\').dataTable();\n        var chartData = table.fnGetData();\n\n\n        // get current footer data and push into table data\n        var footerData = QAV.getState("expVar");\n\n        // get copy of current state matrix\n        var rotFacStateArray = QAV.getState("rotFacStateArray");\n\n        // get copy of current rotation table headers (for undo bipolar split charting)\n        var columnHeadersArray = QAV.getState("columnHeadersArray");\n\n        var archiveArray = [];\n\n        // store curr rotation data, chartdata with user flags, and headers in archive array\n        archiveArray.push(rotFacStateArray, chartData, columnHeadersArray, footerData);\n\n        // archive both in local storage with key + counter\n        QAV.setState("rotFacStateArrayArchive" + ROTA.saveRotationArchiveCounter("get"), archiveArray);\n\n        ROTA.saveRotationArchiveCounter("increase");\n    };\n\n    // todo - remove autocomplete="off" for Firefox from index.html and use this\n    //    (function () {\n    //        $(window).unload(function() {\n    //            $(\'#existingDatabaseSelect select option\').remove();\n    //\n    //        });\n    //    })();\n    //\n\n\n    // custom export function - adapted from Jossef Harush - https://jsfiddle.net/jossef/m3rrLzk0/\n    UTIL.exportToCsv = function (filename, rows) {\n        var processRow = function (row) {\n            var finalVal = \'\';\n            for (var j = 0; j < row.length; j++) {\n                var value = row[j];\n                if (value === null || value === undefined) {\n                    value = "";\n                }\n                var innerValue = value.toString();\n                var result = innerValue.replace(/"/g, \'""\');\n                if (result.search(/("|,|\\n)/g) >= 0) {\n                    result = \'"\' + result + \'"\';\n                }\n                if (j > 0) {\n                    finalVal += \',\';\n                }\n                finalVal += result;\n            }\n            return finalVal + \'\\n\';\n        };\n\n        var csvFile = \'\';\n        for (var i = 0; i < rows.length; i++) {\n            csvFile += processRow(rows[i]);\n        }\n\n        var blob = new Blob([csvFile], {\n            type: \'text/CSV;charset=UTF-8;\'\n        });\n        if (navigator.msSaveBlob) { // IE 10+\n            navigator.msSaveBlob(blob, filename);\n        } else {\n            var link = document.createElement("a");\n            if (link.download !== undefined) { // feature detection\n                // Browsers that support HTML5 download attribute\n                var url = URL.createObjectURL(blob);\n                link.setAttribute("href", url);\n                link.setAttribute("download", filename);\n                link.style.visibility = \'hidden\';\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n            }\n        }\n    };\n\n\n\n\n\n    UTIL.drawScreePlot = function (dataArray) {\n        var i, data, chartSize, margin, width, height;\n        var tempArray, maxValue, xTicks;\n\n        maxValue = _.max(dataArray);\n        if (maxValue < 10 && maxValue > 5) {\n            maxValue = 10;\n        } else if (maxValue < 5) {\n            maxValue = 5;\n        }\n\n        xTicks = dataArray.length;\n        if (xTicks < 5) {\n            xTicks = 5;\n        }\n\n        data = [];\n        for (i = 0; i < dataArray.length; i++) {\n            tempArray = {};\n            tempArray.eigen = dataArray[i];\n            tempArray.factor = (i + 1);\n            data.push(tempArray);\n        }\n\n        chartSize = $(window).width() / 1.25;\n\n        margin = {\n            top: 150,\n            right: 10,\n            bottom: 40,\n            left: 100\n        };\n\n        width = chartSize - margin.left - margin.right;\n        if (width > 700) {\n            width = 700;\n        }\n        height = width - margin.bottom - 80;\n\n        // get current language value\n        var language = QAV.getState("language");\n        var plotTitle = resources[language].translation["Scree Plot"];\n        var xAxisTitle = resources[language].translation["Factor Number"];\n        var yAxisTitle = resources[language].translation.Eigenvalues;\n\n        // Set the ranges\n        var x = d3.scale.linear().range([0, width]);\n        var y = d3.scale.linear().range([height, 0]);\n\n        // Define the axes    todo - fix bug with subdivide when less than 4 fac\n        var xAxis = d3.svg.axis().scale(x).tickSubdivide(false)\n            .orient("bottom").ticks(8);\n\n        var yAxis = d3.svg.axis().scale(y).tickSubdivide(true)\n            .orient("left").ticks(maxValue);\n\n        // Define the line\n        var valueline = d3.svg.line()\n            .x(function (d) {\n                return x(d.factor);\n            })\n            .y(function (d) {\n                return y(d.eigen);\n            });\n\n        // Adds the svg canvas\n        var svg = d3.select("#screePlotDiv")\n            .append("svg")\n            .attr("id", "screePlotSVG")\n            .attr("width", width + margin.left + margin.right)\n            .attr("height", height + 20 + margin.top + margin.bottom)\n            .append("g")\n            .attr("transform",\n                "translate(" + margin.left + "," + margin.top + ")");\n\n        // Scale the range of the data\n        x.domain([0, 8]);\n        y.domain([0, d3.max(data, function (d) {\n            return d.eigen < 10 ? maxValue : d.eigen;\n        })]);\n\n        // create x axis title\n        svg.append("text")\n            .attr("x", width / 2)\n            .attr("y", height + 45)\n            .style("text-anchor", "middle")\n            .style("font-weight", "bold")\n            .style("margin-top", "10px")\n            .style("font-size", "14px")\n            .style("font-family", "Arial")\n            .text(xAxisTitle);\n\n        // create Y axis label\n        svg.append("text")\n            .attr("transform", "rotate(-90)")\n            .attr("y", 0 - (margin.left / 2))\n            .attr("x", 0 - (height / 2))\n            .attr("dy", "1em")\n            .style("text-anchor", "middle")\n            .style("font-weight", "bold")\n            .style("font-size", "14px")\n            .style("font-family", "Arial")\n            .text(yAxisTitle);\n\n        // create chart title\n        svg.append("text")\n            .attr("x", (width / 2))\n            .attr("y", 0 - (margin.top / 8))\n            .attr("text-anchor", "middle")\n            .style("font-size", "30px")\n            .style("font-family", "Arial")\n            .text(plotTitle);\n\n        // Add the valueline path.\n        svg.append("path")\n            .attr("class", "line")\n            .attr("d", valueline(data))\n            .style({\n                \'stroke\': \'black\',\n                \'fill\': \'none\',\n                \'stroke-width\': \'2px\',\n            });\n\n        // Add the X Axis\n        svg.append("g")\n            .attr("class", "x axis")\n            .attr("transform", "translate(0," + height + ")")\n            .call(xAxis);\n\n        // Add the Y Axis\n        svg.append("g")\n            .attr("class", "y axis")\n            .call(yAxis);\n\n        svg.selectAll(".tick > text")\n            .style("font-family", "Arial");\n\n        svg.selectAll(".dot2")\n            .data(data)\n            .enter().append("circle")\n            .attr("class", "dot2")\n            .attr("cx", function (data) {\n                return x(data.factor);\n            })\n            .attr("cy", function (data) {\n                return y(data.eigen);\n            })\n            .attr("r", 3.5);\n\n        svg.selectAll(\'.axis lne, .axis path\')\n            .style({\n                \'stroke\': \'black\',\n                \'fill\': \'none\',\n                \'stroke-width\': \'1px\'\n            });\n\n        svg.selectAll(".tick:not(:first-of-type) line").attr("stroke", "black").attr("stroke-width", "1px");\n    };\n\n\n\n    // PNG downloads adapted from Nikita Rokotyan http://bl.ocks.org/Rokotyan/0556f8facbaf344507cdc45dc3622177\n    UTIL.downloadPngImages = function (svgString, svgCharacteristics, nameConfig) {\n        var width = parseInt(svgCharacteristics.style("width"), 10) + 2;\n        var height = parseInt(svgCharacteristics.style("height"), 10);\n        svgString2Image(svgString, 2 * width, 2 * height, \'png\', save); // passes Blob and filesize String to the callback\n        var filenamePng = nameConfig + \'.png\';\n\n        function save(dataBlob, filesize) {\n            saveAs(dataBlob, filenamePng); // FileSaver.js function\n        }\n    };\n\n    UTIL.getSVGString = function (svgNode) {\n        svgNode.setAttribute(\'xlink\', \'http://www.w3.org/1999/xlink\');\n        var cssStyleText = getCSSStyles(svgNode);\n        appendCSS(cssStyleText, svgNode);\n\n        var serializer = new XMLSerializer();\n        var svgString = serializer.serializeToString(svgNode);\n        svgString = svgString.replace(/(\\w+)?:?xlink=/g, \'xmlns:xlink=\'); // Fix root xlink without namespace\n        svgString = svgString.replace(/NS\\d+:href/g, \'xlink:href\'); // Safari NS namespace fix\n\n        return svgString;\n\n        function getCSSStyles(parentElement) {\n            var selectorTextArr = [];\n\n            // Add Parent element Id and Classes to the list\n            selectorTextArr.push(\'#\' + parentElement.id);\n            for (var c = 0; c < parentElement.classList.length; c++)\n                if (!contains(\'.\' + parentElement.classList[c], selectorTextArr))\n                    selectorTextArr.push(\'.\' + parentElement.classList[c]);\n\n            // Add Children element Ids and Classes to the list\n            var nodes = parentElement.getElementsByTagName("*");\n            for (var i = 0; i < nodes.length; i++) {\n                var id = nodes[i].id;\n                if (!contains(\'#\' + id, selectorTextArr))\n                    selectorTextArr.push(\'#\' + id);\n\n                var classes = nodes[i].classList;\n                for (var c = 0; c < classes.length; c++)\n                    if (!contains(\'.\' + classes[c], selectorTextArr))\n                        selectorTextArr.push(\'.\' + classes[c]);\n            }\n\n            // Extract CSS Rules\n            var extractedCSSText = "";\n            for (var i = 0; i < document.styleSheets.length; i++) {\n                var s = document.styleSheets[i];\n\n                try {\n                    if (!s.cssRules) continue;\n                } catch (e) {\n                    if (e.name !== \'SecurityError\') throw e; // for Firefox\n                    continue;\n                }\n\n                var cssRules = s.cssRules;\n                for (var r = 0; r < cssRules.length; r++) {\n                    if (contains(cssRules[r].selectorText, selectorTextArr))\n                        extractedCSSText += cssRules[r].cssText;\n                }\n            }\n            return extractedCSSText;\n\n            function contains(str, arr) {\n                return arr.indexOf(str) === -1 ? false : true;\n            }\n        }\n\n        function appendCSS(cssText, element) {\n            var styleElement = document.createElement("style");\n            styleElement.setAttribute("type", "text/css");\n            styleElement.innerHTML = cssText;\n            var refNode = element.hasChildNodes() ? element.children[0] : null;\n            element.insertBefore(styleElement, refNode);\n        }\n    };\n\n    // ** HELPER FUNCTIONS **\n    // svgString2Image\n    function svgString2Image(svgString, width, height, format, callback) {\n        var format = format ? format : \'png\';\n        var imgsrc = \'data:image/svg+xml;base64,\' + btoa(unescape(encodeURIComponent(svgString))); // Convert SVG string to data URL\n        var canvas = document.createElement("canvas");\n        var context = canvas.getContext("2d");\n        canvas.width = width;\n        canvas.height = height;\n        var image = new Image();\n        image.onload = function () {\n            context.clearRect(0, 0, width, height);\n            context.drawImage(image, 0, 0, width, height);\n            canvas.toBlob(function (blob) {\n                var filesize = Math.round(blob.length / 1024) + \' KB\';\n                if (callback) callback(blob, filesize);\n            });\n        };\n        image.src = imgsrc;\n    }\n\n\n}(window.UTIL = window.UTIL || {}, QAV));//# sourceMappingURL=data:application/json;charset=utf-8;base64,')}});