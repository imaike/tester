!function(I){function g(t){if(C[t])return C[t].exports;var A=C[t]={i:t,l:!1,exports:{}};return I[t].call(A.exports,A,A.exports,g),A.l=!0,A.exports}var C={};g.m=I,g.c=C,g.i=function(I){return I},g.d=function(I,C,t){g.o(I,C)||Object.defineProperty(I,C,{configurable:!1,enumerable:!0,get:t})},g.n=function(I){var C=I&&I.__esModule?function(){return I.default}:function(){return I};return g.d(C,"a",C),C},g.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},g.p="",g(g.s=4)}({4:function(module,exports){eval('//Ken-Q Analysis\n//Copyright (C) 2016 Shawn Banasick\n//\n//    This program is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, either version 3 of the License, or\n//    (at your option) any later version.\n\n\n// JSlint declarations\n/* global window, resources, saveAs, Blob, QAV, $, INPUT, d3, localStorage, VIEW, FileReader, XLSX, UTIL, _ */\n\n(function (EXCEL, QAV, undefined) {\n    \'use strict\';\n    //\n    // **************************************************************************  model\n    // ***** Exporting Sorts to PQMethod ***********************************************\n    // *********************************************************************************\n\n    // todo - dry out by refactoring inputNewData functions\n    EXCEL.exportExcelSortsPQM = function () {\n\n        var output = [];\n        $("#existingDatabaseRespondentList li").each(function () {\n            var temp21 = ($(this).text());\n            output.push(temp21);\n        });\n\n        // export file line #1 - calculate number of respondents\n        var temp1, temp1a, temp2, temp3, temp3a, temp3b;\n        temp1 = output.length;\n        temp1a = String(UTIL.threeDigitPadding(temp1));\n\n\n        // grab Project Name\n        temp2 = QAV.getState("qavProjectName");\n\n        // get max range numbers\n        var temp5 = QAV.getState("qavSortTriangleShape");\n        var temp5b = _.min(temp5);\n        var temp5c = _.max(temp5);\n        var temp5d = String(UTIL.threeDigitPadding(+temp5b));\n        var temp5e = String(UTIL.threeDigitPadding(+temp5c));\n\n\n        // get triange shape\n        var temp6 = QAV.getState("multiplierArray");\n        var temp6a = "";\n        var temp6b = "";\n        for (var i = 0; i < 20; i++) {\n            temp6a = String(UTIL.threeDigitPadding(temp6[i]));\n            temp6b += temp6a;\n        }\n\n        // calculating the number of statements\n        temp3 = QAV.getState("qavCurrentStatements");\n        if (temp3.length === 0) {\n            temp3a = temp5.length;\n        } else {\n            temp3a = temp3.length;\n        }\n        temp3b = String(UTIL.threeDigitPadding(temp3a));\n\n        // set PQMethod DAT file line 2\n        var line2 = temp5d + temp5e + temp6b;\n        $("#excelSortExportBox").append("  0" + temp1a + temp3b + " " + temp2);\n        $("#excelSortExportBox").append("\\n");\n        $("#excelSortExportBox").append(line2);\n        $("#excelSortExportBox").append("\\n");\n\n        for (var j = 0; j < output.length; j++) {\n            var temp8 = output[j].split(",");\n\n            var respondentName = temp8[0];\n            var temp8a = INPUT.sanitizeRespondentName(respondentName);\n\n            var temp8c = temp8.slice(1, temp8.length);\n\n            var temp8d = temp8c.toString();\n\n            var testForButtonText = temp8d.slice(-4);\n            if (testForButtonText === "sort") {\n                temp8d = temp8d.replace(/delete sort/g, "");\n            }\n\n            var temp8e = temp8d.replace(/,/g, " ");\n            var temp8f = temp8e.replace(/ -/g, "-");\n            var temp8g = temp8f.replace(/[\\[\\]\']+/g, \'\');\n\n            if (+temp8[1] < 0) {\n                temp8g = "  " + temp8g;\n            } else {\n                temp8g = "   " + temp8g;\n            }\n            var temp9 = temp8a + temp8g;\n            $("#excelSortExportBox").append(temp9);\n            $("#excelSortExportBox").append("\\n");\n        }\n\n        // todo - add check to match statements.length with pyramid sort entry sum\n\n        // pull all data from hidden export prep box\n        var exportData = $(\'#excelSortExportBox\').val();\n\n        var timeStamp = UTIL.currentDate1() + "-" + UTIL.currentTime1();\n\n        var blob = new Blob([exportData], {\n            type: "text/plain;charset=us-ascii"\n        });\n        saveAs(blob, "Ken-Q_PQMethod_Export_" + timeStamp + ".DAT");\n\n        // clear the hidden export box\n        $("#excelSortExportBox").html("");\n    };\n\n    EXCEL.exportStatementsToPqmethod = function () {\n        var temp = QAV.getState("qavCurrentStatements");\n        var $exportBox = $("#excelSortExportBox");\n        for (var i = 0; i < temp.length; i++) {\n            $exportBox.append(temp[i], "\\n");\n        }\n        var exportData = $exportBox.val();\n\n        var timeStamp = UTIL.currentDate1() + "-" + UTIL.currentTime1();\n\n        var blob = new Blob([exportData], {\n            type: "text/plain;charset=us-ascii"\n        });\n        saveAs(blob, "Ken-Q_PQMethod_Statements_" + timeStamp + ".STA");\n\n        // clear the hidden export box\n        $("#excelSortExportBox").html("");\n    };\n\n\n\n    //\n    // **************************************************************************\n    // ***** Import Type 1 or Type 2 Files **************************************\n    // **************************************************************************\n    EXCEL.filePicked = function (e) {\n        var filetype = QAV.getState("typeOfExcelFile");\n        var files = e.target.files[0];\n        var reader = new FileReader();\n        var tester, tester2, tester3, tester4;\n        var tempArray = [];\n        var allWorksheets = [];\n        var data, workbook, worksheet, sheet_name_list;\n        var hasSortsWorksheet = false;\n        var hasStatementsWorksheet = false;\n        var $errorPanel = $("#genericErrorModal .errorPanel");\n        reader.onload = function (e) {\n            data = e.target.result;\n\n            workbook = XLSX.read(data, {\n                type: \'binary\'\n            });\n\n            // iterate through every sheet and pull values\n            sheet_name_list = workbook.SheetNames;\n            sheet_name_list.forEach(function (y) { /* iterate through sheets */\n\n                worksheet = workbook.Sheets[y];\n                if (y === "sorts") {\n                    hasSortsWorksheet = true;\n                    tester = XLSX.utils.sheet_to_csv(worksheet);\n                    tester2 = tester.split(/\\n/);\n\n                    if (filetype === "user-input") {\n                        for (var i = 1; i < 200; i++) {\n                            tester3 = tester2[i].split(\',\');\n                            tempArray.push(tester3);\n                        }\n                    } else if (filetype === "unforced") {\n                        tester3 = tester2.filter(Boolean);\n                        tempArray.push(tester3);\n                    }\n\n                } else if (y === "statements") {\n                    hasStatementsWorksheet = true;\n                    tempArray = [];\n                    tester4 = XLSX.utils.sheet_to_json(worksheet);\n                    tempArray.push(tester4);\n                }\n                allWorksheets.push(tempArray);\n            }); // end iteration of for each\n            if (hasSortsWorksheet === false) {\n                $errorPanel.empty();\n                $errorPanel.append("<p>Can\'t find the \'sorts\' worksheet. Please check your file\'s worksheet names and try again.</p><br>");\n                VIEW.showGenericErrorModal();\n            }\n            if (hasStatementsWorksheet === false) {\n                $errorPanel.empty();\n                $errorPanel.append("<p>Can\'t find the \'statements\' worksheet. Please check your file\'s worksheet names and try again.</p><br>");\n                VIEW.showGenericErrorModal();\n            }\n            if (filetype === "user-input") {\n                formatUploadForDisplay(allWorksheets);\n            } else if (filetype === "unforced") {\n                formatUnforcedUploadForDisplay(allWorksheets);\n            }\n        };\n        reader.readAsBinaryString(files);\n    };\n\n\n    //\n    // ***************************************************************\n    // ***** Import Type 3 - KEN-Q OUTPUT File ***********************\n    // ***************************************************************\n    EXCEL.filePickedKenq = function (e) {\n        var language = QAV.getState("language");\n        var localText1 = resources[language].translation["Project Overview"];\n        var localText2 = resources[language].translation.Statements;\n        var errorPanel = $("#genericErrorModal .errorPanel");\n\n        var files = e.target.files[0];\n        var reader = new FileReader();\n        reader.onload = function (e) {\n            var data = e.target.result;\n\n            var workbook = XLSX.read(data, {\n                type: \'binary\'\n            });\n\n            // iterate through every sheet and pull values\n            var hasSortsWorksheet = false;\n            var hasStatementsWorksheet = false;\n            var hasSortsWorksheetFromKenQ = false;\n            var allWorksheets = [];\n            var sheet_name_list = workbook.SheetNames;\n            sheet_name_list.forEach(function (y) { /* iterate through sheets */\n\n                var worksheet = workbook.Sheets[y];\n\n                var tempArray;\n\n                if (y === localText1) {\n                    tempArray = [];\n                    var tester6 = XLSX.utils.sheet_to_json(worksheet);\n                    tempArray.push(tester6);\n\n                } else if (y === "Q-sorts") {\n                    hasSortsWorksheetFromKenQ = true;\n                    var tester = XLSX.utils.sheet_to_csv(worksheet);\n                    var tester2 = tester.split(/\\n/);\n                    tempArray = [];\n                    tester2.forEach(function (entry) {\n                        var tester3 = entry.split(\',\');\n                        tempArray.push(tester3);\n                    });\n                } else if (y === localText2) {\n                    hasStatementsWorksheet = true;\n                    tempArray = [];\n                    var tester4 = XLSX.utils.sheet_to_json(worksheet);\n                    tempArray.push(tester4);\n                }\n                allWorksheets.push(tempArray);\n            }); // end iteration for each\n            if (hasSortsWorksheetFromKenQ === false) {\n                errorPanel.empty();\n                errorPanel.append("<p>Can\'t find Q-sorts. Please check your file\'s formatting and try again.</p><br>");\n                VIEW.showGenericErrorModal();\n            }\n            if (hasStatementsWorksheet === false) {\n                errorPanel.empty();\n                errorPanel.append("<p>Can\'t find sort statements. Please check your file\'s formatting and try again.</p><br>");\n                VIEW.showGenericErrorModal();\n            }\n            formatKenqUploadForDisplay(allWorksheets);\n        };\n        reader.readAsBinaryString(files);\n    };\n\n\n    //\n    // ***************************************************************  model\n    // ***** Format Type 1 Hand-Coded File for Display **********************\n    // **********************************************************************\n\n    function formatUploadForDisplay(data) {\n        var language = QAV.getState("language");\n        var errorText1 = resources[language].translation["has missing statement numbers"];\n        var errorText2 = resources[language].translation["has an incorrect statement number"];\n        var errorText3 = resources[language].translation["The number of statements in the statments sheet of the Excel file does not match the number of statements in the sorts sheet"];\n        var isNumberOfStatementsCorrect, areThereErrors;\n\n        // QAV #1\n        var qavProjectName = data[0][0][1];\n        QAV.setState("qavProjectName", qavProjectName);\n\n        // // QAV #2  -  todo - fix loop function\n        var inputData1 = data[0];\n        var createMultiplierArrayAndTriangleShape = EXCEL.createMultiplierArrayAndTriangleShape(inputData1);\n        var multiplierArray = createMultiplierArrayAndTriangleShape[0];\n        var qavSortTriangleShape = createMultiplierArrayAndTriangleShape[1];\n        QAV.setState("qavSortTriangleShape", qavSortTriangleShape);\n        QAV.setState("multiplierArray", multiplierArray);\n\n\n        // QAV #3\n        var qavOriginalSortSize = qavSortTriangleShape.length; // number of statements\n        QAV.setState("qavOriginalSortSize", qavOriginalSortSize);\n        // todo - fix qavOriginalSortSize and qavTotalStatements are same - symmetry check functions\n        QAV.setState("qavTotalStatements", qavOriginalSortSize);\n        QAV.setState("originalSortSize", qavOriginalSortSize);\n        // creates array of objects with sort value and statement number\n        var sortData = EXCEL.prepInputData(inputData1, qavOriginalSortSize);\n\n\n        // QAV #4\n\n        var namesData = sortData.shift();\n        var qavRespondentNames = EXCEL.getRespondentNames(namesData);\n        // todo - fix double coverage of res names\n        QAV.setState("qavRespondentNames", qavRespondentNames);\n        QAV.setState("respondentNames", qavRespondentNames);\n\n\n        // QAV #5\n        var qavTotalNumberSorts = qavRespondentNames.length;\n        QAV.setState("qavTotalNumberSorts", qavTotalNumberSorts);\n        QAV.setState("totalNumberSorts", qavTotalNumberSorts);\n\n        // QAV #6   respondent sorts\n        var respondentDataSortsPrep = EXCEL.getRespondentSorts(sortData);\n        var respondentDataSorts3 = respondentDataSortsPrep[0];\n        var statementNumArray = respondentDataSortsPrep[1];\n        QAV.setState("qavRespondentSortsFromDbStored", respondentDataSorts3);\n        var qavRespondentSortsFromDbStored = _.cloneDeep(respondentDataSorts3);\n        var symmData = _.cloneDeep(respondentDataSorts3);\n\n        // QAV #7   project statements\n        var statementData1 = data[1];\n        var qavCurrentStatements = EXCEL.getStatements(statementData1);\n        QAV.setState("qavCurrentStatements", qavCurrentStatements);\n        var statementNumberTestValue = qavCurrentStatements.length;\n\n        // //\n        // // SYMMETRY TESTING\n        // //\n        var checkForNonSymmetry = EXCEL.testSymmetryOfSorts(qavSortTriangleShape, symmData, statementNumArray, statementNumberTestValue);\n        areThereErrors = checkForNonSymmetry[0];\n        isNumberOfStatementsCorrect = checkForNonSymmetry[1];\n\n\n        // Display respondents and sorts OR error messages\n\n        var respondentSorts = [];\n        if (areThereErrors.length === 0 && isNumberOfStatementsCorrect === "true") {\n            for (var qq = 0; qq < qavCurrentStatements.length; qq++) {\n                var sortStatement = qavCurrentStatements[qq];\n                $("#existingDatabaseStatementList").append("<li>" + sortStatement + "</li>");\n            }\n            for (var rr = 0; rr < qavRespondentSortsFromDbStored.length; rr++) {\n                var sortItem = qavRespondentSortsFromDbStored[rr];\n                var sortItem2 = sortItem.join();\n                var sortItem3 = sortItem2.replace(/,/g, " ").replace(/ -/g, "-");\n                if (sortItem3.charAt(0) !== "-") {\n                    sortItem3 = " " + sortItem3;\n                }\n                respondentSorts.push((sortItem3));\n                var respondent = qavRespondentNames[rr];\n                $("#existingDatabaseRespondentList").append("<li>" + respondent + "," + sortItem + "</li>");\n            }\n            // display the download button for PQMethod export - todo - change naming for class\n            $(".jsonDownloadPQ").show();\n        } else {\n            $("#genericErrorModal .errorPanel").empty();\n            for (var t = 0; t < areThereErrors.length; t++) {\n                $("#genericErrorModal .errorPanel").append("<p>" + qavRespondentNames[areThereErrors[t][0]] + " " + areThereErrors[t][1] + "</p><br>");\n            }\n\n            if (isNumberOfStatementsCorrect === "false") {\n                $("#genericErrorModal .errorPanel").append("<h6>" + errorText3 + "</h6>");\n            }\n\n            VIEW.showGenericErrorModal();\n        }\n        QAV.setState("qavRespondentSortsFromDbStored", respondentSorts);\n    }\n\n    EXCEL.testSymmetryOfSorts = function (qavSortTriangleShape, symmData, statementNumArray, statementNumberTestValue) {\n        var language = QAV.getState("language");\n        var errorText1 = resources[language].translation["has missing statement numbers"];\n        var errorText2 = resources[language].translation["has an incorrect Q-sort value"];\n        var testSortTriangleShapeArray = _.cloneDeep(qavSortTriangleShape);\n        var isNumberOfStatementsCorrect, areThereErrors = [];\n\n        // Use D3.js to generate range array to test against\n        var rangeTestArray = d3.range(1, (testSortTriangleShapeArray.length + 1));\n\n        // test for missing values / consistent length\n        var testMax = _.max(rangeTestArray);\n        var testMin = _.min(rangeTestArray);\n        var min, max, testSym;\n        for (var kk = 0; kk < symmData.length; kk++) {\n            max = _.max(statementNumArray[kk]);\n            min = _.min(statementNumArray[kk]);\n            if (max > testMax || min < testMin) {\n                areThereErrors.push([kk, errorText2]);\n            } else {\n                testSym = checkQsortValueMatch(statementNumArray[kk], rangeTestArray);\n                if (testSym > 0) {\n                    areThereErrors.push([kk, errorText1]);\n                }\n            }\n        }\n\n        // check to see if number of statements in statements tab matches number calculated statements\n        if (statementNumberTestValue !== testSortTriangleShapeArray.length) {\n            isNumberOfStatementsCorrect = "false";\n        } else {\n            isNumberOfStatementsCorrect = "true";\n        }\n        // var returnedValue = [areThereErrors, isNumberOfStatementsCorrect];\n        return [areThereErrors, isNumberOfStatementsCorrect];\n    };\n\n\n    EXCEL.getStatements = function (statementData1) {\n        var qavCurrentStatements = [];\n        for (var s = 0, sLen = statementData1[0].length; s < sLen; s++) {\n            var temp12 = statementData1[0][s].Statements;\n            if (temp12 === "" || temp12 === undefined || temp12 === null) {} else {\n                qavCurrentStatements.push(temp12);\n            }\n        }\n        return qavCurrentStatements;\n    };\n\n    EXCEL.getRespondentSorts = function (sortData) {\n        var sortDataTransposed = _.zip.apply(_, sortData);\n        var data2 = [];\n        for (var p = 0; p < sortDataTransposed.length; p++) {\n            var sortedArray1 = _.sortBy(sortDataTransposed[p], function (obj) {\n                return obj.statementNum;\n            });\n            data2.push(sortedArray1);\n        }\n        var statementNumArray = [];\n        var temp2, temp2a;\n        var respondentDataSorts3 = [];\n        for (var q = 0; q < data2.length; q++) {\n            var temp11 = data2[q];\n            var tempArray3 = [];\n            var tempArray33 = [];\n            for (var r = 0; r < temp11.length; r++) {\n                temp2 = temp11[r].sortValue;\n                temp2a = temp11[r].statementNum;\n                tempArray3.push(temp2);\n                tempArray33.push(temp2a);\n            }\n            respondentDataSorts3.push(tempArray3);\n            statementNumArray.push(tempArray33);\n        }\n        var returnedValue = [respondentDataSorts3, statementNumArray];\n        return [respondentDataSorts3, statementNumArray];\n    };\n\n    EXCEL.getRespondentNames = function (namesData) {\n        var qavRespondentNames = [];\n        for (var m = 0, mLen = namesData.length; m < mLen; m++) {\n            var temp1 = namesData[m].statementNum;\n            if (temp1 !== "") {\n                qavRespondentNames.push(temp1);\n            }\n        }\n        qavRespondentNames = UTIL.checkUniqueName(qavRespondentNames);\n        return qavRespondentNames;\n    };\n\n    EXCEL.prepInputData = function (inputData1, qavOriginalSortSize) {\n        var sortData = [];\n        var sortLength = 29 + qavOriginalSortSize;\n        var counter = (inputData1[28].length) - 1;\n\n        for (var k = 28; k < sortLength; k++) {\n            var key = inputData1[k][0];\n            var value;\n            var tempArray1 = [];\n            var j = 1;\n            var tempObj1;\n\n            for (var kr = 0; kr < counter; kr++) {\n                value = inputData1[k][j];\n\n                // catch the respondent names first\n                if (k === 28 && value !== "") {\n                    tempObj1 = {};\n                    tempObj1.sortValue = key;\n                    tempObj1.statementNum = value;\n                    tempArray1.push(tempObj1);\n                } else {\n                    if (value !== "") {\n                        tempObj1 = {};\n                        tempObj1.sortValue = +key;\n                        tempObj1.statementNum = +value;\n                        tempArray1.push(tempObj1);\n                    }\n                }\n                j = j + 1;\n            }\n            sortData.push(tempArray1);\n        }\n        return sortData;\n    };\n\n    EXCEL.createMultiplierArrayAndTriangleShape = function (inputData1) {\n        console.log(inputData1);\n        var qavSortTriangleShape = [];\n        var multiplierArray = [];\n        for (var i = 4; i < 24; i++) {\n            var testValue = +inputData1[i][1];\n            if (testValue < 1 || isNaN(testValue)) {\n                multiplierArray.push(0);\n            } else {\n                var multiplier = +inputData1[i][1];\n                multiplierArray.push(multiplier);\n                var sortValue = +inputData1[i][0];\n                for (var j = 0, jLen = multiplier; j < jLen; j++) {\n                    qavSortTriangleShape.push(sortValue);\n                }\n            }\n        }\n        return [multiplierArray, qavSortTriangleShape];\n    };\n\n\n    //\n    // ********************************************************************  model\n    // ***** Format Type 2 Excel file (Unforced) for Display *********************\n    // ***************************************************************************\n\n    function formatUnforcedUploadForDisplay(data) {\n        var language = QAV.getState("language");\n        var errorText1 = resources[language].translation["has missing Q-sort values"];\n        var errorText2 = resources[language].translation["has an incorrect Q-sort value"];\n        var nonSymSortsDivHeader = resources[language].translation["Non-Symmetric Q-sorts"];\n        var prev;\n        var multiplierArray = [];\n\n        // QAV #1\n        var qavProjectName1 = data[0][0][1];\n        var qavProjectName = qavProjectName1.toString().replace(/,/g, \'\');\n        QAV.setState("qavProjectName", qavProjectName);\n\n        // QAV #2 - calculate sort design array\n        var calcSortTriangleT2 = EXCEL.calcSortTriangleShapeT2(data[0][0][3]);\n        var copyTriangleShape = calcSortTriangleT2[0];\n        var testSortTriangleShapeArray = calcSortTriangleT2[1];\n        var qavSortTriangleShape = calcSortTriangleT2[2];\n        QAV.setState("qavSortTriangleShape", qavSortTriangleShape);\n\n        // calculate multiplierArray\n        multiplierArray = EXCEL.calcMultiplierArrayT2(copyTriangleShape);\n        QAV.setState("multiplierArray", multiplierArray);\n\n        // QAV #3 - set Q-sort size\n        var qavOriginalSortSize = qavSortTriangleShape.length; // number of statements\n        QAV.setState("qavOriginalSortSize", qavOriginalSortSize);\n        // todo - fix qavOriginalSortSize and qavTotalStatements are same - symmetry check functions\n        QAV.setState("qavTotalStatements", qavOriginalSortSize);\n        QAV.setState("originalSortSize", qavOriginalSortSize);\n\n        // QAV #4 - grab respondent names and sorts\n        var sortsDataT2 = data[0][0];\n        var calcSorts = EXCEL.grabRespondentNamesAndSorts(sortsDataT2);\n        var qavRespondentNames = calcSorts[0];\n        var respondentSortsArray = calcSorts[1];\n        var symmetryCheckArray = calcSorts[2];\n        // todo - fix double coverage of res names\n        QAV.setState("qavRespondentNames", qavRespondentNames);\n        QAV.setState("respondentNames", qavRespondentNames);\n\n\n        // QAV #5\n        var qavTotalNumberSorts = qavRespondentNames.length;\n        QAV.setState("qavTotalNumberSorts", qavTotalNumberSorts);\n        QAV.setState("totalNumberSorts", qavTotalNumberSorts);\n\n\n        // QAV #6 - set respondent sorts\n        var qavRespondentSortsFromDbStored = respondentSortsArray;\n        QAV.setState("qavRespondentSortsFromDbStored", qavRespondentSortsFromDbStored);\n\n\n        // QAV #7\n        var statementsDataT2 = data[1][0];\n        var qavCurrentStatements = EXCEL.grabProjectStatements(statementsDataT2);\n        QAV.setState("qavCurrentStatements", qavCurrentStatements);\n\n        //\n        // ERROR TESTING\n        //\n        var checkForErrors = EXCEL.checkForErrors(testSortTriangleShapeArray, symmetryCheckArray);\n        var areThereErrors = checkForErrors[0];\n        var nonSymmetricSorts = checkForErrors[1];\n\n\n        // Display respondents and sorts OR error messages\n        var respondentSorts = [];\n        if (areThereErrors.length === 0) {\n            for (var q = 0; q < qavCurrentStatements.length; q++) {\n                var sortStatement = qavCurrentStatements[q];\n                $("#existingDatabaseStatementList").append("<li>" + sortStatement + "</li>");\n            }\n            for (var rr = 0; rr < qavRespondentSortsFromDbStored.length; rr++) {\n                var sortItem = qavRespondentSortsFromDbStored[rr];\n                var sortItem3 = sortItem.replace(/,/g, " ").replace(/ -/g, "-");\n                if (sortItem3.charAt(0) !== "-") {\n                    sortItem3 = " " + sortItem3;\n                }\n                respondentSorts.push((sortItem3));\n                var respondent = qavRespondentNames[rr];\n                $("#existingDatabaseRespondentList").append("<li>" + respondent + "," + sortItem + "</li>");\n            }\n            if (nonSymmetricSorts.length > 0) {\n                $("#nonSymmetricSortsDiv").append("<h4>" + nonSymSortsDivHeader + "</h4>");\n                for (var w = 0; w < nonSymmetricSorts.length; w++) {\n                    $("#nonSymmetricSortsDiv").append("<p>" + qavRespondentNames[nonSymmetricSorts[w]] + ", </p>");\n                }\n            }\n            // show the download button in analysis data div\n            $(".jsonDownloadPQ").show();\n        } else {\n            $("#genericErrorModal .errorPanel").empty();\n            for (var t = 0; t < areThereErrors.length; t++) {\n                $("#genericErrorModal .errorPanel").append("<p>" + qavRespondentNames[areThereErrors[t][0]] + " " + areThereErrors[t][1] + "</p><br>");\n            }\n            VIEW.showGenericErrorModal();\n        }\n        QAV.setState("qavRespondentSortsFromDbStored", respondentSorts);\n    }\n\n\n\n    EXCEL.checkForErrors = function (testSortTriangleShapeArray, symmetryCheckArray) {\n        var language = QAV.getState("language");\n        var errorText1 = resources[language].translation["has missing statement numbers"];\n        var errorText2 = resources[language].translation["has an incorrect statement number"];\n        var areThereErrors = [];\n        var nonSymmetricSorts = [];\n\n        // test for missing values / consistent length\n        var testMax = _.max(testSortTriangleShapeArray);\n        var testMin = _.min(testSortTriangleShapeArray);\n        var testLen = testSortTriangleShapeArray.length;\n        var min, max, testSym;\n        for (var k = 0, kLen = symmetryCheckArray.length; k < kLen; k++) {\n            // console.log(symmetryCheckArray[k].length);\n            if (symmetryCheckArray[k].length !== testLen) {\n                areThereErrors.push([k, errorText1]);\n            }\n            max = _.max(symmetryCheckArray[k]);\n            min = _.min(symmetryCheckArray[k]);\n            if (max > testMax || min < testMin) {\n                areThereErrors.push([k, errorText2]);\n            }\n            testSym = checkQsortValueMatch(symmetryCheckArray[k], testSortTriangleShapeArray);\n            if (testSym > 0) {\n                nonSymmetricSorts.push(k);\n            }\n        }\n        return [areThereErrors, nonSymmetricSorts];\n    };\n\n    EXCEL.grabProjectStatements = function (statementsDataT2) {\n        var qavCurrentStatements = [];\n        for (var s = 0, sLen = statementsDataT2.length; s < sLen; s++) {\n            var temp12 = statementsDataT2[s].Statements;\n            if (temp12 === "" || temp12 === undefined || temp12 === null) {} else {\n                qavCurrentStatements.push(temp12);\n            }\n        }\n        return qavCurrentStatements;\n    };\n\n    EXCEL.grabRespondentNamesAndSorts = function (sortsDataT2) {\n        var symmetryCheckArray = [];\n        var qavRespondentNames = [];\n        var sortsForDisplay = [];\n        var respondentSortsArray = [];\n        for (var m = 6; m < sortsDataT2.length; m++) {\n            var temp1 = sortsDataT2[m].toString().replace(/,,/g, \'\');\n            // to prevent from reading empty cells as data\n            if (temp1.length < 5) {\n                break;\n            }\n            // convert from array of strings to array of numbers\n            sortsForDisplay.push(temp1);\n            temp1 = removeTrailingCommaFromText(temp1);\n            var temp3 = temp1.split(\',\');\n            var temp4 = temp3.shift();\n            var temp5 = temp3.toString();\n            // check to confirm sort value is numeric\n            if (temp5.match(/[^,-\\d]/)) {\n                var errorPanel = $("#genericErrorModal .errorPanel");\n                errorPanel.empty();\n                errorPanel.append("<p>The Q-sort for respondent " + temp4 + " contains non-numeric data</p>");\n                VIEW.showGenericErrorModal();\n                return;\n            }\n            qavRespondentNames.push(temp4);\n            respondentSortsArray.push(temp5);\n            symmetryCheckArray.push(temp3);\n        }\n        return [qavRespondentNames, respondentSortsArray, symmetryCheckArray];\n    };\n\n    EXCEL.calcMultiplierArrayT2 = function (copyTriangleShape) {\n        var multiplierArray = [];\n        var prev;\n        for (var i = 0, iLen = copyTriangleShape.length; i < iLen; i++) {\n            if (copyTriangleShape[i] !== prev) {\n                multiplierArray.push(1);\n            } else {\n                multiplierArray[multiplierArray.length - 1]++;\n            }\n            prev = copyTriangleShape[i];\n        }\n        // pad the multiplierArray\n        var leadValue = copyTriangleShape[0];\n        var minLeadValue = -6;\n        var padding = Math.abs(minLeadValue - leadValue);\n        for (var p = 0; p < padding; p++) {\n            multiplierArray.unshift(0);\n        }\n        for (var j = 0; j < 20; j++) {\n            if (multiplierArray.length < 20) {\n                multiplierArray.push(0);\n            }\n        }\n        return multiplierArray;\n    };\n\n\n    EXCEL.calcSortTriangleShapeT2 = function (qavSortTriangleShape1) {\n        var qavSortTriangleShape2 = qavSortTriangleShape1.replace(/,,/g, \'\');\n        qavSortTriangleShape2 = removeTrailingCommaFromText(qavSortTriangleShape2);\n        var qavSortTriangleShape3 = qavSortTriangleShape2.replace(/Sort Pattern,/, \'\');\n        var tempTriangle2 = qavSortTriangleShape3.split(",");\n        for (var a in tempTriangle2) {\n            tempTriangle2[a] = parseInt(tempTriangle2[a], 10);\n        }\n        var copyTriangleShape = _.cloneDeep(tempTriangle2);\n        var testSortTriangleShapeArray = _.cloneDeep(tempTriangle2);\n        var qavSortTriangleShape = _.cloneDeep(tempTriangle2);\n        return [copyTriangleShape, testSortTriangleShapeArray, qavSortTriangleShape];\n    };\n\n\n\n\n    // HELPER FUNCTIONS\n\n    function removeTrailingCommaFromText(string) {\n        var lastChar = string.slice(-1);\n        if (lastChar == \',\') {\n            string = string.slice(0, -1);\n        }\n        return string;\n    }\n\n    // strips everything but letters and numbers and "." "-"\n    function sanitizeSortValues(value) {\n        return value.replace(/[^a-zA-Z0-9.-]/g, function () {\n            return \'\';\n        });\n    }\n\n    function checkQsortValueMatch(inputArray, triangleShapeArray) {\n        var testVar = _.cloneDeep(triangleShapeArray);\n        var a = inputArray.sort().join(\',\');\n        var b = testVar.sort().join(\',\');\n        // console.log(JSON.stringify(a));\n        // console.log(JSON.stringify(b));\n        if (a !== b) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n\n    //\n    // ********************************************************************  model\n    // ***** Format Type 3 Ken-Q Output File for Display *************************\n    // ***************************************************************************\n\n    function formatKenqUploadForDisplay(data) {\n        // QAV #1\n        var qavProjectName = data[0][0][0][""];\n\n        QAV.setState("qavProjectName", qavProjectName);\n\n        // QAV #2 - get sort triangle shape\n        var grabSortTriangleShapeT3 = EXCEL.grabSortTriangleShapeT3(data[0][0][4][""]);\n        var qavSortTriangleShape = grabSortTriangleShapeT3[0];\n        var copyTriangleShape = grabSortTriangleShapeT3[1];\n        QAV.setState("qavSortTriangleShape", qavSortTriangleShape);\n\n        // calculate multiplierArray\n        var multiplierArray = EXCEL.calcMultiplierArrayT2(copyTriangleShape);\n        QAV.setState("multiplierArray", multiplierArray);\n\n        // QAV #3\n        var qavOriginalSortSize = qavSortTriangleShape.length; // number of statements\n        QAV.setState("qavOriginalSortSize", qavOriginalSortSize);\n        // todo - fix qavOriginalSortSize and qavTotalStatements are same - symmetry check functions\n        QAV.setState("qavTotalStatements", qavOriginalSortSize);\n        QAV.originalSortSize = qavOriginalSortSize;\n\n        // QAV #4 - pull respondent names from data\n        var qavRespondentNames = EXCEL.grabRespondentNamesT3(data[2]);\n        QAV.setState("qavRespondentNames", qavRespondentNames);\n        QAV.setState("respondentNames", qavRespondentNames);\n\n        // QAV #5 - set total number of sorts\n        var qavTotalNumberSorts = qavRespondentNames.length;\n        QAV.setState("qavTotalNumberSorts", qavTotalNumberSorts);\n        QAV.setState("totalNumberSorts", qavTotalNumberSorts);\n\n        // QAV #6 - get respondent sorts \n        var qavRespondentSortsFromDbStored = EXCEL.grabSortsT3(data[2], qavOriginalSortSize);\n\n        // QAV #7 - get statements\n        var qavCurrentStatements = EXCEL.grabStatementsT3(data[1][0]);\n        QAV.setState("qavCurrentStatements", qavCurrentStatements);\n\n        // SYMMETRY TESTING  -  TODO - ADD Non-Symmetric notification\n        var sortsTestingArray = _.cloneDeep(qavRespondentSortsFromDbStored);\n        var shouldDisplayResults = [];\n\n        // Display respondents and sorts\n        var respondentSorts = [];\n        if (shouldDisplayResults.length === 0) {\n            for (var q = 0; q < qavCurrentStatements.length; q++) {\n                var sortStatement = qavCurrentStatements[q];\n                $("#existingDatabaseStatementList").append("<li>" + sortStatement + "</li>");\n            }\n            for (var r = 0; r < qavRespondentSortsFromDbStored.length; r++) {\n                var sortItem = qavRespondentSortsFromDbStored[r];\n                var sortItem2 = sortItem.join();\n                var sortItem3 = sortItem2.replace(/,/g, " ").replace(/ -/g, "-");\n                if (sortItem3.charAt(0) !== "-") {\n                    sortItem3 = " " + sortItem3;\n                }\n                respondentSorts.push((sortItem3));\n                var respondent = qavRespondentNames[r];\n                $("#existingDatabaseRespondentList").append("<li>" + respondent + "," + sortItem + "</li>");\n            }\n            // display PQMethod export button\n            $(".jsonDownloadPQ").show();\n        }\n        QAV.setState("qavRespondentSortsFromDbStored", respondentSorts);\n    }\n\n    EXCEL.grabStatementsT3 = function (data) {\n        var qavCurrentStatements = [];\n        for (var pp = 1; pp < data.length; pp++) {\n            var temp11 = data[pp][""];\n            if (temp11 === "" || temp11 === undefined || temp11 === null) {} else {\n                qavCurrentStatements.push(temp11);\n            }\n        }\n        return qavCurrentStatements;\n    };\n\n    EXCEL.grabSortsT3 = function (data, qavOriginalSortSize) {\n        var qavRespondentSortsFromDbStored = [];\n        for (var k = 4; k < data.length; k++) {\n            var tempArray1 = [];\n            var isEmpty = data[k][1];\n            if (isEmpty === "" || isEmpty === null || isEmpty === undefined) {} else {\n                var temp2 = data[k][1];\n                var start = sanitizeSortValues(temp2);\n                tempArray1.push(+start);\n                var mLength = qavOriginalSortSize;\n                for (var m = 2; m < mLength; m++) {\n                    var temp3 = data[k][m];\n                    tempArray1.push(+temp3);\n                }\n                var finish2 = data[k][mLength];\n                var finish = sanitizeSortValues(finish2);\n                tempArray1.push(+finish);\n                qavRespondentSortsFromDbStored.push(tempArray1);\n            }\n        }\n        return qavRespondentSortsFromDbStored;\n    };\n\n    EXCEL.grabRespondentNamesT3 = function (data) {\n        var qavRespondentNames2 = [];\n        for (var jj = 1, jjLen = data.length; jj < jjLen; jj++) {\n            var temp1 = data[jj][0];\n            if (temp1 === "") {} else {\n                qavRespondentNames2.push(temp1);\n            }\n        }\n        var qavRespondentNames = qavRespondentNames2.slice(2);\n        return qavRespondentNames;\n    };\n\n    EXCEL.grabSortTriangleShapeT3 = function (qavSortTriangleShape1) {\n        var qavSortTriangleShape = JSON.parse("[" + qavSortTriangleShape1 + "]");\n        var copyTriangleShape = _.cloneDeep(qavSortTriangleShape);\n        var returns = [qavSortTriangleShape, copyTriangleShape];\n        return [qavSortTriangleShape, copyTriangleShape];\n    };\n\n}(window.EXCEL = window.EXCEL || {}, QAV));//# sourceMappingURL=data:application/json;charset=utf-8;base64,')}});