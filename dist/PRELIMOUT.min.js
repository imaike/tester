!function(g){function I(A){if(C[A])return C[A].exports;var n=C[A]={i:A,l:!1,exports:{}};return g[A].call(n.exports,n,n.exports,I),n.l=!0,n.exports}var C={};I.m=g,I.c=C,I.i=function(g){return g},I.d=function(g,C,A){I.o(g,C)||Object.defineProperty(g,C,{configurable:!1,enumerable:!0,get:A})},I.n=function(g){var C=g&&g.__esModule?function(){return g.default}:function(){return g};return I.d(C,"a",C),C},I.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},I.p="",I(I.s=11)}({11:function(module,exports){eval('/* @preserve\nKen-Q Analysis\nCopyright (C) 2016 Shawn Banasick\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n*/\n/*  JSlint declarations\n global resources, d3, VIEW, d3_save_svg, CORR, alasql, window, QAV, $, document, evenRound, UTIL, _  \n */\n\n(function (PRELIMOUT, QAV, undefined) {\n    \'use strict\';\n    // ************************************************************************  view\n    // ******  Preliminary Results 1 - draw factor synthetic Q-sorts visuals ********\n    //  ******************************************************************************\n    PRELIMOUT.showPreliminaryOutput1 = function () {\n        // add synthetic factors visualizations\n        // $("#synFactorVizTitle").append("<h4>" + synFactorVizTitleText + "</h4>"); \n\n        var distStatementDataVizArray = QAV.getState("distStatementDataVizArray");\n        var outputForDataViz = QAV.getState("outputForDataViz");\n        var userSelectedFactors = QAV.getState("userSelectedFactors");\n        // var language = QAV.getState("language");\n        var vizConfig = QAV.getState("vizConfig") || {};\n\n        // console.log(JSON.stringify(outputForDataViz));\n\n\n        // loop through userSelectedFactors to get each synFactorViz\n        for (var i = 0; i < outputForDataViz.length; i++) {\n            // var synFactorVizName = "synFactorViz" + (i + 1);\n\n            // loop through each distinguishing statement in distStatementDataVizArray[i]\n            for (var j = 0; j < distStatementDataVizArray[i].length; j++) {\n                // get statement number\n                var statementId = distStatementDataVizArray[i][j]["No."];\n                // avoid empty objects\n                var sigSymbol;\n                var testValue = parseInt(statementId, 10);\n                if (!isNaN(testValue)) {\n\n                    // get values for calc of direction symbol\n                    var sigFactorZscoreKey = "Z-SCR-" + userSelectedFactors[i];\n                    var sigFactorZscoreValue = distStatementDataVizArray[i][j][sigFactorZscoreKey];\n                    var allFactorZscores = [];\n\n                    // loop through all of the factor z-scores and push to array\n                    for (var k = 0; k < userSelectedFactors.length; k++) {\n                        var temp1 = "Z-SCR-" + userSelectedFactors[k];\n                        var temp2 = distStatementDataVizArray[i][j][temp1];\n                        allFactorZscores.push(temp2);\n                    }\n                    // calc directionSymbol by checking against Zscore in all other factors\n                    var otherFactorZscores = _.pull(allFactorZscores, sigFactorZscoreValue);\n                    // var factorZscoreAverage = d3.mean(otherFactorZscores);\n                    var arrowPointerArrayLeft = [],\n                        arrowPointerArrayRight = [];\n                    for (var kk = 0; kk < otherFactorZscores.length; kk++) {\n                        if (sigFactorZscoreValue - otherFactorZscores[kk] > 0) {\n                            arrowPointerArrayRight.push("1");\n                        } else {\n                            arrowPointerArrayLeft.push("1");\n                        }\n                    }\n\n                    var directionSymbol;\n                    if (otherFactorZscores.length === arrowPointerArrayRight.length && userSelectedFactors.length > 1) {\n                        directionSymbol = vizConfig.shouldUseUnicode !== false ?\n                            "\\u25BA" :\n                            ">>"; // " >>>"; "&#9658;";  right-pointing pointer\n                    } else if (otherFactorZscores.length === arrowPointerArrayLeft.length) {\n                        directionSymbol = vizConfig.shouldUseUnicode !== false ?\n                            "\\u25C4" :\n                            "<<"; //" <<<";  "&#9668;";  left-pointing pointer\n                    } else {\n                        directionSymbol = "";\n                    }\n                    // put it all together and insert into object\n                    var sigFactorName = "SIG" + userSelectedFactors[i];\n                    var sigAt01Level = distStatementDataVizArray[i][j][sigFactorName];\n                    var location = statementId - 1;\n                    if (sigAt01Level === "*") {\n                        sigSymbol = vizConfig.shouldUseUnicode !== false ?\n                            "\\u25C9" :\n                            "** "; //"**";  "&#9673;";  sig at .01\n                    } else if (sigAt01Level === "") {\n                        sigSymbol = vizConfig.shouldUseUnicode !== false ?\n                            "\\u25CE" :\n                            "* "; // "*";  "&#9678;";  sig at .05\n                    }\n                    if (vizConfig.shouldShowZscoreArrows !== false) {\n                        outputForDataViz[i][location].sigVisualization = (sigSymbol + directionSymbol);\n                    } else if (vizConfig.shouldShowZscoreArrows === false) {\n                        outputForDataViz[i][location].sigVisualization = sigSymbol;\n                    }\n                }\n            }\n        }\n        // QAV.setState("outputForDataViz", outputForDataViz);\n\n        PRELIMOUT.drawSynSortTrianglesForOutput(outputForDataViz, userSelectedFactors);\n    };\n\n\n    PRELIMOUT.drawSynSortTrianglesForOutput = function (outputForDataViz, userSelectedFactors) {\n        var sortTriangleShape = QAV.getState("qavSortTriangleShape");\n        var uniques = _.uniq(sortTriangleShape);\n        var currentStatements = QAV.getState("qavCurrentStatements");\n        var language = QAV.getState("language");\n        var synFactorVizTitleText = resources[language].translation["Synthetic Sort for"];\n        var disting05LegendText = resources[language].translation["Distinguishing statement at P < 0.05"];\n        var disting01LegendText = resources[language].translation["Distinguishing statement at P < 0.01"];\n        var legendTitleText = resources[language].translation.Legend;\n        var zscoreHigherLegendText = resources[language].translation["z-Score for the statement is higher than in all of the other factors"];\n        var zscoreLowerLegendText = resources[language].translation["z-Score for the statement is lower than in all of the other factors"];\n        var consensusLegendText = resources[language].translation["Consensus statement (non-significant at P > 0.1)"];\n        var matchingCountLegendText = resources[language].translation["Low number of raw Q-sort matching values (cutoff"];\n        var overlapLegendText = resources[language].translation["Consensus statement with low number of matching values"];\n\n\n        var svgHeight;\n        var elementHeight,\n            symbolSize,\n            vSeparation,\n            svgHeightCalc;\n        var vizConfig = QAV.getState("vizConfig") || {};\n        var cardFontSize = "12px"; // default setting\n        var containerWidth = ($(".container")\n            .width() - 40);\n        var elementWidth,\n            config;\n        var consensusColor = vizConfig.consensusCustomColor;\n        var matchCountColor = vizConfig.matchCountCustomColor;\n        var overlapColor = vizConfig.overlapCustomColor;\n        var consensusIndicator = vizConfig.shouldUseToIndicateConsensus; //"color / stripe"\n        var matchCautionIndicator = vizConfig.shouldUseToIndicateMatchCaution; // color stripe\n        var overlapIndicator = vizConfig.shouldUseToIndicateOverlap; // color crosshatch\n\n        // user adjust indicator types\n        if (consensusIndicator === "stripe") {\n            consensusIndicator = \'url(#hash4_4)\';\n        } else if (consensusIndicator === "color") {\n            consensusIndicator = consensusColor;\n        }\n\n        if (matchCautionIndicator === "color") {\n            matchCautionIndicator = matchCountColor;\n        } else if (matchCautionIndicator === "stripe") {\n            matchCautionIndicator = \'url(#hash4_4b)\';\n        }\n\n        if (overlapIndicator === "color") {\n            overlapIndicator = overlapColor;\n        } else if (overlapIndicator === "crosshatch") {\n            overlapIndicator = \'url(#crosshatch)\';\n        }\n\n        // user adjust card width\n        if (vizConfig.shouldSetCardWidth === true) {\n            elementWidth = vizConfig.cardWidth;\n            containerWidth = (elementWidth * uniques.length) + 10;\n        } else {\n            elementWidth = containerWidth / uniques.length;\n        }\n\n        // user adjust font size for cards\n        if (vizConfig.shouldSetFontSize === true) {\n            cardFontSize = vizConfig.fontSize + "px";\n        }\n\n        // user adjust card height\n        if (vizConfig.shouldSetCardHeight === true) {\n            var newHeightValue = vizConfig.cardHeight;\n            if (newHeightValue === undefined) {\n                newHeightValue = 110;\n            }\n            elementHeight = parseInt(newHeightValue, 10);\n        } else {\n            elementHeight = 110;\n        }\n\n        // user adjust sig symbol size\n        if (vizConfig.shouldSetSymbolFontSize === true) {\n            symbolSize = vizConfig.sigSymbolFontSize + "px";\n        } else {\n            symbolSize = "12px";\n        }\n\n        // user adjust line spacing\n        if (vizConfig.shouldSetLineSpacing === true) {\n            vSeparation = vizConfig.lineSpacing;\n        } else {\n            vSeparation = 15;\n        }\n\n        // set legend symbols\n        if (vizConfig.shouldUseUnicode === true) {\n            vizConfig.legendSymbol05 = \'\\u25CE\';\n            vizConfig.legendSymbol01 = \'\\u25C9\';\n            vizConfig.rightArrow = \'\\u25BA\';\n            vizConfig.leftArrow = \'\\u25C4\';\n        } else {\n            vizConfig.legendSymbol05 = \'*\';\n            vizConfig.legendSymbol01 = \'**\';\n            vizConfig.rightArrow = \'>>\';\n            vizConfig.leftArrow = \'<<\';\n        }\n\n        // prepare statements !false sets as default\n        appendNumbersToStatements(outputForDataViz);\n\n        // auto adjust if no card header info\n        var locateStateY;\n        if (vizConfig.shouldShowMatchCounts === true || vizConfig.shouldIndicateDistinguishing) {\n            locateStateY = 40;\n        } else if (vizConfig.shouldIndicateDistinguishing === undefined) {\n            locateStateY = 40;\n        } else {\n            locateStateY = 20;\n        }\n\n        // user trim statements\n        if (vizConfig.shouldTrimStatements === true) {\n            trimStatments(outputForDataViz);\n        }\n\n        // todo - fix so it doesn\'t trigger multiple times\n        if (vizConfig.shouldShowMatchCounts === true || vizConfig.shouldShowBackgroundColor === true) {\n            calcMatchCounts(outputForDataViz);\n        }\n\n        var isNumber = function isNumber(value) {\n            return typeof value === \'number\' &&\n                isFinite(value);\n        };\n\n        function integrateConsensusStatementIndicators() {\n            var consensusStatementArrays = QAV.getState("formattedConsensusStatements");\n            var consensusNums = [];\n            for (var i = 0, iLen = consensusStatementArrays.length; i < iLen; i++) {\n                var testValue = consensusStatementArrays[i]["No."];\n                if (isNumber(testValue)) {\n                    consensusNums.push(testValue);\n                }\n            }\n\n            for (var j = 0, jLen = outputForDataViz.length; j < jLen; j++) {\n                var counter = 0;\n                for (var k = 0, kLen = outputForDataViz[j].length; k < kLen; k++) {\n                    var conStateNum = consensusNums[counter];\n                    if (outputForDataViz[j][k].statement === conStateNum) {\n                        outputForDataViz[j][k].isConsensusState = true;\n                        counter++;\n                    } else {\n                        outputForDataViz[j][k].isConsensusState = false;\n                    }\n                }\n            }\n        }\n        integrateConsensusStatementIndicators();\n\n\n        function setBackgroundColorFill() {\n            var isConsensus, isCaution, matchingCountPercent;\n            var cutoff = vizConfig.backgroundColorCutoff;\n            var caution = Boolean(vizConfig.shouldShowBackgroundColor);\n            var consensus = Boolean(vizConfig.shouldIndicateConsensus);\n\n            // loop through factors, then Q-sorts\n            for (var i = 0, iLen = outputForDataViz.length; i < iLen; i++) {\n                for (var j = 0, jLen = outputForDataViz[0].length; j < jLen; j++) {\n                    isConsensus = outputForDataViz[i][j].isConsensusState;\n                    matchingCountPercent = outputForDataViz[i][j].matchingCountPercent;\n                    if (matchingCountPercent <= cutoff) {\n                        isCaution = true;\n                    } else {\n                        isCaution = false;\n                    }\n\n                    // if user selects both caution and consensus\n                    if (caution === true && consensus === true) {\n                        // and the card shows\n                        if (isConsensus === true && isCaution === true) {\n                            outputForDataViz[i][j].displayFill = overlapIndicator;\n                        } else if (isConsensus === true && isCaution === false) {\n                            outputForDataViz[i][j].displayFill = consensusIndicator;\n                        } else if (isConsensus === false && isCaution === true) {\n                            outputForDataViz[i][j].displayFill = matchCautionIndicator;\n                        } else {\n                            outputForDataViz[i][j].displayFill = \'#ffffff\';\n                        }\n                    } else if (caution === true && consensus === false) {\n                        if (isCaution === true) {\n                            outputForDataViz[i][j].displayFill = matchCautionIndicator;\n                        } else {\n                            outputForDataViz[i][j].displayFill = \'#ffffff\';\n                        }\n                    } else if (caution === false && consensus === true) {\n                        if (isConsensus === true) {\n                            outputForDataViz[i][j].displayFill = consensusIndicator;\n                        } else {\n                            outputForDataViz[i][j].displayFill = \'#ffffff\';\n                        }\n                    } else {\n                        outputForDataViz[i][j].displayFill = \'#ffffff\';\n                    }\n                } // end card loop\n            } // end factor loop\n        } // end function\n\n        if (vizConfig.shouldShowBackgroundColor === true || vizConfig.shouldIndicateConsensus === true) {\n            setBackgroundColorFill();\n        }\n\n        function appendNumbersToStatements(outputForDataViz) {\n            for (var i = 0; i < outputForDataViz.length; i++) {\n                for (var ii = 0; ii < outputForDataViz[i].length; ii++) {\n                    if (vizConfig.shouldShowOnlyStateNo === true) {\n                        outputForDataViz[i][ii].displayStatements = outputForDataViz[i][ii].statement;\n                    } else if (vizConfig.shouldPrependStateNo === false) {\n                        outputForDataViz[i][ii].displayStatements = outputForDataViz[i][ii].sortStatement;\n                    } else {\n                        outputForDataViz[i][ii].displayStatements = outputForDataViz[i][ii].statement + ". " + outputForDataViz[i][ii].sortStatement;\n                    }\n                }\n            }\n            return outputForDataViz;\n        }\n\n        function trimStatments(outputForDataViz) {\n            for (var i = 0; i < outputForDataViz.length; i++) {\n                for (var ii = 0; ii < outputForDataViz[i].length; ii++) {\n                    if (vizConfig.shouldTrimStatements === true) {\n                        var preSubString = outputForDataViz[i][ii].displayStatements;\n                        outputForDataViz[i][ii].displayStatements = preSubString.substring(0, vizConfig.trimStatementSize);\n                    }\n\n\n                }\n            }\n            return outputForDataViz;\n        }\n\n        function calcMatchCounts(outputForDataViz) {\n            var x = 10;\n\n            var data2 = QAV.getState("matchCount");\n\n            for (var i = 0, iLen = userSelectedFactors.length; i < iLen; i++) {\n                var data1 = data2[i];\n                var data = data1.slice(0);\n                data.sort(function (a, b) {\n                    return a.indexer - b.indexer;\n                });\n\n                for (var jj = 0, jjLen = data.length; jj < jjLen; jj++) {\n                    var indexer = data[jj].indexer;\n                    if (indexer === outputForDataViz[i][jj].statement) {\n                        outputForDataViz[i][jj].matchingCount = data[jj].matchingCounts;\n                        outputForDataViz[i][jj].matchingCountPercent = data[jj].matchingCountsPercent;\n                    } else {\n                        console.log("error - statement ordering doesn\'t match");\n                    }\n                }\n                x = x + 3;\n            }\n            QAV.setState("outputForDataViz", outputForDataViz);\n            return outputForDataViz;\n        }\n\n        function findOccurrences(arr, val) {\n            var i,\n                j,\n                count = 0;\n            for (i = 0, j = arr.length; i < j; i++) {\n                if (arr[i] === val) {\n                    count++;\n                }\n            }\n            return count;\n        }\n\n        function getSvgHeight(arr1) {\n            var heightAdjustment = 0;\n            if (vizConfig.shouldIndicateDistinguishing === true) {\n                heightAdjustment = heightAdjustment + 60;\n            }\n            if (vizConfig.shouldShowZscoreArrows === true && vizConfig.shouldIndicateDistinguishing === true) {\n                heightAdjustment = heightAdjustment + 60;\n            }\n            if (vizConfig.shouldIndicateConsensus === true) {\n                heightAdjustment = heightAdjustment + 30;\n            }\n            if (vizConfig.shouldShowZscoreArrows === true) {\n                heightAdjustment = heightAdjustment + 30;\n            }\n            if (vizConfig.shouldShowBackgroundColor === true) {\n                heightAdjustment = heightAdjustment + 30;\n            }\n            if (vizConfig.shouldIndicateConsensus === true && vizConfig.shouldShowBackgroundColor === true) {\n                heightAdjustment = heightAdjustment + 30;\n            }\n\n            vizConfig.heightAdjustment = heightAdjustment;\n\n            var b = [],\n                prev;\n            var arr = _.cloneDeep(arr1);\n            arr.sort();\n            for (var i = 0; i < arr.length; i++) {\n                if (arr[i] !== prev) {\n                    b.push(1);\n                } else {\n                    b[b.length - 1]++;\n                }\n                prev = arr[i];\n            }\n            if (vizConfig.shouldHaveLegend === true) {\n                svgHeightCalc = (((parseInt(elementHeight, 10) + 10) * d3.max(b)) + 160 + heightAdjustment); // plus 150 for legend\n                return svgHeightCalc;\n            } else {\n                svgHeightCalc = (((parseInt(elementHeight, 10) + 10) * d3.max(b)) + 25);\n                return svgHeightCalc; // 25 for the sort values header\n            }\n        }\n\n        // todo - find cause of error with !=\n        function wordwrap(text, max) {\n            var language = QAV.getState("language");\n            var lines = [];\n            var line;\n            if (vizConfig.shouldSetWidthForAsian === true) {\n                max = vizConfig.asianStatmentLength || 12;\n                lines = text.match(new RegExp(\'.{1,\' + max + \'}\', \'g\'));\n            } else {\n                var regex = new RegExp(".{0," + max + "}(?:\\\\s|$)", "g");\n                while ((line = regex.exec(text)) != "") { // DO NOT CHANGE != TO !== - WILL THROW ERROR\n                    lines.push(line);\n                } // end while\n            } // end 294 else\n            return lines;\n        } // end function\n\n        var temp1,\n            k,\n            instances = [];\n        for (k = 0; k < uniques.length; k++) {\n            temp1 = findOccurrences(sortTriangleShape, uniques[k]);\n            instances.push(temp1);\n        }\n\n        // get x position\n        var xPosLoop = [];\n        var counterX = 0;\n        for (var m = 0; m < instances.length; m++) {\n            for (var p = 0; p < instances[m]; p++) {\n                xPosLoop.push(counterX);\n            }\n            counterX = counterX + 1;\n        }\n\n        // get y position\n        var yPosLoop = [];\n        var counterY;\n        for (var r = 0; r < instances.length; r++) {\n            counterY = 0;\n            for (var s = 0; s < instances[r]; s++) {\n                yPosLoop.push(counterY);\n                counterY = counterY + 1;\n            }\n        }\n\n        // legend location\n        var yLegend = ((d3.max(yPosLoop) + 1) * elementHeight) + 50;\n        var xLegendCenterPoint = ((((d3.max(xPosLoop) + 1) * elementWidth) + 20) / 2);\n        var halfLegendWidth = 285;\n\n        // text wrap variables - set in control panel?\n        var maxLength;\n        var newStatementWidth = vizConfig.statementWidth || 6.75;\n        if (vizConfig.shouldSetStatementWidth === true) {\n            maxLength = parseInt(((elementWidth - newStatementWidth) / 6.75), 10);\n        } else {\n            maxLength = parseInt((elementWidth / 6.75), 10);\n        }\n\n        // calc the height of the svg\n        svgHeight = (getSvgHeight(sortTriangleShape) + 15);\n\n        // get Cutoff from state\n        var backgroundColorCutoff = vizConfig.backgroundColorCutoff;\n\n        // adjust if display is only statement numbers\n        var onlyNumbersXAdjustment = 0;\n        if (vizConfig.shouldShowOnlyStateNo === true) {\n            onlyNumbersXAdjustment = 6;\n        }\n\n\n\n\n        /*\n\n\n        BEGIN visualizations calc loop\n\n\n        */\n        // loop through array to draw visualizations   synFactorVizDiv\n        for (var z = 0; z < outputForDataViz.length; z++) {\n\n            var zz = z + 1;\n\n            var factorVizDivName = "factorVizDiv" + zz;\n            $("#synFactorVizDiv")\n                .append("<div id=" + factorVizDivName + "></div>");\n\n            // appending name outside SVG\n            // $("#" + factorVizDivName)\n            //     .append("<h4 class=\'vizTitles\'>" + synFactorVizTitleText + userSelectedFactors[z] + "</h4>");\n\n            var idName = "synSortSvgNo" + zz;\n\n            // add svg\n            var svg = d3\n                .select("#" + factorVizDivName)\n                .append("svg")\n                .attr(\'width\', (containerWidth + 10))\n                .attr(\'height\', svgHeight)\n                .attr(\'id\', idName)\n                .attr(\'class\', "factorViz");\n\n            var textArray1 = outputForDataViz[z];\n\n            // sort by zScore z-score\n            var textArray = textArray1.slice(0);\n            textArray.sort(function (a, b) {\n                if (a.zScore === b.zScore) {\n                    return b.statement - a.statement;\n                } else {\n                    return a.zScore - b.zScore;\n                }\n            });\n\n            // add location data\n            for (var c = 0; c < textArray.length; c++) {\n                textArray[c].xVal = xPosLoop[c];\n                textArray[c].yVal = yPosLoop[c];\n            }\n\n            var index = svg\n                .selectAll("g.node")\n                .data(uniques, function (d) {\n                    return d;\n                });\n\n            var indexGroup = index\n                .enter()\n                .append("g")\n                .attr("class", "node");\n\n            // draw headers    \n            indexGroup\n                .append(\'rect\')\n                .attr(\'width\', elementWidth)\n                .attr(\'height\', \'20\')\n                .attr(\'x\', function (d) {\n                    return ((uniques.indexOf(d) * elementWidth) + 5);\n                })\n                .attr(\'y\', \'45\')\n                .attr(\'fill\', \'white\')\n                .attr(\'stroke\', \'black\');\n\n            // draw column numbers    \n            indexGroup\n                .append(\'text\')\n                .attr(\'x\', function (d) {\n                    return ((uniques.indexOf(d) * elementWidth) + (elementWidth / 2) + 5);\n                })\n                .attr(\'y\', \'58\') // was 16\n                .style(\'text-anchor\', \'middle\')\n                .attr(\'class\', \'headerText\')\n                .attr(\'font-family\', \'Arial\')\n                .attr(\'font-size\', \'14px\')\n                .attr(\'font-weight\', \'bold\')\n                .attr(\'fill\', \'black\')\n                .text(function (d) {\n                    return d;\n                });\n\n            // associate data with identifiers\n            var index2 = svg\n                .selectAll("g.node2")\n                .data(textArray, function (d) {\n                    return d.statement;\n                });\n\n            // append statement rectangles group    \n            var indexGroup2 = index2\n                .enter()\n                .append("g")\n                .attr("class", "node2");\n\n            // Pattern injection\n            var pattern = svg.append("defs")\n                .append("pattern")\n                .attr({\n                    id: "hash4_4",\n                    width: "8",\n                    height: "8",\n                    patternUnits: "userSpaceOnUse",\n                    patternTransform: "rotate(60)"\n                })\n                .append("rect")\n                .attr({\n                    width: "2",\n                    height: "8",\n                    transform: "translate(0,0)",\n                    fill: consensusColor\n                });\n\n            var pattern2 = svg.append("pattern")\n                .append("pattern")\n                .attr({\n                    id: "hash4_4b",\n                    width: "8",\n                    height: "8",\n                    patternUnits: "userSpaceOnUse",\n                    patternTransform: "rotate(135)"\n                })\n                .append("rect")\n                .attr({\n                    width: "2",\n                    height: "8",\n                    transform: "translate(0,0)",\n                    fill: matchCountColor\n                });\n\n            var pattern3 = svg.append("pattern")\n                .append("pattern")\n                .attr({\n                    id: "crosshatch",\n                    width: "8",\n                    height: "8",\n                    patternUnits: "userSpaceOnUse",\n                    patternTransform: "rotate(135)"\n                })\n                .append("rect")\n                .attr({\n                    width: "8",\n                    height: "8",\n                    transform: "translate(0,0)",\n                    fill: "white",\n                    stroke: overlapColor\n                });\n\n            // draw boxes for statements\n            indexGroup2\n                .append(\'rect\')\n                .attr(\'width\', elementWidth)\n                .attr(\'height\', elementHeight)\n                .attr(\'x\', function (d) {\n                    return ((d.xVal * elementWidth) + 5);\n                })\n                .attr(\'y\', function (d) {\n                    return ((d.yVal * elementHeight) + 60);\n                })\n                .attr(\'fill\', function (d) {\n                    if (vizConfig.shouldShowBackgroundColor === true || vizConfig.shouldIndicateConsensus === true) {\n                        return d.displayFill;\n                    } else {\n                        return \'#ffffff\';\n                    }\n                })\n                //.style(\'background-color\', \'#ffffff\');\n                .attr(\'stroke\', \'black\');\n\n            // draw distinguishing statement symbols    \n            if (vizConfig.shouldIndicateDistinguishing !== false) {\n                indexGroup2\n                    .append(\'text\')\n                    .attr(\'width\', elementWidth)\n                    .attr(\'height\', elementHeight)\n                    .attr(\'font-size\', symbolSize)\n                    .attr(\'x\', function (d) {\n                        return ((d.xVal * elementWidth) + 7); // was 5\n                    })\n                    .attr(\'y\', function (d) {\n                        return ((d.yVal * elementHeight) + 75); //was 38\n                    })\n                    .text(function (d) {\n                        return d.sigVisualization;\n                    });\n            }\n            // draw statements\n            indexGroup2\n                .append(\'text\')\n                .attr(\'class\', \'wrap\')\n                .attr(\'font-family\', \'Arial\')\n                .attr(\'font-size\', cardFontSize)\n                .attr(\'x\', function (d) {\n                    return ((d.xVal * elementWidth) + 8);\n                })\n                .attr(\'y\', function (d) {\n                    return ((d.yVal * elementHeight) + locateStateY + 35); // was 25\n                })\n                .attr(\'dy\', 0)\n                .each(function (d) {\n                    var lines = wordwrap(d.displayStatements, maxLength);\n                    for (var iii = 0; iii < lines.length; iii++) {\n                        d3\n                            .select(this)\n                            .append("tspan")\n                            .attr("dy", vSeparation)\n                            .attr(\'text-anchor\', \'middle\')\n                            .attr("x", (d.xVal * elementWidth) + (elementWidth / 2) + onlyNumbersXAdjustment)\n                            .text(lines[iii]);\n                    }\n                });\n\n            if (vizConfig.shouldShowMatchCounts === true) {\n                indexGroup2\n                    .append(\'text\')\n                    .attr(\'font-family\', \'Arial\')\n                    .attr(\'font-size\', cardFontSize)\n                    .attr(\'x\', function (d) {\n                        return ((d.xVal * elementWidth) + (elementWidth * 0.97));\n                    })\n                    .attr(\'y\', function (d) {\n                        return ((d.yVal * elementHeight) + 83); // was 38\n                    })\n                    .style("text-anchor", "end")\n                    .text(function (d) {\n                        return (d.matchingCount + " (" + d.matchingCountPercent + "%)");\n                    });\n            }\n\n            if (vizConfig.shouldHaveLegend === true) {\n\n                var indexGroup3 = svg\n                    .append("g")\n                    .attr("class", "node3");\n\n                indexGroup3\n                    .append(\'rect\')\n                    .attr(\'height\', 50 + vizConfig.heightAdjustment)\n                    .attr(\'width\', 575)\n                    .attr(\'x\', (xLegendCenterPoint - halfLegendWidth))\n                    .attr(\'y\', (yLegend + 35)) // was -5\n                    .attr(\'fill\', \'white\')\n                    .style(\'stroke\', \'black\');\n\n                indexGroup3\n                    .append(\'text\')\n                    //.attr(\'x\', ((xLegendCenterPoint - halfLegendWidth) + 20)) // half of legend box width\n                    .attr(\'x\', (xLegendCenterPoint - 8)) // half of legend box width\n                    .attr(\'y\', (yLegend + 80)) // was 30\n                    .attr(\'class\', \'legendHeader\')\n                    .attr(\'font-family\', \'Arial\')\n                    .attr(\'font-size\', \'20px\')\n                    .attr(\'text-anchor\', \'middle\')\n                    //.text(\'Symbol\')\n                    .text(legendTitleText)\n                    .attr(\'font-weight\', \'bold\');\n\n                /*\n                                indexGroup3\n                                    .append(\'text\')\n                                    .attr(\'x\', ((xLegendCenterPoint - halfLegendWidth) + 100)) // half of legend box width\n                                    .attr(\'y\', (yLegend + 30))\n                                    .attr(\'class\', \'legendHeader\')\n                                    .attr(\'font-family\', \'Arial\')\n                                    .text(\'Interpretation\')\n                                    .attr(\'font-weight\', \'bold\');\n                                    */\n\n                // set X and Y values for legend\n                var symbolY = 80; // was 34\n                var legendTextY = 79; // was 30\n                var legendSymbolX = 40;\n                var legendTextX = 80;\n\n                // symbols  - !==false is to set as default\n                if (vizConfig.shouldIndicateDistinguishing === true) {\n                    symbolY = symbolY + 28;\n                    indexGroup3\n                        .append(\'text\')\n                        .attr(\'x\', ((xLegendCenterPoint - halfLegendWidth) + legendSymbolX))\n                        .attr(\'y\', (yLegend + symbolY))\n                        .attr(\'font-size\', symbolSize)\n                        .text(vizConfig.legendSymbol05);\n\n                    symbolY = symbolY + 30;\n\n                    indexGroup3\n                        .append(\'text\')\n                        .attr(\'x\', ((xLegendCenterPoint - halfLegendWidth) + legendSymbolX))\n                        .attr(\'y\', (yLegend + symbolY))\n                        .attr(\'font-size\', symbolSize)\n                        .text(vizConfig.legendSymbol01);\n                }\n\n                if (vizConfig.shouldShowZscoreArrows === true && vizConfig.shouldIndicateDistinguishing === true) {\n                    symbolY = symbolY + 30;\n                    indexGroup3\n                        .append(\'text\')\n                        .attr(\'x\', ((xLegendCenterPoint - halfLegendWidth) + legendSymbolX))\n                        .attr(\'y\', (yLegend + symbolY))\n                        .attr(\'font-size\', symbolSize)\n                        .text(vizConfig.rightArrow);\n\n                    symbolY = symbolY + 30;\n                    indexGroup3\n                        .append(\'text\')\n                        .attr(\'x\', ((xLegendCenterPoint - halfLegendWidth) + legendSymbolX))\n                        .attr(\'y\', (yLegend + symbolY))\n                        .attr(\'font-size\', symbolSize)\n                        .text(vizConfig.leftArrow);\n                }\n\n                if (vizConfig.shouldIndicateConsensus === true) {\n                    symbolY = symbolY + 12;\n                    indexGroup3\n                        .append(\'rect\')\n                        .attr(\'height\', 20)\n                        .attr(\'width\', 20)\n                        .attr(\'x\', ((xLegendCenterPoint - halfLegendWidth) + legendSymbolX - 2))\n                        .attr(\'y\', (yLegend + symbolY))\n                        .attr(\'fill\', consensusIndicator)\n                        .style(\'stroke\', \'black\');\n                    symbolY = symbolY + 18;\n                }\n\n                if (vizConfig.shouldShowBackgroundColor === true) {\n                    symbolY = symbolY + 12;\n                    indexGroup3\n                        .append(\'rect\')\n                        .attr(\'height\', 20)\n                        .attr(\'width\', 20)\n                        .attr(\'x\', ((xLegendCenterPoint - halfLegendWidth) + legendSymbolX - 2))\n                        .attr(\'y\', (yLegend + symbolY))\n                        .attr(\'fill\', matchCautionIndicator)\n                        .style(\'stroke\', \'black\');\n                    symbolY = symbolY + 18;\n                }\n\n                if (vizConfig.shouldShowBackgroundColor === true && vizConfig.shouldIndicateConsensus === true) {\n                    symbolY = symbolY + 12;\n                    indexGroup3\n                        .append(\'rect\')\n                        .attr(\'height\', 20)\n                        .attr(\'width\', 20)\n                        .attr(\'x\', ((xLegendCenterPoint - halfLegendWidth) + legendSymbolX - 2))\n                        .attr(\'y\', (yLegend + symbolY))\n                        .attr(\'fill\', overlapIndicator)\n                        .style(\'stroke\', \'black\');\n                    symbolY = symbolY + 18;\n                }\n\n                // if (shouldindi)\n\n                // interpretation text\n                if (vizConfig.shouldIndicateDistinguishing === true) {\n                    legendTextY = legendTextY + 30;\n                    indexGroup3\n                        .append(\'text\')\n                        .attr(\'x\', ((xLegendCenterPoint - halfLegendWidth) + legendTextX))\n                        .attr(\'y\', (yLegend + legendTextY))\n                        .attr(\'font-family\', \'Arial\')\n                        .text(disting05LegendText);\n\n                    legendTextY = legendTextY + 30;\n                    indexGroup3\n                        .append(\'text\')\n                        .attr(\'x\', ((xLegendCenterPoint - halfLegendWidth) + legendTextX))\n                        .attr(\'y\', (yLegend + legendTextY))\n                        .attr(\'font-family\', \'Arial\')\n                        .text(disting01LegendText);\n                }\n                if (vizConfig.shouldShowZscoreArrows === true && vizConfig.shouldIndicateDistinguishing === true) {\n                    legendTextY = legendTextY + 30;\n                    indexGroup3\n                        .append(\'text\')\n                        .attr(\'x\', ((xLegendCenterPoint - halfLegendWidth) + legendTextX))\n                        .attr(\'y\', (yLegend + legendTextY))\n                        .attr(\'font-family\', \'Arial\')\n                        .text(zscoreHigherLegendText);\n\n                    legendTextY = legendTextY + 30;\n                    indexGroup3\n                        .append(\'text\')\n                        .attr(\'x\', ((xLegendCenterPoint - halfLegendWidth) + legendTextX))\n                        .attr(\'y\', (yLegend + legendTextY))\n                        .attr(\'font-family\', \'Arial\')\n                        .text(zscoreLowerLegendText);\n                }\n                if (vizConfig.shouldIndicateConsensus === true) {\n                    legendTextY = legendTextY + 30;\n                    indexGroup3\n                        .append(\'text\')\n                        .attr(\'x\', ((xLegendCenterPoint - halfLegendWidth) + legendTextX))\n                        .attr(\'y\', (yLegend + legendTextY))\n                        .attr(\'font-family\', \'Arial\')\n                        .text(consensusLegendText);\n                }\n\n                if (vizConfig.shouldShowBackgroundColor === true) {\n                    legendTextY = legendTextY + 30;\n                    indexGroup3\n                        .append(\'text\')\n                        .attr(\'x\', ((xLegendCenterPoint - halfLegendWidth) + legendTextX))\n                        .attr(\'y\', (yLegend + legendTextY))\n                        .attr(\'font-family\', \'Arial\')\n                        .text(matchingCountLegendText + " " + vizConfig.backgroundColorCutoff + \'%)\');\n                }\n                if (vizConfig.shouldShowBackgroundColor === true && vizConfig.shouldIndicateConsensus === true) {\n                    legendTextY = legendTextY + 30;\n                    indexGroup3\n                        .append(\'text\')\n                        .attr(\'x\', ((xLegendCenterPoint - halfLegendWidth) + legendTextX))\n                        .attr(\'y\', (yLegend + legendTextY))\n                        .attr(\'font-family\', \'Arial\')\n                        .text(overlapLegendText);\n                }\n            } // end of should have legend\n\n            // add Factor Names inside SVG\n            var newText;\n            if (vizConfig.addCustomFactorName === true && vizConfig.customFactorNames[z]) {\n                newText = vizConfig.customFactorNames[z];\n            } else {\n                var capitalizedFactorName = userSelectedFactors[z].charAt(0).toUpperCase() + userSelectedFactors[z].slice(1);\n                newText = synFactorVizTitleText + capitalizedFactorName;\n            }\n            svg.append(\'text\')\n                .attr(\'x\', 5)\n                .attr(\'y\', 28)\n                .attr(\'font-family\', \'Arial\')\n                .attr(\'font-size\', \'30px\')\n                .attr(\'fill\', \'black\')\n                .text(newText);\n\n\n            var thisFactorName = userSelectedFactors[z].replace(/\\s/g, \'\');\n            var downloadText = resources[language].translation.downloadImage;\n            var $thisSvg = $("#" + factorVizDivName);\n            $thisSvg.append(\'<input class="svgDownloadButton blackHover" name="downloadButton" id="\' + thisFactorName + \'Image"   type="button" value="\' + userSelectedFactors[z] + downloadText + \'" />\');\n            $thisSvg.append(\'<input class="pngDownloadButton blackHover" name="downloadPngButton" id="\' + thisFactorName + \'PngImage"   type="button" value="\' + userSelectedFactors[z] + \' - Download image as PNG\' + \'" />\');\n        } // end z loop to add visualizations\n\n        $(\'.svgDownloadButton\')\n            .on(\'mousedown\', function (event) {\n                var vizConfig = QAV.getState("vizConfig") || {};\n                var shouldAddName = vizConfig.shouldAddCustomName;\n                var svgId = $(this)\n                    .parent()\n                    .find("svg")\n                    .attr(\'id\');\n                var arrayIndexNumber = (svgId.slice(-1) - 1);\n                var factorName = userSelectedFactors[arrayIndexNumber];\n                var cleanFactorName = factorName.replace(/\\s+/g, \'\');\n                var date = UTIL.currentDate1();\n                var time = UTIL.currentTime1();\n                var dateTime = date + "_" + time;\n                var projectName = QAV.getState("qavProjectName");\n                var customName = vizConfig.customName;\n                if (shouldAddName === true) {\n                    if (vizConfig.customNameLocation === "prepend") {\n                        config = {\n                            filename: customName + "_" + projectName + "_" + cleanFactorName + "_" + dateTime\n                        };\n                    } else if (vizConfig.customNameLocation === "append") {\n                        config = {\n                            filename: projectName + "_" + cleanFactorName + "_" + dateTime + "_" + customName\n                        };\n                    } else if (vizConfig.customNameLocation === "replace") {\n                        config = {\n                            filename: customName\n                        };\n                    } else {\n                        config = {\n                            filename: projectName + "_" + cleanFactorName + "_" + dateTime\n                        };\n                    }\n                } else {\n                    config = {\n                        filename: projectName + "_" + cleanFactorName + "_" + dateTime\n                    };\n                }\n                d3_save_svg.save(d3.select(\'#\' + svgId)\n                    .node(), config);\n            });\n\n        $(\'.pngDownloadButton\')\n            .on(\'mousedown\', function (event) {\n                var nameConfig;\n                var vizConfig = QAV.getState("vizConfig") || {};\n                var shouldAddName = vizConfig.shouldAddCustomName;\n                console.log(shouldAddName);\n                var svgId = $(this)\n                    .parent()\n                    .find("svg")\n                    .attr(\'id\');\n                var arrayIndexNumber = (svgId.slice(-1) - 1);\n                var factorName = userSelectedFactors[arrayIndexNumber];\n                var cleanFactorName = factorName.replace(/\\s+/g, \'\');\n                var date = UTIL.currentDate1();\n                var time = UTIL.currentTime1();\n                var dateTime = date + "_" + time;\n                var projectName = QAV.getState("qavProjectName");\n                var customName = vizConfig.customName;\n                console.log(customName);\n                if (shouldAddName === true) {\n                    if (vizConfig.customNameLocation === "prepend") {\n                        nameConfig = customName + "_" + projectName + "_" + cleanFactorName;\n                    } else if (vizConfig.customNameLocation === "append") {\n                        nameConfig = projectName + "_" + cleanFactorName + "_" + customName;\n                    } else if (vizConfig.customNameLocation === "replace") {\n                        nameConfig = customName;\n                    } else {\n                        nameConfig = projectName + "_" + cleanFactorName;\n                    }\n                } else {\n                    nameConfig = projectName + "_" + cleanFactorName;\n                }\n\n                var svgString = UTIL.getSVGString(d3.select(\'#\' + svgId)\n                    .node());\n                var svgCharacteristics = d3.select(\'#\' + svgId);\n                // var width = parseInt(thisSvgCharacteristics.style("width"), 10) + 2;\n                // var height = parseInt(thisSvgCharacteristics.style("height"), 10);\n                UTIL.downloadPngImages(svgString, svgCharacteristics, nameConfig); // passes Blob and filesize \n            });\n\n\n        PRELIMOUT.showPreliminaryOutput1b();\n    };\n\n\n\n    // ************************************************************************  view\n    // ******  Preliminary Results 1b - draw factor score correlations table  ********\n    // ******************************************************************************\n    PRELIMOUT.showPreliminaryOutput1b = function () {\n        var language = QAV.getState("language");\n        var headerText = resources[language].translation["Factor score correlations"];\n\n        // add factor correlations and loadings tables\n        $("#factorCorrelationTableTitle").append("<h4>" + headerText + "</h4>");\n\n        //  todo - fix ordering error of factors - use large demo set with 7 factors to see error and reduce appends to only one\n\n        $("#factorCorrelationTableDiv").append(\'<table id="factorCorrelationTable" class="display compact nowrap cell-border stripe"></table>\');\n\n        // var data = QAV.getState("outputSpreadsheetArray");\n\n        // var newData = data[6];\n\n        var newData = QAV.getState("correlationTableArrayHolder");\n\n\n        //        var columnHeadersArray = data[5][0];\n        var columnHeadersArray = newData[0];\n        var columnHeaders = [];\n        for (var i = 0; i < columnHeadersArray.length; i++) {\n            var tempObj = {};\n            tempObj.title = columnHeadersArray[i];\n            tempObj.class = "dt-head-center dt-body-right";\n            columnHeaders.push(tempObj);\n        }\n\n        columnHeaders[0].class = "dt-head-center dt-body-center";\n\n        newData.shift();\n\n        $("#factorCorrelationTable").DataTable({\n            "retrieve": true,\n            "searching": false,\n            "ordering": false,\n            "info": false,\n            "scrollY": 350,\n            "scrollCollapse": false,\n            "scrollX": false,\n            "paging": false,\n            "data": newData,\n            "columns": columnHeaders\n        });\n\n        var table = $(\'#factorCorrelationTable\').DataTable();\n        var lastIdx = null;\n        $(\'#factorCorrelationTable tbody\').on(\'mouseover\', \'td\', function () {\n                var colIdx = table\n                    .cell(this)\n                    .index()\n                    .column;\n                if (colIdx !== lastIdx) {\n                    $(table.cells().nodes()).removeClass(\'highlight\');\n                    $(table.column(colIdx).nodes()).addClass(\'highlight\');\n                }\n            })\n            .on(\'mouseleave\', function () {\n                $(table.cells().nodes()).removeClass(\'highlight\');\n            });\n        showPreliminaryOutput2();\n    };\n\n    // **********************************************************************  view\n    // ******  Preliminary Results 2 - draw factor score tables  ******************\n    // ****************************************************************************\n\n    // todo - use document fragment to get rid of all these appends\n\n    function showPreliminaryOutput2() {\n\n        var userSelectedFactors = QAV.getState("userSelectedFactors");\n\n        //  todo - fix ordering error of factors - use large demo set with 7 factors to see error\n        //var data = QAV.getState("outputSpreadsheetArray");\n\n\n        var language = QAV.getState("language");\n        var chartText1 = resources[language].translation["Flagged q - sort weights"];\n        var chartText2 = resources[language].translation["Flagged q-sort correlations"];\n        var chartText3 = resources[language].translation["Z-scores, sort values, raw sorts"];\n        var chartText4 = resources[language].translation["Statement Number"];\n        var chartText5 = resources[language].translation.Statement;\n        var chartText6 = resources[language].translation["Z-score"];\n        var chartText7 = resources[language].translation["Sort Values"];\n        var chartText8 = resources[language].translation.Weight;\n\n        var factorWeightFactorArray = QAV.getState("factorWeightFactorArrayHolder");\n        var miniCorrelationArray = QAV.getState("miniCorrelationArrayHolder");\n        var synFactorArray1 = QAV.getState("synFactorArray1Holder");\n\n\n        // START FOR EACH FACTOR LOOP\n        for (var j = 0; j < userSelectedFactors.length; j++) {\n\n            var factorNumber = j + 1;\n\n            var factorH4Label = _.capitalize(userSelectedFactors[j]);\n\n            $("#factorTables").append(\'<div class="resultsLabel1"><h4>\' + factorH4Label + \' - \' + chartText1 + \'</h4></div><table id="factorWeightResults\' + factorNumber + \'" class="display compact nowrap cell-border stripe"></table>\');\n\n            var newWeightData = factorWeightFactorArray[j];\n            newWeightData.shift();\n            var weightColumnHeaders = [{\n                title: "Q-Sort",\n                class: "dt-head-center dt-body-center"\n            }, {\n                title: chartText8,\n                class: "dt-head-center dt-body-center"\n            }];\n\n            $("#factorWeightResults" + factorNumber).DataTable({\n                "retrieve": true,\n                "searching": false,\n                "ordering": true,\n                "order": [\n                    [1, "desc"]\n                ],\n                "info": false,\n                "scrollY": 800,\n                "scrollCollapse": true,\n                "scrollX": true,\n                "paging": false,\n                "data": newWeightData,\n                "columns": weightColumnHeaders,\n                "columnDefs": [{\n                    targets: [0],\n                    className: \'dt-body-center dt-body-name\'\n                }, {\n                    targets: \'_all\',\n                    "createdCell": function (td, cellData, rowData, row, col) {\n                        if (cellData < 0) {\n                            $(td).css(\'color\', \'red\');\n                        }\n                    }\n                }]\n            });\n\n            $("#factorTables").append(\'<div class="resultsLabel1"><h4>\' + factorH4Label + \' - \' + chartText2 + \'</h4></div><table id="factorMiniCorrelResults\' + factorNumber + \'" class="display compact nowrap cell-border stripe"></table>\');\n\n            var newMiniCorrData = miniCorrelationArray[j];\n            var miniCorrColumnHeaders = [{\n                title: "Q-Sort",\n                class: "dt-head-center dt-body-center"\n            }];\n\n            for (var k = 1; k < newMiniCorrData[0].length; k++) {\n                var tempObjMC = {};\n                tempObjMC.title = newMiniCorrData[0][k];\n                tempObjMC.class = "dt-head-center dt-body-center";\n                miniCorrColumnHeaders.push(tempObjMC);\n            }\n\n            newMiniCorrData.shift();\n\n            $("#factorMiniCorrelResults" + factorNumber).DataTable({\n                "retrieve": true,\n                "searching": false,\n                "ordering": false,\n                "info": false,\n                "scrollY": 800,\n                "scrollCollapse": true,\n                "scrollX": true,\n                "paging": false,\n                "data": newMiniCorrData,\n                "columns": miniCorrColumnHeaders,\n                "columnDefs": [{\n                    targets: [0],\n                    className: \'dt-body-center dt-body-name\'\n                }, {\n                    targets: \'_all\',\n                    "createdCell": function (td, cellData, rowData, row, col) {\n                        if (cellData < 0) {\n                            $(td).css(\'color\', \'red\');\n                        }\n                    }\n                }]\n            });\n\n            $("#factorTables").append(\'<div class="resultsLabel1"><h4>\' + factorH4Label + \' - \' + chartText3 + \'</h4></div><table id="prelimResults\' + factorNumber + \'" class="display compact nowrap cell-border stripe"></table>\');\n\n            var newData = synFactorArray1[j];\n\n            // resort back to high to low z-score sort\n            newData\n                .sort(function (a, b) {\n                    if (b[chartText6] === a[chartText6]) {\n                        return a[chartText4] - b[chartText4];\n                    } else {\n                        return b[chartText6] - a[chartText6];\n                    }\n                });\n\n            var columnHeadersArray = Object.keys(newData[0]);\n\n            // the set leftmost 4 columns\n            var columnHeaders = [{\n                title: chartText4,\n                class: "dt-head-center dt-body-center",\n                "data": chartText4\n            }, {\n                title: chartText5,\n                class: "dt-head-center dt-body-left",\n                "data": chartText5\n            }, {\n                "data": chartText6,\n                title: chartText6,\n                class: "dt-head-center dt-body-right"\n            }, {\n                title: chartText7,\n                class: "dt-head-center dt-body-center",\n                "data": chartText7\n            }];\n            // looping in all of the raw sort column headers\n            for (var i = 4; i < columnHeadersArray.length; i++) {\n                var tempObj = {};\n                tempObj.title = columnHeadersArray[i];\n                tempObj.class = "dt-head-center dt-body-center";\n                tempObj.data = columnHeadersArray[i];\n                columnHeaders.push(tempObj);\n            }\n\n            $("#prelimResults" + factorNumber).DataTable({\n                "fixedColumns": {\n                    leftColumns: 1\n                },\n                "retrieve": true,\n                "searching": false,\n                "ordering": true,\n                "order": false,\n                "info": false,\n                "scrollY": 800,\n                "scrollCollapse": true,\n                "scrollX": true,\n                "paging": false,\n                "data": newData,\n                "columns": columnHeaders\n            });\n\n        }\n    }\n\n    // **********************************************************************  view\n    // ******  dynamicallly append checkboxs to select factors for analysis *******\n    // ****************************************************************************\n    PRELIMOUT.appendFactorSelectionCheckboxes = function () {\n\n        var hasSplitFactor = QAV.getState("hasSplitFactor");\n        var j,\n            len,\n            k,\n            temp5,\n            pcaFactorLabels = [];\n        // read in factor labels to generate checkboxes (and checking for split factor)\n        var factorsToSelect;\n\n        var loopLen;\n        loopLen = QAV.getState("numFactorsRetained");\n\n        if (hasSplitFactor > 0) {\n\n            var headers = QAV.getState("factorLabels");\n            var i,\n                temp1,\n                temp3;\n            factorsToSelect = [];\n\n            headers.shift();\n            headers.shift();\n            headers.shift();\n            headers.pop();\n\n            for (i = 0; i < headers.length; i++) {\n                temp1 = headers[i].title;\n                if (temp1 !== "flag") {\n                    temp3 = temp1.replace(/Ftr/g, \'Factor\');\n                    factorsToSelect.push(temp3);\n                }\n            }\n            loopLen = factorsToSelect.length;\n\n        } else {\n\n            if (QAV.typeOfFactor === "PCA") {\n                for (k = 0, len = QAV.numFactorsRetained; k < len; k++) {\n                    temp5 = "factor " + (k + 1);\n                    pcaFactorLabels.push(temp5);\n                }\n\n                factorsToSelect = pcaFactorLabels;\n            } else {\n\n                factorsToSelect = QAV.getState("factorLabels");\n                if (factorsToSelect[0] === "") {\n                    factorsToSelect.shift();\n                }\n            }\n        }\n\n        QAV.setState("factorLabelsArray", factorsToSelect);\n\n        // check to see if checkboxes are already appended, and if so remove them\n        VIEW.removeOutputFactorCheckboxes();\n\n        //  generate and append checkboxes\n        for (j = 0; j < loopLen; j++) {\n\n            var checkbox = document.createElement(\'input\');\n            checkbox.type = "checkbox";\n            checkbox.name = "analysisFactors";\n            checkbox.className = "factorSelectBox";\n            checkbox.value = "value";\n            checkbox.id = factorsToSelect[j];\n\n            var label = document.createElement(\'label\');\n            label.htmlFor = factorsToSelect[j];\n            label.classList.add("checkboxLabel");\n            label.appendChild(document.createTextNode(factorsToSelect[j]));\n            document\n                .getElementById("selectFactorsForOutputDiv")\n                .appendChild(checkbox);\n            document\n                .getElementById("selectFactorsForOutputDiv")\n                .appendChild(label);\n        }\n    };\n\n\n    // *****************************************************************************  \n    // **************  pull user-selected factors for analysis *********************\n    // *****************************************************************************\n\n    PRELIMOUT.getFactorsForAnalysis = function () {\n        var checkboxes = document.getElementsByName(\'analysisFactors\');\n        var vals = [];\n        for (var i = 0; i < checkboxes.length; i++) {\n            if (checkboxes[i].checked) {\n                vals.push(checkboxes[i].id);\n            }\n        }\n        QAV.setState("userSelectedFactors", vals);\n    };\n\n    // *********************************************************************  model\n    // **************  pull loadings that have been flagged  **********************\n    // ****************************************************************************\n\n    PRELIMOUT.pullFlaggedFactorLoadings = function () {\n        var numberFactorsExtracted = parseInt(QAV.getState("numberFactorsExtracted"));\n        var results = QAV.getState("results");\n        var jLoopLen = (numberFactorsExtracted * 2) + 3;\n        var significantLoadingsArray = [];\n        var i,\n            j;\n        var isLoadingSignificant,\n            factorNumber,\n            respondentName,\n            factorLoading;\n        // todo check to see if this can be removed see bind dump button function\n        var iLoopLen = results.length;\n        var factorLabelsArray = QAV.getState("factorLabelsArray");\n        var loadingSortCheckArray = [];\n        var userSelectedFactors = QAV.getState("userSelectedFactors");\n\n        // loop thru results array to find user-selected factor loadings\n        for (i = 0; i < iLoopLen; i++) {\n            var factorNumberCount = 0;\n\n            var tempArray = [];\n            for (j = 4; j < jLoopLen; j += 2) {\n                isLoadingSignificant = results[i][j];\n                factorNumber = factorLabelsArray[factorNumberCount];\n                factorNumberCount = factorNumberCount + 1;\n                respondentName = results[i][1];\n                factorLoading = results[i][j - 1];\n\n                // if flagged and in a user-selected factor\n                if (isLoadingSignificant === "true" && (userSelectedFactors.indexOf(factorNumber) > -1)) {\n                    tempArray.push(factorNumber, respondentName, factorLoading);\n                    loadingSortCheckArray.push(factorNumber);\n                }\n            }\n            if (tempArray.length === 0) {\n                tempArray.push(99, respondentName, "Unique Sort");\n                significantLoadingsArray.push(tempArray);\n            } else {\n                significantLoadingsArray.push(tempArray);\n            }\n        }\n\n        // check for sorts flagged for more than one factor user error\n        var multipleFlags;\n        var problemSort;\n        for (var k = 0; k < significantLoadingsArray.length; k++) {\n\n            var test = significantLoadingsArray[k];\n\n            if (test.length > 3) {\n                problemSort = significantLoadingsArray[k][1];\n                multipleFlags = false;\n            }\n        }\n\n        // check for user-selected factors with no loading sorts user error\n        var loadingSortCheck = $(userSelectedFactors)\n            .not(loadingSortCheckArray)\n            .length === 0;\n        var language = QAV.getState("language");\n        var appendText1 = resources[language].translation["The sort for respondent"];\n        var appendText2 = resources[language].translation["is flagged for more than one factor"];\n\n        if (loadingSortCheck === false) {\n            VIEW.showNoSortsFlaggedOnFactorModal();\n            // prevent display output of factors\n            return "false";\n\n        } else if (multipleFlags === false) {\n            $("#multipleFlagModalMessageDiv p").remove();\n            $("#multipleFlagModalMessageDiv").append("<p>" + appendText1 + problemSort + appendText2 + "</p>");\n            VIEW.showSortFlaggedOnMultipleFactorsModal();\n            return "false";\n        } else {\n            significantLoadingsArray\n                .sort(function (a, b) {\n                    if (a[0] < b[0]) {\n                        return -1;\n                    }\n                    if (a[0] > b[0]) {\n                        return 1;\n                    }\n                    return 0;\n                });\n            computeFactorWeights(significantLoadingsArray);\n        }\n    };\n\n    function computeFactorWeights(significantLoadingsArray) {\n        // source code line 4440\n\n        for (var i = 0; i < significantLoadingsArray.length; i++) {\n            var f = evenRound((significantLoadingsArray[i][2]), 8);\n            var f2 = evenRound((f * f), 8);\n            var oneMinusF2,\n                w;\n            if (f2 === 1) {\n                oneMinusF2 = f2;\n                w = evenRound((f / oneMinusF2), 8);\n            } else if (f2 > 1) {\n                oneMinusF2 = evenRound((1 - f2), 8);\n                w = evenRound((f / -oneMinusF2), 8);\n            } else {\n                oneMinusF2 = evenRound((1 - f2), 8);\n                w = evenRound((f / oneMinusF2), 8);\n            }\n            significantLoadingsArray[i].push(w);\n        }\n        QAV.setState("sortWeights", significantLoadingsArray);\n\n        findLargestFactorWeights(significantLoadingsArray);\n    }\n\n    // create array of highest values to use later for calcuations\n    function findLargestFactorWeights(significantLoadingsArray) {\n\n        // remove unique sorts (value 99) from array\n        var factorSelect = _.filter(significantLoadingsArray, function (n) {\n            return n[0] !== 99;\n        });\n\n        // pull out just factor number and W value to array\n        var factorNumbersArray2 = [];\n        var factorNumbersArray = [];\n        _(factorSelect).forEach(function (n) {\n            var tempArray = [];\n            var factorNumber = n[0];\n            factorNumbersArray2.push(factorNumber);\n            var factorWeightW = n[3];\n            tempArray[0] = factorNumber;\n            tempArray[1] = factorWeightW;\n            factorNumbersArray.push(tempArray);\n        }).value();\n\n        var sigArray = _.cloneDeep(factorNumbersArray2);\n\n        // get unique array of significant factors labels\n        var sigFactorNumbersArray = _.uniq(sigArray);\n\n        var maxFactorValuesArray = [];\n        var factorValue = 0;\n        _(sigFactorNumbersArray).forEach(function () {\n            var temp = _(factorNumbersArray).filter(function (j) {\n                return j[0] === sigArray[factorValue];\n            });\n\n            var tempArray2 = [];\n            var maxFactorLoadings = _(temp).forEach(function (q) {\n                var tempVar3 = evenRound((Math.abs(1 / q[1])), 8);\n                tempArray2.push(tempVar3);\n            }).value();\n\n            // numbers inverted, so using min rather max somewhere else\n            var maxFactorValue = _.min(tempArray2);\n\n            maxFactorValuesArray.push(maxFactorValue);\n\n            factorValue = factorValue + 1;\n        }).value();\n\n        // array\n        QAV.setState("sigFactorNumbersArray", sigFactorNumbersArray);\n\n        // highest values\n        weightFactorScores(significantLoadingsArray, sigFactorNumbersArray, maxFactorValuesArray);\n    }\n\n    function weightFactorScores(significantLoadingsArray, sigFactorNumbersArray, maxFactorValuesArray) {\n        // produces array with factor number, flagged respondent name, and 2 weight values\n        var significantFactors = [];\n        for (var j = 0, jLen = sigFactorNumbersArray.length; j < jLen; j++) {\n            for (var k = 0; k < significantLoadingsArray.length; k++) {\n                var temp1 = significantLoadingsArray[k][0];\n                var temp2 = sigFactorNumbersArray[j];\n                if (temp1 === temp2) {\n                    var divisor = maxFactorValuesArray[j];\n                    significantLoadingsArray[k][3] = evenRound((significantLoadingsArray[k][3] * divisor), 8) * 10;\n                    significantFactors.push(significantLoadingsArray[k]);\n                }\n            }\n        }\n        weightRawSorts(significantFactors);\n    }\n\n    function weightRawSorts(significantFactors) {\n        // produces MD array with factor number, flagged respondent, weighted values for each statement (for each flagged respondent)\n        var respondentNames = QAV.getState("qavRespondentNames");\n        var rawSorts = QAV.getState("positiveShiftedRawSorts");\n        var weightedSorts = [];\n        // normalize weights by sort\n        var normalizedSorts = [];\n        for (var s = 0, sLen = rawSorts.length; s < sLen; s++) {\n            var tempArray2a = [];\n            var sortAverage = UTIL.average(rawSorts[s]);\n            var sortStandardDeviation = UTIL.standardDeviation(rawSorts[s]);\n            for (var r = 0, rLen = rawSorts[s].length; r < rLen; r++) {\n                var zScore = evenRound(((rawSorts[s][r] - sortAverage) / sortStandardDeviation), 3);\n                tempArray2a.push(zScore);\n            }\n            normalizedSorts.push(tempArray2a);\n        }\n        var rawSortsPrep = _.zip(respondentNames, normalizedSorts);\n\n        // multiply normaized sorts by weighting value\n        for (var i = 0, iLen = significantFactors.length; i < iLen; i++) {\n            for (var j = 0, jLen = rawSortsPrep.length; j < jLen; j++) {\n                var temp1 = significantFactors[i][1];\n                var temp2 = rawSortsPrep[j][0];\n                var temp3 = rawSortsPrep[j][1];\n                var temp4 = significantFactors[i][3];\n                var tempArray = [];\n                if (temp1 === temp2) {\n                    var newWeightedSort = _.map(temp3, roundNumbers);\n                    // push factor number\n                    tempArray.push(significantFactors[i][0]);\n                    // push respondent name\n                    tempArray.push(temp1);\n                    tempArray.push(newWeightedSort);\n                    weightedSorts.push(tempArray);\n                }\n            }\n        }\n        combineWeightedSorts(weightedSorts);\n\n        function roundNumbers(n) {\n            var temp5 = evenRound((n * temp4), 8);\n            return temp5;\n        }\n    }\n\n    function combineWeightedSorts(weightedSorts) {\n        var sigFactorNumbersArray1 = QAV.getState("sigFactorNumbersArray");\n        var sigFactorNumbersArray = sigFactorNumbersArray1.sort();\n        var tempArray2,\n            summedWeightedSorts;\n\n        summedWeightedSorts = [];\n        var sigSortsArray = [];\n\n        // looping through all selected factor names in sig factor array\n        for (var i = 0, iLen = sigFactorNumbersArray.length; i < iLen; i++) {\n            var tempArray4 = [];\n            var tempArray1 = [];\n            var factor = sigFactorNumbersArray[i];\n            tempArray2 = [];\n            var tempObj2 = {};\n\n            // loop through all data for all factors and pull data for only for selected factors\n            for (var j = 0, jLen = weightedSorts.length; j < jLen; j++) {\n                var temp2 = weightedSorts[j][0]; // gives number 1 or 2 or 3 etc...\n                if (temp2 === factor) {\n                    tempArray1.push(weightedSorts[j][2]); // pushes weight for each statement\n                    tempArray2.push(weightedSorts[j][1]); // pushes flagged sort respondent name\n                }\n            }\n\n            // pushes factor numbers and representative sorts into array\n            tempArray4.push(factor); // array of names of user selected factors\n            tempArray4.push(tempArray2); // array of flagged respondent names\n\n            // converts array of factor numbers and rep sorts to object\n            tempObj2["Factor Number"] = factor;\n            tempObj2.SigSorts = tempArray2;\n            sigSortsArray.push(tempObj2);\n\n            // summing weights for statements across flagged sorts for each factor\n            var tempArray3 = [];\n            for (var k = 0, kLen = tempArray1[0].length; k < kLen; k++) {\n                var temp3 = 0;\n                for (var m = 0, mLen = tempArray1.length; m < mLen; m++) {\n                    temp3 = evenRound((temp3 + tempArray1[m][k]), 3);\n                }\n                tempArray3.push(temp3);\n            }\n\n            // re-normalize factor loadings after summing across statements\n            var tempArray3a = [];\n            var sortAverage = UTIL.average(tempArray3);\n            var sortStandardDeviation = UTIL.standardDeviation(tempArray3);\n            for (var r = 0, rLen = tempArray3.length; r < rLen; r++) {\n                var zScore = evenRound(((tempArray3[r] - sortAverage) / sortStandardDeviation), 3);\n                tempArray3a.push(zScore);\n            }\n            tempArray4.push(tempArray3a);\n            summedWeightedSorts.push(tempArray4);\n        }\n        QAV.setState("sigSortsArray", sigSortsArray);\n        calculateZScores(summedWeightedSorts);\n    }\n\n    function calculateZScores(summedWeightedSorts) {\n        // changing format from MD array to array of objects\n        // add in statements\n        var statements = QAV.getState("qavCurrentStatements");\n        var sigFactorNumbersArray = QAV.getState("sigFactorNumbersArray");\n        // so that the diff 2 factors output is correct\n        sigFactorNumbersArray.sort();\n        var length = summedWeightedSorts.length;\n        var zScoreArray = [];\n\n        for (var i = 0; i < length; i++) {\n            var zScoreTempObj = {};\n            zScoreTempObj.factor = sigFactorNumbersArray[i];\n            var tempArray1 = [];\n            var zScoreTempArray = [];\n            for (var j = 0; j < summedWeightedSorts[0][2].length; j++) {\n                var tempObj = {};\n                var zScore = evenRound((summedWeightedSorts[i][2][j]), 3);\n\n                tempObj.factor = sigFactorNumbersArray[i];\n                tempObj.statement = (j + 1);\n                tempObj.sortStatement = statements[j];\n                tempObj.zScore = zScore;\n\n                zScoreTempArray.push(zScore);\n                tempArray1.push(tempObj);\n            }\n            zScoreArray.push(tempArray1);\n            zScoreTempObj["FactorZscores" + sigFactorNumbersArray[i]] = zScoreTempArray;\n        }\n        assignFactorScores(zScoreArray);\n    }\n\n    function assignFactorScores(zScoreArray) {\n        var qavSortTriangleShape = QAV.getState("qavSortTriangleShape");\n        var sortedZScoreArray = [];\n        for (var i = 0; i < zScoreArray.length; i++) {\n            var factorNumbers = zScoreArray[i];\n\n            var temp1 = _.cloneDeep(factorNumbers);\n\n            temp1.sort(function (a, b) {\n                if (a.zScore === b.zScore) {\n                    return b.statement - a.statement;\n                } else {\n                    return a.zScore - b.zScore;\n                }\n            });\n\n            for (var j = 0; j < qavSortTriangleShape.length; j++) {\n                temp1[j].sortValue = qavSortTriangleShape[j];\n                temp1[j].sigVisualization = "";\n            }\n            temp1.sort(function (a, b) {\n                return a.statement - b.statement;\n            });\n            sortedZScoreArray.push(temp1);\n        }\n        QAV.setState("analysisOutput", sortedZScoreArray);\n    }\n\n}(window.PRELIMOUT = window.PRELIMOUT || {}, QAV));//# sourceMappingURL=data:application/json;charset=utf-8;base64,')}});