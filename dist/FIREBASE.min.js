!function(I){function g(A){if(C[A])return C[A].exports;var n=C[A]={i:A,l:!1,exports:{}};return I[A].call(n.exports,n,n.exports,g),n.l=!0,n.exports}var C={};g.m=I,g.c=C,g.i=function(I){return I},g.d=function(I,C,A){g.o(I,C)||Object.defineProperty(I,C,{configurable:!1,enumerable:!0,get:A})},g.n=function(I){var C=I&&I.__esModule?function(){return I.default}:function(){return I};return g.d(C,"a",C),C},g.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},g.p="",g(g.s=5)}({5:function(module,exports){eval('//Ken-Q Analysis\n//Copyright (C) 2016 Shawn Banasick\n//\n//    This program is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, either version 3 of the License, or\n//    (at your option) any later version.\n\n// JSlint declarations\n/* global window, QAV, $, FileReader, UTIL, document */\n\n(function (FIREBASE, QAV, undefined) {\n    \'use strict\';\n\n    FIREBASE.filePickedJSON = function (evt) {\n        var JsonObj;\n        var files = evt.target.files; // FileList object\n        var f = files[0];\n        var reader = new FileReader();\n\n        // Closure to capture the file information.\n        reader.onload = (function () { // theFile\n            return function (e) {\n                // Render thumbnail.\n                JsonObj = e.target.result;\n                var jsonObjFile = JSON.parse(JsonObj);\n                QAV.setState("JsonObj", jsonObjFile);\n                FIREBASE.setRespondentId(jsonObjFile);\n            };\n        })(f);\n        // Read in the image file as a data URL.\n        reader.readAsText(f);\n    };\n\n    FIREBASE.setRespondentId = function (JsonObj) {\n        $(".jsonSelect").show();\n        $(".downloadCsvDataDiv").show();\n        var keys = Object.keys(JsonObj);\n        var responseObjectKeys = Object.keys(JsonObj[keys[0]]);\n        var projectName = JsonObj[keys[0]].name;\n        QAV.setState("qavProjectName", projectName);\n        $(".jsonFileName").html(\'"\' + projectName + \'" loaded\');\n        $.each(responseObjectKeys, function (key, value) {\n            $(\'#jsonIdSelect\')\n                .append($(\'<option>\', {\n                        value: key\n                    })\n                    .text(value));\n        });\n    };\n\n    FIREBASE.stageJsonData = function () {\n        var arr, array1, j, k, m, id, JsonObj, temp5, keys, i, sort0, temp1, tempString1, sortArray, iLen, mLen, kLen, sort2, sort3, jLen, replaced, prev, statementInput; \n        var qavRespondentNames, qavRespondentSortsFromDbStored, qavSortTriangleShape, multiplierArray, displaySortsArray;\n\n        // clear out any previously loaded data\n        $("#existingDatabaseStatementList").empty();\n        $("#existingDatabaseRespondentList").empty();\n\n        // grab statement data from DOM input\n        statementInput = document.getElementById("statementsInputBoxJson").value;\n\n        // process statements from text to data\n        array1 = FIREBASE.processStatementInput(statementInput);\n        QAV.setState("qavCurrentStatements", array1);\n        QAV.setState("qavOriginalSortSize", array1.length);\n        QAV.setState("originalSortSize", array1.length);\n\n        // append statements to the DOM\n        for (k = 0, kLen = array1.length; k < kLen; k++) {\n            $("#existingDatabaseStatementList").append("<li>" + array1[k] + "</li>");\n        }\n\n        // grab the id selection from DOM\n        id = $("#jsonIdSelect :selected").text();\n        JsonObj = QAV.getState("JsonObj");\n\n        // pull names and sorts from JSON data\n        var respondentNamesAndSorts = FIREBASE.pullRespondentNamesAndSortInformation(JsonObj, id);\n        displaySortsArray = respondentNamesAndSorts[0];\n        qavRespondentSortsFromDbStored = respondentNamesAndSorts[1];\n        keys = respondentNamesAndSorts[2];\n        sort0 = respondentNamesAndSorts[3];\n        qavRespondentNames = respondentNamesAndSorts[4];\n\n        // append sorts to the DOM\n        for (var ii = 0, iiLen = displaySortsArray.length; ii < iiLen; ii++) {\n            $("#existingDatabaseRespondentList").append(\'<li>\' + displaySortsArray[ii] + \'<button class="deleteButtonSort vertical">delete sort</button></li>\');\n        }\n\n        // calculate sort design pattern\n        qavSortTriangleShape = FIREBASE.calculateSortDesignPattern(JsonObj, keys, sort0);\n\n        // calculate multiplierArray\n        multiplierArray = FIREBASE.calculateMultiplierArray(qavSortTriangleShape);\n\n        QAV.setState("multiplierArray", multiplierArray);\n        QAV.setState("qavSortTriangleShape", qavSortTriangleShape);\n        QAV.setState("qavRespondentNames", qavRespondentNames);\n        QAV.setState("qavRespondentSortsFromDbStored", qavRespondentSortsFromDbStored);\n    };\n\n    FIREBASE.calculateMultiplierArray = function (qavSortTriangleShape) {\n        var multiplierArray = [];\n        var prev;\n\n        for (var m = 0, mLen = qavSortTriangleShape.length; m < mLen; m++) {\n            if (qavSortTriangleShape[m] !== prev) {\n                multiplierArray.push(1);\n            } else {\n                multiplierArray[multiplierArray.length - 1]++;\n            }\n            prev = qavSortTriangleShape[m];\n        }\n\n        var leadValue = qavSortTriangleShape[0];\n        var minLeadValue = -6;\n        var padding = Math.abs(minLeadValue - leadValue);\n        for (var p = 0; p < padding; p++) {\n            multiplierArray.unshift(0);\n        }\n        for (var r = 0; r < 20; r++) {\n            if (multiplierArray.length < 20) {\n                multiplierArray.push(0);\n            }\n        }\n        return multiplierArray;\n    };\n\n\n    FIREBASE.calculateSortDesignPattern = function (JsonObj, keys, sort0) {\n        var sort2, sort3, temp5;\n        var qavSortTriangleShape = [];\n        sort2 = JsonObj[keys[1]].sort;\n        sort3 = (sort0.split("|"));\n        for (var j = 0, jLen = sort3.length; j < jLen; j++) {\n            temp5 = +sort3[j];\n            qavSortTriangleShape.push(temp5);\n        }\n        qavSortTriangleShape.sort(function (a, b) {\n            return a - b;\n        });\n        return qavSortTriangleShape;\n    };\n\n    FIREBASE.pullRespondentNamesAndSortInformation = function (JsonObj, id) {\n        var temp1, sort0, sortArray, replaced, tempString1;\n        var qavRespondentNames = [];\n        var qavRespondentSortsFromDbStored = [];\n        var displaySortsArray = [];\n\n        var keys = Object.keys(JsonObj);\n        for (var i = 0, iLen = keys.length; i < iLen; i++) {\n            if (id === "ID") {\n                // create unique id from key\n                temp1 = keys[i].slice(-10);\n                qavRespondentNames.push(temp1);\n            } else {\n                temp1 = JsonObj[keys[i]][id];\n                qavRespondentNames.push(temp1);\n            }\n            sort0 = JsonObj[keys[i]].sort;\n            sortArray = "" + (sort0.split("|"));\n            var replacedDisplay2 = sortArray.split(\'+\').join(\'\');\n            var replacedQAV2 = sortArray.split(\'+\').join(\' \');\n            var replacedDisplay3 = replacedDisplay2.split(\',\').join(\',\');\n            var replacedQAV3 = replacedQAV2.split(\',\').join(\'\');\n\n            qavRespondentSortsFromDbStored.push(replacedQAV3);\n            replaced = replacedDisplay3.split(\' 0\').join(\'0\');\n            tempString1 = temp1 + "," + replaced;\n\n            displaySortsArray.push(tempString1);\n        }\n        return [displaySortsArray, qavRespondentSortsFromDbStored, keys, sort0, qavRespondentNames];\n    };\n\n\n    FIREBASE.processStatementInput = function (statementInput) {\n        var arr = statementInput.split(/\\r\\n|\\r|\\n/g);\n        // remove empty strings created by extra new line at end of pasted data\n        var array1 = arr.filter(function (e) {\n            return e;\n        });\n        return array1;\n    };\n\n\n    FIREBASE.convertToData = function (JsonObj) {\n        var csvBody = [];\n        var sortHeaders = [];\n\n        var keys = Object.keys(JsonObj);\n        var headerArray = Object.keys(JsonObj[keys[0]]);\n        var sort0 = JsonObj[keys[0]].sort;\n        var sortArray = sort0.split("|");\n\n        for (var k = 0, kLen = sortArray.length; k < kLen; k++) {\n            var counter1 = "S" + (k + 1);\n            sortHeaders.push(counter1);\n        }\n        var headerArray2 = headerArray.concat(sortHeaders);\n        // do not change to ID - will throw error when opening in MS Excel\n        headerArray2.unshift("Id");\n        csvBody.push(headerArray2);\n\n        for (var i = 0, iLen = keys.length; i < iLen; i++) {\n            var tempArray1 = [];\n            // var tempArray2 = [];\n\n            // get index\n            var temp4 = keys[i];\n            // get object\n            var arrayObj = JsonObj[temp4];\n            // get object keys\n            var arrayObjKeys = Object.keys(arrayObj);\n\n            // create unique id from key\n            var id = temp4.slice(-10);\n            tempArray1.push(id);\n            for (var m = 0, mLen = arrayObjKeys.length; m < mLen; m++) {\n                var value = arrayObj[arrayObjKeys[m]];\n                tempArray1.push(value);\n            }\n\n            // get sort of object\n            var sort1 = arrayObj.sort;\n            var sort2 = sort1.split("|");\n\n\n            for (var j = 0, jLen = sort2.length; j < jLen; j++) {\n                var temp5 = +sort2[j];\n                tempArray1.push(temp5);\n            }\n            csvBody.push(tempArray1);\n        }\n        return csvBody;\n    };\n\n    FIREBASE.downloadJsonData = function () {\n        var data = QAV.getState("JsonObj");\n        var projectName = QAV.getState("qavProjectName");\n        var csvBody = FIREBASE.convertToData(data);\n        var csvRows = [];\n\n        for (var i = 0, l = csvBody.length; i < l; ++i) {\n            for (var k = 0, kLen = csvBody[i].length; k < kLen; k++) {\n                csvBody[i][k] = UTIL.sanitizeUserInputText(csvBody[i][k]);\n            }\n            csvRows.push(csvBody[i].join(\',\'));\n        }\n        // export the file\n        UTIL.exportToCsv(projectName + \'.csv\', csvBody);\n    };\n\n}(window.FIREBASE = window.FIREBASE || {}, QAV));//# sourceMappingURL=data:application/json;charset=utf-8;base64,')}});