!function(t){function I(g){if(n[g])return n[g].exports;var e=n[g]={i:g,l:!1,exports:{}};return t[g].call(e.exports,e,e.exports,I),e.l=!0,e.exports}var n={};I.m=t,I.c=n,I.i=function(t){return t},I.d=function(t,n,g){I.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:g})},I.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return I.d(n,"a",n),n},I.o=function(t,I){return Object.prototype.hasOwnProperty.call(t,I)},I.p="",I(I.s=9)}({9:function(module,exports){eval('//Ken-Q Analysis\n//Copyright (C) 2016 Shawn Banasick\n//\n//    This program is free software: you can redistribute it and/or modify\n//    it under the terms of the GNU General Public License as published by\n//    the Free Software Foundation, either version 3 of the License, or\n//    (at your option) any later version.\n\n\n// JSlint declarations\n/* global numeric, CENTROID, window, QAV, $, document, JQuery, evenRound, UTIL, localStorage, _ */\n\n(function (PASTE, QAV, undefined) {\n    \'use strict\';\n\n    PASTE.stageDataPqmethod = function () {\n        var statements, sortStatement, statementInput;\n\n        // get statements as array and store\n        statements = PASTE.pullStatementsIntoAnalysis("statementsInputBoxPqmethod");\n        QAV.setState("qavCurrentStatements", statements);\n\n        for (var i = 0; i < statements.length; i++) {\n            sortStatement = statements[i];\n            $("#existingDatabaseStatementList").append("<li>" + sortStatement + "</li>");\n        }\n\n        // split into lines\n        statementInput = document.getElementById("sortInputBox").value;\n\n        var settings = PASTE.processTextBoxData(statementInput);\n\n        // parsing first line of PQMethod file to set qav variables\n        var numberSorts = settings[0];\n        var qavProjectName = settings[1];\n        var originalSortSize = settings[2];\n        var pyramidShapeNumbers = settings[3];\n        var array1 = settings[4];\n\n        QAV.setState("qavTotalNumberSorts", numberSorts);\n        QAV.setState("totalNumberSorts", numberSorts);\n        QAV.setState("qavProjectName", qavProjectName);\n        QAV.setState("qavTotalStatements", originalSortSize);\n        QAV.setState("qavOriginalSortSize", originalSortSize);\n        QAV.setState("originalSortSize", originalSortSize);\n\n        // // parsing and coercing second line of PQMethod file\n        // // warning -array temp1 has an extra "0" entry in position 0\n        QAV.setState("qavPyramidShape", pyramidShapeNumbers);\n\n        UTIL.calculateSortTriangleShape(pyramidShapeNumbers);\n\n        var namesAndSorts = PASTE.convertSortsTextToNamesAndSortNumbers(array1, originalSortSize);\n        var names = namesAndSorts[0];\n        var sorts = namesAndSorts[1];\n\n        // break text array into names text array and sorts text array\n        QAV.setState("qavRespondentSortsFromDbStored", sorts);\n\n        // to prevent errors in zScore calcs and issues with "." in datatables\n        var names2 = UTIL.checkUniqueName(names);\n\n        // set respondent names for later  todo - delete doubles\n        QAV.setState("qavRespondentNames", names2);\n        QAV.setState("respondentNames", names2);\n\n        // format pasted data\n        var sortsAsNumbers = CORR.convertSortsTextToNumbers(sorts, originalSortSize);\n\n        for (var j = 0; j < sortsAsNumbers.length; j++) {\n            var sortItem = sortsAsNumbers[j];\n            var respondent = names2[j];\n            $("#existingDatabaseRespondentList").append("<li>" + respondent + "&nbsp;&nbsp;&nbsp" + sortItem + "</li>");\n        }\n    };\n\n    PASTE.convertSortsTextToNamesAndSortNumbers = function (array1, originalSortSize) {\n        // break text array into names text array and sorts text array\n        var sortSize = ((originalSortSize * 2) + 10); // lipset 76\n        var names = [];\n        var sorts = [];\n        _(array1).forEach(function (element) {\n            if (element.length) {\n                var nameFragment = element.slice(0, 8);\n                names.push(nameFragment);\n                var sortFragment = element.slice(10, sortSize);\n                sorts.push(sortFragment);\n            }\n        }).value();\n        return [names, sorts];\n    };\n\n    PASTE.processTextBoxData = function (statementInput) {\n        var arr = statementInput.split(/\\r\\n|\\r|\\n/g);\n        var array1 = arr.slice(0, arr.length);\n        var projectTitleString = array1.shift();\n        var sortNumberString = array1.shift();\n\n        // parsing first line of PQMethod file to set qav variables\n        var numberSorts = parseInt(projectTitleString.slice(3, 6)); // lipset 9\n        var originalSortSize = parseInt(projectTitleString.slice(6, 9)); // lipset 33\n        var qavProjectName3 = (projectTitleString.slice(10, 70));\n        var qavProjectName2 = qavProjectName3.trim();\n        var qavProjectName = PASTE.sanitizeProjectName(qavProjectName2);\n\n        // parsing and coercing second line of PQMethod file\n        // warning -array temp1 has an extra "0" entry in position 0\n        var temp1b = sortNumberString.replace(/\\s\\s/g, \' \');\n        var temp1a = temp1b.split(" ");\n        var temp1 = temp1a.map(Number);\n        var pyramidShapeNumbers = temp1.slice(3, temp1.length);\n\n        return [numberSorts, qavProjectName, originalSortSize, pyramidShapeNumbers, array1];\n    };\n\n\n\n    /****************************************************************  view control\n     ********* Pull variables helper functions ************************************\n     ******************************************************************************/\n\n    PASTE.pullStatementsIntoAnalysis = function (statementTextareaId) {\n\n        var statementInput1 = document.getElementById(statementTextareaId).value;\n\n        var statementInput = statementInput1.trim();\n        var arr = statementInput.split(/\\r\\n|\\r|\\n/g);\n\n        var cleanStatements = [];\n\n        $.each(arr, function () {\n            var temp1 = UTIL.sanitizeUserInputText(this);\n            cleanStatements.push($.trim(temp1));\n        });\n        return cleanStatements;\n    };\n\n\n    // todo - check to see if this function is used anywhere\n    PASTE.pullProjectNameIntoAnalysis = function (projectNameInputId) {\n        var dataSetName = document.getElementById(projectNameInputId).value;\n        return dataSetName;\n    };\n\n    PASTE.sanitizeProjectName = function (qavProjectName2) {\n        if (qavProjectName2 === \'\') {\n            return \'_\';\n        }\n        return qavProjectName2.replace(/[^a-zA-Z0-9.-]/g, function () {\n            return \'_\'; // + match[0].charCodeAt(0).toString(16) + \'_\';\n        });\n    };\n\n    // *******************************************************************  model\n    // ***** Import Hand-Coded File *********************************************\n    // **************************************************************************\n    PASTE.filePickedTextPQM = function (e) {\n\n        var files = e.target.files[0];\n        var reader = new FileReader();\n        reader.onload = function (e) {\n            var data = e.target.result;\n            $("#sortInputBox").val(data);\n            localStorage.setItem("sortInputBox", data);\n\n        }; // end of reader function\n        reader.readAsText(files, "ASCII");\n    };\n\n    // ******************************************************************  model\n    // ***** Import User Statements File ***************************************\n    // *************************************************************************\n    PASTE.filePickedTextSTA = function (e) {\n        var files = e.target.files[0];\n        var reader = new FileReader();\n        reader.onload = function (e) {\n            var data = e.target.result;\n            $("#statementsInputBoxPqmethod").val(data);\n            localStorage.setItem("qavStatementsInputBoxPqmethod", data);\n        }; // end of reader function\n        reader.readAsText(files, "ASCII");\n    };\n\n\n    // persist statements in PQMethod paste input section\n    (function () {\n        var input = document.getElementById(\'statementsInputBoxPqmethod\');\n        //retrieve analysisVariable\n        input.value = localStorage.getItem("qavStatementsInputBoxPqmethod");\n\n        $(\'#statementsInputBoxPqmethod\').on(\'input propertychange change\', function () {\n            localStorage.setItem("qavStatementsInputBoxPqmethod", this.value);\n        });\n    })();\n\n\n\n\n}(window.PASTE = window.PASTE || {}, QAV));//# sourceMappingURL=data:application/json;charset=utf-8;base64,')}});